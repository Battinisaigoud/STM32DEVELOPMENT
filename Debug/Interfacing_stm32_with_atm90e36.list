
Interfacing_stm32_with_atm90e36.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c0c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f60  08009f60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009f60  08009f60  00019f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f68  08009f68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f6c  08009f6c  00019f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08009fe0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08009fe0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112bb  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f91  00000000  00000000  00031361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  000332f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00033ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003162d  00000000  00000000  00034a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d04  00000000  00000000  0006602d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00131301  00000000  00000000  00076d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000394c  00000000  00000000  001a8084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	e000      	b.n	800025e <__do_global_dtors_aux+0x12>
 800025c:	bf00      	nop
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000070 	.word	0x20000070
 8000268:	00000000 	.word	0x00000000
 800026c:	08009e40 	.word	0x08009e40

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	e000      	b.n	800027e <frame_dummy+0xe>
 800027c:	bf00      	nop
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000074 	.word	0x20000074
 8000288:	08009e40 	.word	0x08009e40

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002c2:	4604      	mov	r4, r0
 80002c4:	460f      	mov	r7, r1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0xa0>
 80002ca:	428a      	cmp	r2, r1
 80002cc:	4694      	mov	ip, r2
 80002ce:	d961      	bls.n	8000394 <__udivmoddi4+0xd8>
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	b143      	cbz	r3, 80002e8 <__udivmoddi4+0x2c>
 80002d6:	f1c3 0120 	rsb	r1, r3, #32
 80002da:	409f      	lsls	r7, r3
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	409c      	lsls	r4, r3
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	430f      	orrs	r7, r1
 80002e8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002ec:	fa1f fe8c 	uxth.w	lr, ip
 80002f0:	0c22      	lsrs	r2, r4, #16
 80002f2:	fbb7 f6f1 	udiv	r6, r7, r1
 80002f6:	fb01 7716 	mls	r7, r1, r6, r7
 80002fa:	fb06 f00e 	mul.w	r0, r6, lr
 80002fe:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000302:	4290      	cmp	r0, r2
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x5c>
 8000306:	eb1c 0202 	adds.w	r2, ip, r2
 800030a:	f106 37ff 	add.w	r7, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x5a>
 8000310:	4290      	cmp	r0, r2
 8000312:	f200 8137 	bhi.w	8000584 <__udivmoddi4+0x2c8>
 8000316:	463e      	mov	r6, r7
 8000318:	1a12      	subs	r2, r2, r0
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000320:	fb01 2210 	mls	r2, r1, r0, r2
 8000324:	fb00 fe0e 	mul.w	lr, r0, lr
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	45a6      	cmp	lr, r4
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x86>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 32ff 	add.w	r2, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x84>
 800033a:	45a6      	cmp	lr, r4
 800033c:	f200 811c 	bhi.w	8000578 <__udivmoddi4+0x2bc>
 8000340:	4610      	mov	r0, r2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	2600      	movs	r6, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c5 4300 	strd	r4, r3, [r5]
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d909      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000360:	2d00      	cmp	r5, #0
 8000362:	f000 80fd 	beq.w	8000560 <__udivmoddi4+0x2a4>
 8000366:	2600      	movs	r6, #0
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	4630      	mov	r0, r6
 800036e:	4631      	mov	r1, r6
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f683 	clz	r6, r3
 8000378:	2e00      	cmp	r6, #0
 800037a:	d14b      	bne.n	8000414 <__udivmoddi4+0x158>
 800037c:	428b      	cmp	r3, r1
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4630      	mov	r0, r6
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e3      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038e:	e9c5 4700 	strd	r4, r7, [r5]
 8000392:	e7e0      	b.n	8000356 <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xdc>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809d 	bne.w	80004dc <__udivmoddi4+0x220>
 80003a2:	1a89      	subs	r1, r1, r2
 80003a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a8:	b297      	uxth	r7, r2
 80003aa:	2601      	movs	r6, #1
 80003ac:	0c20      	lsrs	r0, r4, #16
 80003ae:	fbb1 f2fe 	udiv	r2, r1, lr
 80003b2:	fb0e 1112 	mls	r1, lr, r2, r1
 80003b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ba:	fb07 f002 	mul.w	r0, r7, r2
 80003be:	4288      	cmp	r0, r1
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1c 0101 	adds.w	r1, ip, r1
 80003c6:	f102 38ff 	add.w	r8, r2, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4288      	cmp	r0, r1
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80cf 	beq.w	800057e <__udivmoddi4+0x2c2>
 80003e0:	4642      	mov	r2, r8
 80003e2:	1a09      	subs	r1, r1, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x150>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14e>
 8000404:	42a7      	cmp	r7, r4
 8000406:	f200 80b4 	bhi.w	8000572 <__udivmoddi4+0x2b6>
 800040a:	4608      	mov	r0, r1
 800040c:	1be4      	subs	r4, r4, r7
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	e79b      	b.n	800034c <__udivmoddi4+0x90>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa01 f406 	lsl.w	r4, r1, r6
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	40f9      	lsrs	r1, r7
 8000424:	40b2      	lsls	r2, r6
 8000426:	ea4c 0c03 	orr.w	ip, ip, r3
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	431c      	orrs	r4, r3
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	0c20      	lsrs	r0, r4, #16
 800043e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000442:	fb09 1118 	mls	r1, r9, r8, r1
 8000446:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044a:	fb08 f00e 	mul.w	r0, r8, lr
 800044e:	4288      	cmp	r0, r1
 8000450:	d90f      	bls.n	8000472 <__udivmoddi4+0x1b6>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f108 3aff 	add.w	sl, r8, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	4288      	cmp	r0, r1
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b4>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ce>
 8000470:	46d0      	mov	r8, sl
 8000472:	1a09      	subs	r1, r1, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb1 f0f9 	udiv	r0, r1, r9
 800047a:	fb09 1110 	mls	r1, r9, r0, r1
 800047e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000482:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000486:	458e      	cmp	lr, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x1de>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000492:	d201      	bcs.n	8000498 <__udivmoddi4+0x1dc>
 8000494:	458e      	cmp	lr, r1
 8000496:	d87f      	bhi.n	8000598 <__udivmoddi4+0x2dc>
 8000498:	4620      	mov	r0, r4
 800049a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	fba0 9802 	umull	r9, r8, r0, r2
 80004a6:	4541      	cmp	r1, r8
 80004a8:	464c      	mov	r4, r9
 80004aa:	46c6      	mov	lr, r8
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0x1f8>
 80004ae:	d106      	bne.n	80004be <__udivmoddi4+0x202>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d204      	bcs.n	80004be <__udivmoddi4+0x202>
 80004b4:	3801      	subs	r0, #1
 80004b6:	ebb9 0402 	subs.w	r4, r9, r2
 80004ba:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d070      	beq.n	80005a4 <__udivmoddi4+0x2e8>
 80004c2:	1b1a      	subs	r2, r3, r4
 80004c4:	eb61 010e 	sbc.w	r1, r1, lr
 80004c8:	fa22 f306 	lsr.w	r3, r2, r6
 80004cc:	fa01 f707 	lsl.w	r7, r1, r7
 80004d0:	40f1      	lsrs	r1, r6
 80004d2:	2600      	movs	r6, #0
 80004d4:	431f      	orrs	r7, r3
 80004d6:	e9c5 7100 	strd	r7, r1, [r5]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0020 	rsb	r0, r3, #32
 80004e4:	fa01 f203 	lsl.w	r2, r1, r3
 80004e8:	fa21 f600 	lsr.w	r6, r1, r0
 80004ec:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f0:	fa24 f100 	lsr.w	r1, r4, r0
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	409c      	lsls	r4, r3
 80004fa:	4311      	orrs	r1, r2
 80004fc:	fbb6 f0fe 	udiv	r0, r6, lr
 8000500:	0c0a      	lsrs	r2, r1, #16
 8000502:	fb0e 6610 	mls	r6, lr, r0, r6
 8000506:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800050a:	fb00 f607 	mul.w	r6, r0, r7
 800050e:	4296      	cmp	r6, r2
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x274>
 8000512:	eb1c 0202 	adds.w	r2, ip, r2
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	4296      	cmp	r6, r2
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x272>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d6>
 800052e:	4640      	mov	r0, r8
 8000530:	1b92      	subs	r2, r2, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb2 f6fe 	udiv	r6, r2, lr
 8000538:	fb0e 2216 	mls	r2, lr, r6, r2
 800053c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000540:	fb06 f207 	mul.w	r2, r6, r7
 8000544:	428a      	cmp	r2, r1
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x29c>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x29a>
 8000552:	428a      	cmp	r2, r1
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2e2>
 8000556:	4646      	mov	r6, r8
 8000558:	1a89      	subs	r1, r1, r2
 800055a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800055e:	e725      	b.n	80003ac <__udivmoddi4+0xf0>
 8000560:	462e      	mov	r6, r5
 8000562:	4628      	mov	r0, r5
 8000564:	e6f7      	b.n	8000356 <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb61 0303 	sbc.w	r3, r1, r3
 800056c:	2001      	movs	r0, #1
 800056e:	461f      	mov	r7, r3
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xce>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e749      	b.n	800040c <__udivmoddi4+0x150>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e1      	b.n	8000342 <__udivmoddi4+0x86>
 800057e:	3a02      	subs	r2, #2
 8000580:	4461      	add	r1, ip
 8000582:	e72e      	b.n	80003e2 <__udivmoddi4+0x126>
 8000584:	3e02      	subs	r6, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c6      	b.n	8000318 <__udivmoddi4+0x5c>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4461      	add	r1, ip
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b6>
 8000592:	3802      	subs	r0, #2
 8000594:	4462      	add	r2, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x274>
 8000598:	3802      	subs	r0, #2
 800059a:	4461      	add	r1, ip
 800059c:	e77d      	b.n	800049a <__udivmoddi4+0x1de>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x29c>
 80005a4:	462e      	mov	r6, r5
 80005a6:	e6d6      	b.n	8000356 <__udivmoddi4+0x9a>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <readEnrgyMeterValues>:
    uint8_t *rx_buffer; // Pointer to the receive buffer
} spi_transaction_t;


void readEnrgyMeterValues(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	flag = 1;
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <readEnrgyMeterValues+0x74>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	801a      	strh	r2, [r3, #0]

	uint16_t temp     =       CommEnergyIC(&hspi1, ATM90E36A_READ, Temp, 0);//UrmsA
 80005b8:	2300      	movs	r3, #0
 80005ba:	22fc      	movs	r2, #252	; 0xfc
 80005bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c0:	4818      	ldr	r0, [pc, #96]	; (8000624 <readEnrgyMeterValues+0x78>)
 80005c2:	f000 f839 	bl	8000638 <CommEnergyIC>
 80005c6:	4603      	mov	r3, r0
 80005c8:	80fb      	strh	r3, [r7, #6]
	uint16_t volts    =      CommEnergyIC(&hspi1, ATM90E36A_READ, UrmsA, 0);
 80005ca:	2300      	movs	r3, #0
 80005cc:	22d9      	movs	r2, #217	; 0xd9
 80005ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d2:	4814      	ldr	r0, [pc, #80]	; (8000624 <readEnrgyMeterValues+0x78>)
 80005d4:	f000 f830 	bl	8000638 <CommEnergyIC>
 80005d8:	4603      	mov	r3, r0
 80005da:	80bb      	strh	r3, [r7, #4]
	uint16_t current  =    CommEnergyIC(&hspi1, ATM90E36A_READ, IrmsA, 0);
 80005dc:	2300      	movs	r3, #0
 80005de:	22dd      	movs	r2, #221	; 0xdd
 80005e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e4:	480f      	ldr	r0, [pc, #60]	; (8000624 <readEnrgyMeterValues+0x78>)
 80005e6:	f000 f827 	bl	8000638 <CommEnergyIC>
 80005ea:	4603      	mov	r3, r0
 80005ec:	807b      	strh	r3, [r7, #2]
//	uint16_t  power    =      CommEnergyIC(&hspi1, ATM90E36A_READ, PmeanAF, 0);

	 printf("temp : %d\r\n",temp);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	4619      	mov	r1, r3
 80005f2:	480d      	ldr	r0, [pc, #52]	; (8000628 <readEnrgyMeterValues+0x7c>)
 80005f4:	f008 fc12 	bl	8008e1c <iprintf>
//	 printf("Voltage: %f \n",(volts * 0.01 * 0.989649057 + 0.315538775));
	 printf("volts %d\r\n",volts/100);
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	4a0c      	ldr	r2, [pc, #48]	; (800062c <readEnrgyMeterValues+0x80>)
 80005fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000600:	095b      	lsrs	r3, r3, #5
 8000602:	b29b      	uxth	r3, r3
 8000604:	4619      	mov	r1, r3
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <readEnrgyMeterValues+0x84>)
 8000608:	f008 fc08 	bl	8008e1c <iprintf>
	 printf("current : %d\r\n",current);
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	4619      	mov	r1, r3
 8000610:	4808      	ldr	r0, [pc, #32]	; (8000634 <readEnrgyMeterValues+0x88>)
 8000612:	f008 fc03 	bl	8008e1c <iprintf>
//	 printf("power : %d\r\n",power);




}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000008c 	.word	0x2000008c
 8000624:	20000090 	.word	0x20000090
 8000628:	08009e58 	.word	0x08009e58
 800062c:	51eb851f 	.word	0x51eb851f
 8000630:	08009e64 	.word	0x08009e64
 8000634:	08009e70 	.word	0x08009e70

08000638 <CommEnergyIC>:



uint16_t CommEnergyIC(SPI_HandleTypeDef *hspi, uint16_t RW, uint16_t address, uint16_t val)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af02      	add	r7, sp, #8
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	4608      	mov	r0, r1
 8000642:	4611      	mov	r1, r2
 8000644:	461a      	mov	r2, r3
 8000646:	4603      	mov	r3, r0
 8000648:	817b      	strh	r3, [r7, #10]
 800064a:	460b      	mov	r3, r1
 800064c:	813b      	strh	r3, [r7, #8]
 800064e:	4613      	mov	r3, r2
 8000650:	80fb      	strh	r3, [r7, #6]


//	 HAL_SPI_Transmit(&hspi2, &transaction, sizeof(transaction), HAL_MAX_DELAY);
	  uint16_t readCommand = address | RW;
 8000652:	893a      	ldrh	r2, [r7, #8]
 8000654:	897b      	ldrh	r3, [r7, #10]
 8000656:	4313      	orrs	r3, r2
 8000658:	83fb      	strh	r3, [r7, #30]
	    uint8_t tx_data[4] = {(readCommand >> 8) & 0xFF, readCommand & 0xFF, (val >> 8) & 0xFF, val & 0xFF};
 800065a:	8bfb      	ldrh	r3, [r7, #30]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	b29b      	uxth	r3, r3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	763b      	strb	r3, [r7, #24]
 8000664:	8bfb      	ldrh	r3, [r7, #30]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	767b      	strb	r3, [r7, #25]
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	76bb      	strb	r3, [r7, #26]
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	76fb      	strb	r3, [r7, #27]
	    uint8_t rx_data[4] = {0, 0, 0, 0};
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]


//	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);


	    HAL_Delay(10);
 800067e:	200a      	movs	r0, #10
 8000680:	f000 fec4 	bl	800140c <HAL_Delay>
//	    };


//	   HAL_SPI_Transmit(&hspi1, &transaction, sizeof(transaction), HAL_MAX_DELAY);

	    HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 4, HAL_MAX_DELAY);
 8000684:	f107 0214 	add.w	r2, r7, #20
 8000688:	f107 0118 	add.w	r1, r7, #24
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2304      	movs	r3, #4
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <CommEnergyIC+0x80>)
 8000696:	f007 fa67 	bl	8007b68 <HAL_SPI_TransmitReceive>


	    HAL_Delay(10);
 800069a:	200a      	movs	r0, #10
 800069c:	f000 feb6 	bl	800140c <HAL_Delay>


//	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);


         return ((rx_data[2] << 8) | rx_data[3]);
 80006a0:	7dbb      	ldrb	r3, [r7, #22]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	b29b      	uxth	r3, r3



}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000090 	.word	0x20000090

080006bc <ATM90E36A_Init>:





void ATM90E36A_Init(void ) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
    // Example initialization sequence - adjust according to your needs and the datasheet
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, SoftReset, 0x789A); // Perform soft reset//lastdata
 80006c0:	f647 039a 	movw	r3, #30874	; 0x789a
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	48b6      	ldr	r0, [pc, #728]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80006ca:	f7ff ffb5 	bl	8000638 <CommEnergyIC>
//	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, lastdata, 0x0000);

	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, FuncEn0, 0x0000);   // Voltage sag
 80006ce:	2300      	movs	r3, #0
 80006d0:	2203      	movs	r2, #3
 80006d2:	2100      	movs	r1, #0
 80006d4:	48b3      	ldr	r0, [pc, #716]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80006d6:	f7ff ffaf 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, FuncEn1, 0x0000);   // Voltage sag
 80006da:	2300      	movs	r3, #0
 80006dc:	2204      	movs	r2, #4
 80006de:	2100      	movs	r1, #0
 80006e0:	48b0      	ldr	r0, [pc, #704]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80006e2:	f7ff ffa9 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, SagTh, 0x0001);     // Voltage sag threshold
 80006e6:	2301      	movs	r3, #1
 80006e8:	2208      	movs	r2, #8
 80006ea:	2100      	movs	r1, #0
 80006ec:	48ad      	ldr	r0, [pc, #692]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80006ee:	f7ff ffa3 	bl	8000638 <CommEnergyIC>

	    // Set metering config values (CONFIG)
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, ConfigStart, 0x5678); // Metering calibration startup
 80006f2:	f245 6378 	movw	r3, #22136	; 0x5678
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	48aa      	ldr	r0, [pc, #680]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80006fc:	f7ff ff9c 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PLconstH, 0x0861);    // PL Constant MSB (default)
 8000700:	f640 0361 	movw	r3, #2145	; 0x861
 8000704:	2231      	movs	r2, #49	; 0x31
 8000706:	2100      	movs	r1, #0
 8000708:	48a6      	ldr	r0, [pc, #664]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800070a:	f7ff ff95 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PLconstL, 0xC468);    // PL Constant LSB (default)
 800070e:	f24c 4368 	movw	r3, #50280	; 0xc468
 8000712:	2232      	movs	r2, #50	; 0x32
 8000714:	2100      	movs	r1, #0
 8000716:	48a3      	ldr	r0, [pc, #652]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000718:	f7ff ff8e 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, MMode0, 0x1087);      // Mode Config (60 Hz, 3P4W)
 800071c:	f241 0387 	movw	r3, #4231	; 0x1087
 8000720:	2233      	movs	r2, #51	; 0x33
 8000722:	2100      	movs	r1, #0
 8000724:	489f      	ldr	r0, [pc, #636]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000726:	f7ff ff87 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, MMode1, 0x1500);      // 0x5555 (x2) // 0x0000 (1x)
 800072a:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 800072e:	2234      	movs	r2, #52	; 0x34
 8000730:	2100      	movs	r1, #0
 8000732:	489c      	ldr	r0, [pc, #624]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000734:	f7ff ff80 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PStartTh, 0x0000);    // Active Startup Power Threshold
 8000738:	2300      	movs	r3, #0
 800073a:	2235      	movs	r2, #53	; 0x35
 800073c:	2100      	movs	r1, #0
 800073e:	4899      	ldr	r0, [pc, #612]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000740:	f7ff ff7a 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, QStartTh, 0x0000);    // Reactive Startup Power Threshold
 8000744:	2300      	movs	r3, #0
 8000746:	2236      	movs	r2, #54	; 0x36
 8000748:	2100      	movs	r1, #0
 800074a:	4896      	ldr	r0, [pc, #600]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800074c:	f7ff ff74 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, SStartTh, 0x0000);    // Apparent Startup Power Threshold
 8000750:	2300      	movs	r3, #0
 8000752:	2237      	movs	r2, #55	; 0x37
 8000754:	2100      	movs	r1, #0
 8000756:	4893      	ldr	r0, [pc, #588]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000758:	f7ff ff6e 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PPhaseTh, 0x0000);    // Active Phase Threshold
 800075c:	2300      	movs	r3, #0
 800075e:	2238      	movs	r2, #56	; 0x38
 8000760:	2100      	movs	r1, #0
 8000762:	4890      	ldr	r0, [pc, #576]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000764:	f7ff ff68 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, QPhaseTh, 0x0000);    // Reactive Phase Threshold
 8000768:	2300      	movs	r3, #0
 800076a:	2239      	movs	r2, #57	; 0x39
 800076c:	2100      	movs	r1, #0
 800076e:	488d      	ldr	r0, [pc, #564]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000770:	f7ff ff62 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, SPhaseTh, 0x0000);    // Apparent  Phase Threshold
 8000774:	2300      	movs	r3, #0
 8000776:	223a      	movs	r2, #58	; 0x3a
 8000778:	2100      	movs	r1, #0
 800077a:	488a      	ldr	r0, [pc, #552]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800077c:	f7ff ff5c 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, CSZero, 0x4741);      // Checksum 0
 8000780:	f244 7341 	movw	r3, #18241	; 0x4741
 8000784:	223b      	movs	r2, #59	; 0x3b
 8000786:	2100      	movs	r1, #0
 8000788:	4886      	ldr	r0, [pc, #536]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800078a:	f7ff ff55 	bl	8000638 <CommEnergyIC>

	    // Set metering calibration values (CALIBRATION)
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, CalStart, 0x5678); // Metering calibration startup
 800078e:	f245 6378 	movw	r3, #22136	; 0x5678
 8000792:	2240      	movs	r2, #64	; 0x40
 8000794:	2100      	movs	r1, #0
 8000796:	4883      	ldr	r0, [pc, #524]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000798:	f7ff ff4e 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, GainA, 0x0000);    // Line calibration gain
 800079c:	2300      	movs	r3, #0
 800079e:	2247      	movs	r2, #71	; 0x47
 80007a0:	2100      	movs	r1, #0
 80007a2:	4880      	ldr	r0, [pc, #512]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80007a4:	f7ff ff48 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PhiA, 0x0000);     // Line calibration angle
 80007a8:	2300      	movs	r3, #0
 80007aa:	2248      	movs	r2, #72	; 0x48
 80007ac:	2100      	movs	r1, #0
 80007ae:	487d      	ldr	r0, [pc, #500]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80007b0:	f7ff ff42 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, GainB, 0x0000);    // Line calibration gain
 80007b4:	2300      	movs	r3, #0
 80007b6:	2249      	movs	r2, #73	; 0x49
 80007b8:	2100      	movs	r1, #0
 80007ba:	487a      	ldr	r0, [pc, #488]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80007bc:	f7ff ff3c 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PhiB, 0x0000);     // Line calibration angle
 80007c0:	2300      	movs	r3, #0
 80007c2:	224a      	movs	r2, #74	; 0x4a
 80007c4:	2100      	movs	r1, #0
 80007c6:	4877      	ldr	r0, [pc, #476]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80007c8:	f7ff ff36 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, GainC, 0x0000);    // Line calibration gain
 80007cc:	2300      	movs	r3, #0
 80007ce:	224b      	movs	r2, #75	; 0x4b
 80007d0:	2100      	movs	r1, #0
 80007d2:	4874      	ldr	r0, [pc, #464]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80007d4:	f7ff ff30 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PhiC, 0x0000);     // Line calibration angle
 80007d8:	2300      	movs	r3, #0
 80007da:	224c      	movs	r2, #76	; 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4871      	ldr	r0, [pc, #452]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80007e0:	f7ff ff2a 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PoffsetA, 0x0000); // A line active power offset
 80007e4:	2300      	movs	r3, #0
 80007e6:	2241      	movs	r2, #65	; 0x41
 80007e8:	2100      	movs	r1, #0
 80007ea:	486e      	ldr	r0, [pc, #440]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80007ec:	f7ff ff24 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, QoffsetA, 0x0000); // A line reactive power offset
 80007f0:	2300      	movs	r3, #0
 80007f2:	2242      	movs	r2, #66	; 0x42
 80007f4:	2100      	movs	r1, #0
 80007f6:	486b      	ldr	r0, [pc, #428]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80007f8:	f7ff ff1e 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PoffsetB, 0x0000); // B line active power offset
 80007fc:	2300      	movs	r3, #0
 80007fe:	2243      	movs	r2, #67	; 0x43
 8000800:	2100      	movs	r1, #0
 8000802:	4868      	ldr	r0, [pc, #416]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000804:	f7ff ff18 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, QoffsetB, 0x0000); // B line reactive power offset
 8000808:	2300      	movs	r3, #0
 800080a:	2244      	movs	r2, #68	; 0x44
 800080c:	2100      	movs	r1, #0
 800080e:	4865      	ldr	r0, [pc, #404]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000810:	f7ff ff12 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PoffsetC, 0x0000); // C line active power offset
 8000814:	2300      	movs	r3, #0
 8000816:	2245      	movs	r2, #69	; 0x45
 8000818:	2100      	movs	r1, #0
 800081a:	4862      	ldr	r0, [pc, #392]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800081c:	f7ff ff0c 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, QoffsetC, 0x0000); // C line reactive power offset
 8000820:	2300      	movs	r3, #0
 8000822:	2246      	movs	r2, #70	; 0x46
 8000824:	2100      	movs	r1, #0
 8000826:	485f      	ldr	r0, [pc, #380]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000828:	f7ff ff06 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, CSOne, 0x0000);    // Checksum 1
 800082c:	2300      	movs	r3, #0
 800082e:	224d      	movs	r2, #77	; 0x4d
 8000830:	2100      	movs	r1, #0
 8000832:	485c      	ldr	r0, [pc, #368]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000834:	f7ff ff00 	bl	8000638 <CommEnergyIC>

	    // Set metering calibration values (HARMONIC)
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, HarmStart, 0x5678); // Metering calibration startup
 8000838:	f245 6378 	movw	r3, #22136	; 0x5678
 800083c:	2250      	movs	r2, #80	; 0x50
 800083e:	2100      	movs	r1, #0
 8000840:	4858      	ldr	r0, [pc, #352]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000842:	f7ff fef9 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, POffsetAF, 0x0000); // A Fund. active power offset
 8000846:	2300      	movs	r3, #0
 8000848:	2251      	movs	r2, #81	; 0x51
 800084a:	2100      	movs	r1, #0
 800084c:	4855      	ldr	r0, [pc, #340]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800084e:	f7ff fef3 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, POffsetBF, 0x0000); // B Fund. active power offset
 8000852:	2300      	movs	r3, #0
 8000854:	2252      	movs	r2, #82	; 0x52
 8000856:	2100      	movs	r1, #0
 8000858:	4852      	ldr	r0, [pc, #328]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800085a:	f7ff feed 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, POffsetCF, 0x0000); // C Fund. active power offset
 800085e:	2300      	movs	r3, #0
 8000860:	2253      	movs	r2, #83	; 0x53
 8000862:	2100      	movs	r1, #0
 8000864:	484f      	ldr	r0, [pc, #316]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000866:	f7ff fee7 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PGainAF, 0x0000);   // A Fund. active power gain
 800086a:	2300      	movs	r3, #0
 800086c:	2254      	movs	r2, #84	; 0x54
 800086e:	2100      	movs	r1, #0
 8000870:	484c      	ldr	r0, [pc, #304]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000872:	f7ff fee1 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PGainBF, 0x0000);   // B Fund. active power gain
 8000876:	2300      	movs	r3, #0
 8000878:	2255      	movs	r2, #85	; 0x55
 800087a:	2100      	movs	r1, #0
 800087c:	4849      	ldr	r0, [pc, #292]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800087e:	f7ff fedb 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, PGainCF, 0x0000);   // C Fund. active power gain
 8000882:	2300      	movs	r3, #0
 8000884:	2256      	movs	r2, #86	; 0x56
 8000886:	2100      	movs	r1, #0
 8000888:	4846      	ldr	r0, [pc, #280]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800088a:	f7ff fed5 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, CSTwo, 0x0000);     // Checksum 2
 800088e:	2300      	movs	r3, #0
 8000890:	2257      	movs	r2, #87	; 0x57
 8000892:	2100      	movs	r1, #0
 8000894:	4843      	ldr	r0, [pc, #268]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000896:	f7ff fecf 	bl	8000638 <CommEnergyIC>

	    // Set measurement calibration values (ADJUST)
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, AdjStart, 0x5678); // Measurement calibration
 800089a:	f245 6378 	movw	r3, #22136	; 0x5678
 800089e:	2260      	movs	r2, #96	; 0x60
 80008a0:	2100      	movs	r1, #0
 80008a2:	4840      	ldr	r0, [pc, #256]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80008a4:	f7ff fec8 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, UgainA, 0x0002);   // A SVoltage rms gain
 80008a8:	2302      	movs	r3, #2
 80008aa:	2261      	movs	r2, #97	; 0x61
 80008ac:	2100      	movs	r1, #0
 80008ae:	483d      	ldr	r0, [pc, #244]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80008b0:	f7ff fec2 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, IgainA, 0xFD7F);   // A line current gain
 80008b4:	f64f 537f 	movw	r3, #64895	; 0xfd7f
 80008b8:	2262      	movs	r2, #98	; 0x62
 80008ba:	2100      	movs	r1, #0
 80008bc:	4839      	ldr	r0, [pc, #228]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80008be:	f7ff febb 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, UoffsetA, 0x0000); // A Voltage offset
 80008c2:	2300      	movs	r3, #0
 80008c4:	2263      	movs	r2, #99	; 0x63
 80008c6:	2100      	movs	r1, #0
 80008c8:	4836      	ldr	r0, [pc, #216]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80008ca:	f7ff feb5 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, IoffsetA, 0x0000); // A line current offset
 80008ce:	2300      	movs	r3, #0
 80008d0:	2264      	movs	r2, #100	; 0x64
 80008d2:	2100      	movs	r1, #0
 80008d4:	4833      	ldr	r0, [pc, #204]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80008d6:	f7ff feaf 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, UgainB, 0x0002);   // B Voltage rms gain
 80008da:	2302      	movs	r3, #2
 80008dc:	2265      	movs	r2, #101	; 0x65
 80008de:	2100      	movs	r1, #0
 80008e0:	4830      	ldr	r0, [pc, #192]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80008e2:	f7ff fea9 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, IgainB, 0xFD7F);   // B line current gain
 80008e6:	f64f 537f 	movw	r3, #64895	; 0xfd7f
 80008ea:	2266      	movs	r2, #102	; 0x66
 80008ec:	2100      	movs	r1, #0
 80008ee:	482d      	ldr	r0, [pc, #180]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80008f0:	f7ff fea2 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, UoffsetB, 0x0000); // B Voltage offset
 80008f4:	2300      	movs	r3, #0
 80008f6:	2267      	movs	r2, #103	; 0x67
 80008f8:	2100      	movs	r1, #0
 80008fa:	482a      	ldr	r0, [pc, #168]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 80008fc:	f7ff fe9c 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, IoffsetB, 0x0000); // B line current offset
 8000900:	2300      	movs	r3, #0
 8000902:	2268      	movs	r2, #104	; 0x68
 8000904:	2100      	movs	r1, #0
 8000906:	4827      	ldr	r0, [pc, #156]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000908:	f7ff fe96 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, UgainC, 0x0002);   // C Voltage rms gain
 800090c:	2302      	movs	r3, #2
 800090e:	2269      	movs	r2, #105	; 0x69
 8000910:	2100      	movs	r1, #0
 8000912:	4824      	ldr	r0, [pc, #144]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000914:	f7ff fe90 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, IgainC, 0xFD7F);   // C line current gain
 8000918:	f64f 537f 	movw	r3, #64895	; 0xfd7f
 800091c:	226a      	movs	r2, #106	; 0x6a
 800091e:	2100      	movs	r1, #0
 8000920:	4820      	ldr	r0, [pc, #128]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000922:	f7ff fe89 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, UoffsetC, 0x0000); // C Voltage offset
 8000926:	2300      	movs	r3, #0
 8000928:	226b      	movs	r2, #107	; 0x6b
 800092a:	2100      	movs	r1, #0
 800092c:	481d      	ldr	r0, [pc, #116]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800092e:	f7ff fe83 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, IoffsetC, 0x0000); // C line current offset
 8000932:	2300      	movs	r3, #0
 8000934:	226c      	movs	r2, #108	; 0x6c
 8000936:	2100      	movs	r1, #0
 8000938:	481a      	ldr	r0, [pc, #104]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800093a:	f7ff fe7d 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, IgainN, 0xFD7F);   // C line current gain
 800093e:	f64f 537f 	movw	r3, #64895	; 0xfd7f
 8000942:	226d      	movs	r2, #109	; 0x6d
 8000944:	2100      	movs	r1, #0
 8000946:	4817      	ldr	r0, [pc, #92]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000948:	f7ff fe76 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, CSThree, 0x02F6);  // Checksum 3
 800094c:	f240 23f6 	movw	r3, #758	; 0x2f6
 8000950:	226f      	movs	r2, #111	; 0x6f
 8000952:	2100      	movs	r1, #0
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000956:	f7ff fe6f 	bl	8000638 <CommEnergyIC>

	    // Done with the configuration
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, ConfigStart, 0x5678);
 800095a:	f245 6378 	movw	r3, #22136	; 0x5678
 800095e:	2230      	movs	r2, #48	; 0x30
 8000960:	2100      	movs	r1, #0
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000964:	f7ff fe68 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, CalStart, 0x5678);  // 0x6886 //0x5678 //8765);
 8000968:	f245 6378 	movw	r3, #22136	; 0x5678
 800096c:	2240      	movs	r2, #64	; 0x40
 800096e:	2100      	movs	r1, #0
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000972:	f7ff fe61 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, HarmStart, 0x5678); // 0x6886 //0x5678 //8765);
 8000976:	f245 6378 	movw	r3, #22136	; 0x5678
 800097a:	2250      	movs	r2, #80	; 0x50
 800097c:	2100      	movs	r1, #0
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 8000980:	f7ff fe5a 	bl	8000638 <CommEnergyIC>
	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, AdjStart, 0x5678);  // 0x6886 //0x5678 //8765);
 8000984:	f245 6378 	movw	r3, #22136	; 0x5678
 8000988:	2260      	movs	r2, #96	; 0x60
 800098a:	2100      	movs	r1, #0
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800098e:	f7ff fe53 	bl	8000638 <CommEnergyIC>

	    CommEnergyIC(&hspi1, ATM90E36A_WRITE, SoftReset, 0x789A); // Perform soft reset
 8000992:	f647 039a 	movw	r3, #30874	; 0x789a
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	4802      	ldr	r0, [pc, #8]	; (80009a4 <ATM90E36A_Init+0x2e8>)
 800099c:	f7ff fe4c 	bl	8000638 <CommEnergyIC>
//	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);


}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000090 	.word	0x20000090

080009a8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009b0:	1d39      	adds	r1, r7, #4
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	2201      	movs	r2, #1
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <__io_putchar+0x20>)
 80009ba:	f007 fc54 	bl	8008266 <HAL_UART_Transmit>
    return ch;
 80009be:	687b      	ldr	r3, [r7, #4]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000120 	.word	0x20000120

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f000 fca0 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f814 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d8:	f000 f91a 	bl	8000c10 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009dc:	f000 f8cc 	bl	8000b78 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80009e0:	f000 f874 	bl	8000acc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ATM90E36A_Init();
 80009e4:	f7ff fe6a 	bl	80006bc <ATM90E36A_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("hello\r\n");
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <main+0x30>)
 80009ea:	f008 fa9d 	bl	8008f28 <puts>

	  readEnrgyMeterValues();
 80009ee:	f7ff fddd 	bl	80005ac <readEnrgyMeterValues>


//	  printf("Interfacing stm32 with energy meter\r\n");
//	  HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)&send_data, (uint8_t*)&rec_data, 1, HAL_MAX_DELAY);
//	  printf("rece %d\r\n",rec_data);
	  HAL_Delay(1000);
 80009f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f6:	f000 fd09 	bl	800140c <HAL_Delay>
	  printf("hello\r\n");
 80009fa:	e7f5      	b.n	80009e8 <main+0x1c>
 80009fc:	08009e80 	.word	0x08009e80

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b09c      	sub	sp, #112	; 0x70
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2250      	movs	r2, #80	; 0x50
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f008 f9fc 	bl	8008e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SystemClock_Config+0xc8>)
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <SystemClock_Config+0xc8>)
 8000a2c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a30:	6113      	str	r3, [r2, #16]
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <SystemClock_Config+0xc8>)
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3e:	bf00      	nop
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <SystemClock_Config+0xc8>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d1f9      	bne.n	8000a40 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a62:	2328      	movs	r3, #40	; 0x28
 8000a64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000a72:	230c      	movs	r3, #12
 8000a74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 ff34 	bl	80018f0 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a8e:	f000 f947 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	231f      	movs	r3, #31
 8000a94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2303      	movs	r3, #3
 8000a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2105      	movs	r1, #5
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fb55 	bl	8002160 <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000abc:	f000 f930 	bl	8000d20 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3770      	adds	r7, #112	; 0x70
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	44020800 	.word	0x44020800

08000acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad0:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000ad2:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <MX_SPI1_Init+0xa8>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000ad8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000af8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b00:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000b04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b1a:	2207      	movs	r2, #7
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_SPI1_Init+0xa4>)
 8000b5e:	f006 fe93 	bl	8007888 <HAL_SPI_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b68:	f000 f8da 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000090 	.word	0x20000090
 8000b74:	40013000 	.word	0x40013000

08000b78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b7e:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <MX_USART3_UART_Init+0x94>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc0:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bc2:	f007 fb00 	bl	80081c6 <HAL_UART_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bcc:	f000 f8a8 	bl	8000d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bd4:	f008 f826 	bl	8008c24 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bde:	f000 f89f 	bl	8000d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4808      	ldr	r0, [pc, #32]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000be6:	f008 f85b 	bl	8008ca0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf0:	f000 f896 	bl	8000d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bf6:	f007 ffdc 	bl	8008bb2 <HAL_UARTEx_DisableFifoMode>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f000 f88e 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000120 	.word	0x20000120
 8000c0c:	40004800 	.word	0x40004800

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c2c:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c4a:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c54:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c68:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000caa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_GPIO_Init+0x104>)
 8000cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f248 0110 	movw	r1, #32784	; 0x8010
 8000cc2:	4815      	ldr	r0, [pc, #84]	; (8000d18 <MX_GPIO_Init+0x108>)
 8000cc4:	f000 fdfc 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <MX_GPIO_Init+0x10c>)
 8000cce:	f000 fdf7 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000cd2:	f248 0310 	movw	r3, #32784	; 0x8010
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480b      	ldr	r0, [pc, #44]	; (8000d18 <MX_GPIO_Init+0x108>)
 8000cec:	f000 fc96 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_GPIO_Init+0x10c>)
 8000d08:	f000 fc88 	bl	800161c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	44020c00 	.word	0x44020c00
 8000d18:	42020000 	.word	0x42020000
 8000d1c:	42020400 	.word	0x42020400

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>

08000d2a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0ce      	sub	sp, #312	; 0x138
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d42:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d46:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d60:	4618      	mov	r0, r3
 8000d62:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000d66:	461a      	mov	r2, r3
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f008 f84f 	bl	8008e0c <memset>
  if(hspi->Instance==SPI1)
 8000d6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d72:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a4a      	ldr	r2, [pc, #296]	; (8000ea4 <HAL_SPI_MspInit+0x16c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	f040 808b 	bne.w	8000e98 <HAL_SPI_MspInit+0x160>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d86:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000d96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000d9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fd1b 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8000db4:	f7ff ffb4 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db8:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000dba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000dbe:	4a3a      	ldr	r2, [pc, #232]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000dc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000dce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8000dd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000dd6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000de0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000de4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dec:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dfc:	f003 0201 	and.w	r2, r3, #1
 8000e00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000e12:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e1a:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_SPI_MspInit+0x170>)
 8000e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e2a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000e2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e40:	681b      	ldr	r3, [r3, #0]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e42:	23e0      	movs	r3, #224	; 0xe0
 8000e44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000e64:	4619      	mov	r1, r3
 8000e66:	4811      	ldr	r0, [pc, #68]	; (8000eac <HAL_SPI_MspInit+0x174>)
 8000e68:	f000 fbd8 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e86:	2305      	movs	r3, #5
 8000e88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000e90:	4619      	mov	r1, r3
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <HAL_SPI_MspInit+0x178>)
 8000e94:	f000 fbc2 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	44020c00 	.word	0x44020c00
 8000eac:	42020000 	.word	0x42020000
 8000eb0:	42021800 	.word	0x42021800

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ce      	sub	sp, #312	; 0x138
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ebe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ec2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ed8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000edc:	4618      	mov	r0, r3
 8000ede:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f007 ff91 	bl	8008e0c <memset>
  if(huart->Instance==USART3)
 8000eea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000eee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a49      	ldr	r2, [pc, #292]	; (800101c <HAL_UART_MspInit+0x168>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	f040 808a 	bne.w	8001012 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000efe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f02:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000f06:	f04f 0204 	mov.w	r2, #4
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1e:	f107 0318 	add.w	r3, r7, #24
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fc5e 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000f2e:	f7ff fef7 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f32:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f38:	4a39      	ldr	r2, [pc, #228]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f48:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000f4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f5e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f76:	f003 0204 	and.w	r2, r3, #4
 8000f7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000f88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f8c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f94:	4a22      	ldr	r2, [pc, #136]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_UART_MspInit+0x16c>)
 8000fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa4:	f003 0202 	and.w	r2, r3, #2
 8000fa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fba:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4810      	ldr	r0, [pc, #64]	; (8001024 <HAL_UART_MspInit+0x170>)
 8000fe2:	f000 fb1b 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001000:	2307      	movs	r3, #7
 8001002:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <HAL_UART_MspInit+0x174>)
 800100e:	f000 fb05 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40004800 	.word	0x40004800
 8001020:	44020c00 	.word	0x44020c00
 8001024:	42020800 	.word	0x42020800
 8001028:	42020400 	.word	0x42020400

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f9a8 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00a      	b.n	80010a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001092:	e000      	b.n	8001096 <_read+0x16>
 8001094:	bf00      	nop
 8001096:	4601      	mov	r1, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf0      	blt.n	8001092 <_read+0x12>
  }

  return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e009      	b.n	80010e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fc67 	bl	80009a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf1      	blt.n	80010cc <_write+0x12>
  }
  return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_close>:

int _close(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111a:	605a      	str	r2, [r3, #4]
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_isatty>:

int _isatty(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f007 fe14 	bl	8008db8 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200a0000 	.word	0x200a0000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	200001b4 	.word	0x200001b4
 80011c4:	200001d0 	.word	0x200001d0

080011c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <SystemInit+0xdc>)
 80011d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d4:	4a33      	ldr	r2, [pc, #204]	; (80012a4 <SystemInit+0xdc>)
 80011d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <SystemInit+0xe0>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <SystemInit+0xe0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011ea:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <SystemInit+0xe0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <SystemInit+0xe0>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	492c      	ldr	r1, [pc, #176]	; (80012a8 <SystemInit+0xe0>)
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <SystemInit+0xe4>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <SystemInit+0xe0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <SystemInit+0xe0>)
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <SystemInit+0xe0>)
 800120a:	2200      	movs	r2, #0
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <SystemInit+0xe0>)
 8001210:	4a27      	ldr	r2, [pc, #156]	; (80012b0 <SystemInit+0xe8>)
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <SystemInit+0xe0>)
 8001216:	2200      	movs	r2, #0
 8001218:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <SystemInit+0xe0>)
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <SystemInit+0xe8>)
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <SystemInit+0xe0>)
 8001222:	2200      	movs	r2, #0
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <SystemInit+0xe0>)
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <SystemInit+0xe8>)
 800122a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <SystemInit+0xe0>)
 800122e:	2200      	movs	r2, #0
 8001230:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <SystemInit+0xe0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <SystemInit+0xe0>)
 8001238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <SystemInit+0xe0>)
 8001240:	2200      	movs	r2, #0
 8001242:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <SystemInit+0xdc>)
 8001246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <SystemInit+0xec>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001254:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800125c:	d003      	beq.n	8001266 <SystemInit+0x9e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001264:	d117      	bne.n	8001296 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <SystemInit+0xec>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <SystemInit+0xec>)
 8001274:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <SystemInit+0xf0>)
 8001276:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <SystemInit+0xec>)
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <SystemInit+0xf4>)
 800127c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <SystemInit+0xec>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <SystemInit+0xec>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <SystemInit+0xec>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <SystemInit+0xec>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	61d3      	str	r3, [r2, #28]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00
 80012a8:	44020c00 	.word	0x44020c00
 80012ac:	eae2eae3 	.word	0xeae2eae3
 80012b0:	01010280 	.word	0x01010280
 80012b4:	40022000 	.word	0x40022000
 80012b8:	08192a3b 	.word	0x08192a3b
 80012bc:	4c5d6e7f 	.word	0x4c5d6e7f

080012c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c4:	f7ff ff80 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <LoopForever+0x6>)
  ldr r1, =_edata
 80012ca:	490d      	ldr	r1, [pc, #52]	; (8001300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <LoopForever+0xe>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e0:	4c0a      	ldr	r4, [pc, #40]	; (800130c <LoopForever+0x16>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ee:	f007 fd69 	bl	8008dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff fb6b 	bl	80009cc <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   r0, =_estack
 80012f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001304:	08009f70 	.word	0x08009f70
  ldr r2, =_sbss
 8001308:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800130c:	200001cc 	.word	0x200001cc

08001310 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_IRQHandler>
	...

08001314 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f94d 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800131e:	f001 f8d7 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8001322:	4602      	mov	r2, r0
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_Init+0x40>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	490a      	ldr	r1, [pc, #40]	; (8001358 <HAL_Init+0x44>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_Init+0x48>)
 8001336:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001338:	200f      	movs	r0, #15
 800133a:	f000 f811 	bl	8001360 <HAL_InitTick>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e002      	b.n	800134e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fcef 	bl	8000d2a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	44020c00 	.word	0x44020c00
 8001358:	08009e88 	.word	0x08009e88
 800135c:	20000000 	.word	0x20000000

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_InitTick+0x60>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e021      	b.n	80013b8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_InitTick+0x64>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_InitTick+0x60>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f1 	udiv	r3, r3, r1
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f939 	bl	8001602 <HAL_SYSTICK_Config>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e00e      	b.n	80013b8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d80a      	bhi.n	80013b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f000 f911 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_InitTick+0x68>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000004 	.word	0x20000004

080013cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008
 80013f0:	200001b8 	.word	0x200001b8

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	200001b8 	.word	0x200001b8

0800140c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff ffee 	bl	80013f4 <HAL_GetTick>
 8001418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d005      	beq.n	8001432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_Delay+0x44>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001432:	bf00      	nop
 8001434:	f7ff ffde 	bl	80013f4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8f7      	bhi.n	8001434 <HAL_Delay+0x28>
  {
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff47 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff5e 	bl	800149c <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffb2 	bl	8001574 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800162a:	e136      	b.n	800189a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	4013      	ands	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8128 	beq.w	8001894 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x38>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d125      	bne.n	80016a0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f003 020f 	and.w	r2, r3, #15
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	6979      	ldr	r1, [r7, #20]
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4013      	ands	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0203 	and.w	r2, r3, #3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d00b      	beq.n	80016f4 <HAL_GPIO_Init+0xd8>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d007      	beq.n	80016f4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e8:	2b11      	cmp	r3, #17
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b12      	cmp	r3, #18
 80016f2:	d130      	bne.n	8001756 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4013      	ands	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4313      	orrs	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172a:	2201      	movs	r2, #1
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4013      	ands	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 0201 	and.w	r2, r3, #1
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4313      	orrs	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d017      	beq.n	800178e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4013      	ands	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d07c      	beq.n	8001894 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800179a:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3318      	adds	r3, #24
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	220f      	movs	r2, #15
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4013      	ands	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0a9a      	lsrs	r2, r3, #10
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_GPIO_Init+0x2a0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	f002 0203 	and.w	r2, r2, #3
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	4093      	lsls	r3, r2
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017d6:	4938      	ldr	r1, [pc, #224]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3318      	adds	r3, #24
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80017e4:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001808:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4013      	ands	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001832:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 800183a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800183e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4013      	ands	r3, r2
 8001848:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800185e:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 8001868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_GPIO_Init+0x29c>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	3301      	adds	r3, #1
 8001898:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f aec1 	bne.w	800162c <HAL_GPIO_Init+0x10>
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	371c      	adds	r7, #28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	44022000 	.word	0x44022000
 80018bc:	002f7f7f 	.word	0x002f7f7f

080018c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	f000 bc28 	b.w	8002154 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001904:	4b94      	ldr	r3, [pc, #592]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	f003 0318 	and.w	r3, r3, #24
 800190c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800190e:	4b92      	ldr	r3, [pc, #584]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d05b      	beq.n	80019dc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x46>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b18      	cmp	r3, #24
 800192e:	d114      	bne.n	800195a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d111      	bne.n	800195a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	f000 bc08 	b.w	8002154 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001944:	4b84      	ldr	r3, [pc, #528]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	4981      	ldr	r1, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001954:	4313      	orrs	r3, r2
 8001956:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001958:	e040      	b.n	80019dc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d023      	beq.n	80019aa <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001962:	4b7d      	ldr	r3, [pc, #500]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a7c      	ldr	r2, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff fd41 	bl	80013f4 <HAL_GetTick>
 8001972:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001976:	f7ff fd3d 	bl	80013f4 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e3e5      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001988:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001994:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	496d      	ldr	r1, [pc, #436]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	618b      	str	r3, [r1, #24]
 80019a8:	e018      	b.n	80019dc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019aa:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6a      	ldr	r2, [pc, #424]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 80019b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff fd1d 	bl	80013f4 <HAL_GetTick>
 80019ba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80019be:	f7ff fd19 	bl	80013f4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e3c1      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80019d0:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80a0 	beq.w	8001b2a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_OscConfig+0x10c>
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b18      	cmp	r3, #24
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f040 8092 	bne.w	8001b2a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e3a4      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x132>
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a4f      	ldr	r2, [pc, #316]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e058      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1e4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d112      	bne.n	8001a50 <HAL_RCC_OscConfig+0x160>
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a4a      	ldr	r2, [pc, #296]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a47      	ldr	r2, [pc, #284]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b45      	ldr	r3, [pc, #276]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e041      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1e4>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x190>
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a3e      	ldr	r2, [pc, #248]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a3b      	ldr	r2, [pc, #236]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e029      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1e4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1c0>
 8001a8a:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a32      	ldr	r2, [pc, #200]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2c      	ldr	r2, [pc, #176]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e011      	b.n	8001ad4 <HAL_RCC_OscConfig+0x1e4>
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001ace:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fc8a 	bl	80013f4 <HAL_GetTick>
 8001ae0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fc86 	bl	80013f4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e32e      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1f4>
 8001b02:	e012      	b.n	8001b2a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fc76 	bl	80013f4 <HAL_GetTick>
 8001b08:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fc72 	bl	80013f4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e31a      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_RCC_OscConfig+0x268>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 809a 	beq.w	8001c6c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_RCC_OscConfig+0x25a>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	2b18      	cmp	r3, #24
 8001b42:	d149      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d146      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d104      	bne.n	8001b5c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e2fe      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
 8001b56:	bf00      	nop
 8001b58:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d11c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001b62:	4b9a      	ldr	r3, [pc, #616]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0218 	and.w	r2, r3, #24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d014      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001b72:	4b96      	ldr	r3, [pc, #600]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0218 	bic.w	r2, r3, #24
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	4993      	ldr	r1, [pc, #588]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001b84:	f000 fdd0 	bl	8002728 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b88:	4b91      	ldr	r3, [pc, #580]	; (8001dd0 <HAL_RCC_OscConfig+0x4e0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fbe7 	bl	8001360 <HAL_InitTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e2db      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc2a 	bl	80013f4 <HAL_GetTick>
 8001ba0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fc26 	bl	80013f4 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e2ce      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb6:	4b85      	ldr	r3, [pc, #532]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	497e      	ldr	r1, [pc, #504]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001bd6:	e049      	b.n	8001c6c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d02c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001be0:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 0218 	bic.w	r2, r3, #24
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	4977      	ldr	r1, [pc, #476]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a75      	ldr	r2, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fbf9 	bl	80013f4 <HAL_GetTick>
 8001c02:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fbf5 	bl	80013f4 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e29d      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c18:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001c24:	4b69      	ldr	r3, [pc, #420]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	4966      	ldr	r1, [pc, #408]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	610b      	str	r3, [r1, #16]
 8001c38:	e018      	b.n	8001c6c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff fbd5 	bl	80013f4 <HAL_GetTick>
 8001c4a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fbd1 	bl	80013f4 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e279      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c60:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d03c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01c      	beq.n	8001cba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c80:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c86:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001c88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff fbb0 	bl	80013f4 <HAL_GetTick>
 8001c94:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fbac 	bl	80013f4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e254      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001caa:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ef      	beq.n	8001c98 <HAL_RCC_OscConfig+0x3a8>
 8001cb8:	e01b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cc0:	4a42      	ldr	r2, [pc, #264]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001cc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001cc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff fb93 	bl	80013f4 <HAL_GetTick>
 8001cce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fb8f 	bl	80013f4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e237      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ef      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80d2 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d00:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <HAL_RCC_OscConfig+0x4e4>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d118      	bne.n	8001d3e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x4e4>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <HAL_RCC_OscConfig+0x4e4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d18:	f7ff fb6c 	bl	80013f4 <HAL_GetTick>
 8001d1c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d20:	f7ff fb68 	bl	80013f4 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e210      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d32:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <HAL_RCC_OscConfig+0x4e4>)
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x468>
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d56:	e074      	b.n	8001e42 <HAL_RCC_OscConfig+0x552>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d118      	bne.n	8001d92 <HAL_RCC_OscConfig+0x4a2>
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d66:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d76:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d90:	e057      	b.n	8001e42 <HAL_RCC_OscConfig+0x552>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d11e      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4e8>
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001db6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc0:	4a02      	ldr	r2, [pc, #8]	; (8001dcc <HAL_RCC_OscConfig+0x4dc>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dca:	e03a      	b.n	8001e42 <HAL_RCC_OscConfig+0x552>
 8001dcc:	44020c00 	.word	0x44020c00
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	44020800 	.word	0x44020800
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b85      	cmp	r3, #133	; 0x85
 8001dde:	d118      	bne.n	8001e12 <HAL_RCC_OscConfig+0x522>
 8001de0:	4ba2      	ldr	r3, [pc, #648]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001de6:	4aa1      	ldr	r2, [pc, #644]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001df0:	4b9e      	ldr	r3, [pc, #632]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001df2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001df6:	4a9d      	ldr	r2, [pc, #628]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dfc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e00:	4b9a      	ldr	r3, [pc, #616]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e06:	4a99      	ldr	r2, [pc, #612]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e10:	e017      	b.n	8001e42 <HAL_RCC_OscConfig+0x552>
 8001e12:	4b96      	ldr	r3, [pc, #600]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e18:	4a94      	ldr	r2, [pc, #592]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e22:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e28:	4a90      	ldr	r2, [pc, #576]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e2a:	f023 0304 	bic.w	r3, r3, #4
 8001e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e38:	4a8c      	ldr	r2, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fad3 	bl	80013f4 <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff facf 	bl	80013f4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e175      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e68:	4b80      	ldr	r3, [pc, #512]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ed      	beq.n	8001e52 <HAL_RCC_OscConfig+0x562>
 8001e76:	e015      	b.n	8001ea4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff fabc 	bl	80013f4 <HAL_GetTick>
 8001e7c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff fab8 	bl	80013f4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e15e      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e96:	4b75      	ldr	r3, [pc, #468]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ed      	bne.n	8001e80 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d036      	beq.n	8001f1e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d019      	beq.n	8001eec <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6b      	ldr	r2, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001ebe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff fa96 	bl	80013f4 <HAL_GetTick>
 8001ec8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001ecc:	f7ff fa92 	bl	80013f4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e13a      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x5dc>
 8001eea:	e018      	b.n	8001f1e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eec:	4b5f      	ldr	r3, [pc, #380]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a5e      	ldr	r2, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fa7c 	bl	80013f4 <HAL_GetTick>
 8001efc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001f00:	f7ff fa78 	bl	80013f4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e120      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f12:	4b56      	ldr	r3, [pc, #344]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8115 	beq.w	8002152 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b18      	cmp	r3, #24
 8001f2c:	f000 80af 	beq.w	800208e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	f040 8086 	bne.w	8002046 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f3a:	4b4c      	ldr	r3, [pc, #304]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a4b      	ldr	r2, [pc, #300]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7ff fa55 	bl	80013f4 <HAL_GetTick>
 8001f4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff fa51 	bl	80013f4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0f9      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f60:	4b42      	ldr	r3, [pc, #264]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f74:	f023 0303 	bic.w	r3, r3, #3
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f80:	0212      	lsls	r2, r2, #8
 8001f82:	430a      	orrs	r2, r1
 8001f84:	4939      	ldr	r1, [pc, #228]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	628b      	str	r3, [r1, #40]	; 0x28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	025b      	lsls	r3, r3, #9
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	061b      	lsls	r3, r3, #24
 8001fb6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fba:	492c      	ldr	r1, [pc, #176]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001fc6:	f023 0310 	bic.w	r3, r3, #16
 8001fca:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	4a24      	ldr	r2, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001fdc:	f043 0310 	orr.w	r3, r3, #16
 8001fe0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	f023 020c 	bic.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	491f      	ldr	r1, [pc, #124]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	f023 0220 	bic.w	r2, r3, #32
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	491a      	ldr	r1, [pc, #104]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8002002:	4313      	orrs	r3, r2
 8002004:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8002018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f9e9 	bl	80013f4 <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002026:	f7ff f9e5 	bl	80013f4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e08d      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x736>
 8002044:	e085      	b.n	8002152 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_OscConfig+0x77c>)
 800204c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7ff f9cf 	bl	80013f4 <HAL_GetTick>
 8002056:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800205a:	f7ff f9cb 	bl	80013f4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d903      	bls.n	8002070 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e073      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
 800206c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002070:	4b3a      	ldr	r3, [pc, #232]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800207c:	4b37      	ldr	r3, [pc, #220]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	4a36      	ldr	r2, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 8002082:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	6293      	str	r3, [r2, #40]	; 0x28
 800208c:	e061      	b.n	8002152 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002094:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d031      	beq.n	8002106 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d12a      	bne.n	8002106 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d122      	bne.n	8002106 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d11a      	bne.n	8002106 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	0a5b      	lsrs	r3, r3, #9
 80020d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d111      	bne.n	8002106 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d108      	bne.n	8002106 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	0e1b      	lsrs	r3, r3, #24
 80020f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e024      	b.n	8002154 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	08db      	lsrs	r3, r3, #3
 8002110:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002118:	429a      	cmp	r2, r3
 800211a:	d01a      	beq.n	8002152 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 8002122:	f023 0310 	bic.w	r3, r3, #16
 8002126:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f964 	bl	80013f4 <HAL_GetTick>
 800212c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800212e:	bf00      	nop
 8002130:	f7ff f960 	bl	80013f4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4293      	cmp	r3, r2
 800213a:	d0f9      	beq.n	8002130 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_RCC_OscConfig+0x86c>)
 800214c:	f043 0310 	orr.w	r3, r3, #16
 8002150:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	44020c00 	.word	0x44020c00

08002160 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e19e      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002174:	4b83      	ldr	r3, [pc, #524]	; (8002384 <HAL_RCC_ClockConfig+0x224>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d910      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b80      	ldr	r3, [pc, #512]	; (8002384 <HAL_RCC_ClockConfig+0x224>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 020f 	bic.w	r2, r3, #15
 800218a:	497e      	ldr	r1, [pc, #504]	; (8002384 <HAL_RCC_ClockConfig+0x224>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b7c      	ldr	r3, [pc, #496]	; (8002384 <HAL_RCC_ClockConfig+0x224>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e186      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	4b74      	ldr	r3, [pc, #464]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021be:	429a      	cmp	r2, r3
 80021c0:	d909      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80021c2:	4b71      	ldr	r3, [pc, #452]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	496d      	ldr	r1, [pc, #436]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d909      	bls.n	8002208 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80021f4:	4b64      	ldr	r3, [pc, #400]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4961      	ldr	r1, [pc, #388]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002204:	4313      	orrs	r3, r2
 8002206:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d010      	beq.n	8002236 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002220:	429a      	cmp	r2, r3
 8002222:	d908      	bls.n	8002236 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002224:	4b58      	ldr	r3, [pc, #352]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4955      	ldr	r1, [pc, #340]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002232:	4313      	orrs	r3, r2
 8002234:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	429a      	cmp	r2, r3
 8002250:	d908      	bls.n	8002264 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002252:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	494a      	ldr	r1, [pc, #296]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002260:	4313      	orrs	r3, r2
 8002262:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8093 	beq.w	8002398 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d121      	bne.n	80022ca <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e113      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d115      	bne.n	80022ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e107      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e0fb      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0f3      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	492c      	ldr	r1, [pc, #176]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022dc:	f7ff f88a 	bl	80013f4 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d112      	bne.n	8002310 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7ff f882 	bl	80013f4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0d7      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002302:	4b21      	ldr	r3, [pc, #132]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0318 	and.w	r3, r3, #24
 800230a:	2b18      	cmp	r3, #24
 800230c:	d1ee      	bne.n	80022ec <HAL_RCC_ClockConfig+0x18c>
 800230e:	e043      	b.n	8002398 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d112      	bne.n	800233e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800231a:	f7ff f86b 	bl	80013f4 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0c0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f003 0318 	and.w	r3, r3, #24
 8002338:	2b10      	cmp	r3, #16
 800233a:	d1ee      	bne.n	800231a <HAL_RCC_ClockConfig+0x1ba>
 800233c:	e02c      	b.n	8002398 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d122      	bne.n	800238c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7ff f854 	bl	80013f4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0a9      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x228>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 0318 	and.w	r3, r3, #24
 8002366:	2b08      	cmp	r3, #8
 8002368:	d1ee      	bne.n	8002348 <HAL_RCC_ClockConfig+0x1e8>
 800236a:	e015      	b.n	8002398 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7ff f842 	bl	80013f4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d906      	bls.n	800238c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e097      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000
 8002388:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800238c:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 0318 	and.w	r3, r3, #24
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e9      	bne.n	800236c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d010      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	4b44      	ldr	r3, [pc, #272]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d208      	bcs.n	80023c6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80023b4:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f023 020f 	bic.w	r2, r3, #15
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	493e      	ldr	r1, [pc, #248]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <HAL_RCC_ClockConfig+0x360>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d210      	bcs.n	80023f6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d4:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <HAL_RCC_ClockConfig+0x360>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 020f 	bic.w	r2, r3, #15
 80023dc:	4938      	ldr	r1, [pc, #224]	; (80024c0 <HAL_RCC_ClockConfig+0x360>)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x360>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e05d      	b.n	80024b2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800240e:	429a      	cmp	r2, r3
 8002410:	d208      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4927      	ldr	r1, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002420:	4313      	orrs	r3, r2
 8002422:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d012      	beq.n	8002456 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800243e:	429a      	cmp	r2, r3
 8002440:	d209      	bcs.n	8002456 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	491a      	ldr	r1, [pc, #104]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002470:	429a      	cmp	r2, r3
 8002472:	d209      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002488:	f000 f822 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x35c>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490b      	ldr	r1, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x364>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x368>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x36c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe ff5a 	bl	8001360 <HAL_InitTick>
 80024ac:	4603      	mov	r3, r0
 80024ae:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80024b0:	7afb      	ldrb	r3, [r7, #11]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	44020c00 	.word	0x44020c00
 80024c0:	40022000 	.word	0x40022000
 80024c4:	08009e88 	.word	0x08009e88
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80024d6:	4b8c      	ldr	r3, [pc, #560]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0318 	and.w	r3, r3, #24
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80024e2:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCC_GetSysClockFreq+0x23c>)
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e107      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e8:	4b87      	ldr	r3, [pc, #540]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f003 0318 	and.w	r3, r3, #24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d112      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80024f4:	4b84      	ldr	r3, [pc, #528]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002500:	4b81      	ldr	r3, [pc, #516]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	4a81      	ldr	r2, [pc, #516]	; (8002710 <HAL_RCC_GetSysClockFreq+0x240>)
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e0f1      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002514:	4b7e      	ldr	r3, [pc, #504]	; (8002710 <HAL_RCC_GetSysClockFreq+0x240>)
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	e0ee      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800251a:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0318 	and.w	r3, r3, #24
 8002522:	2b10      	cmp	r3, #16
 8002524:	d102      	bne.n	800252c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002526:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_GetSysClockFreq+0x244>)
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e0e5      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252c:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f003 0318 	and.w	r3, r3, #24
 8002534:	2b18      	cmp	r3, #24
 8002536:	f040 80dd 	bne.w	80026f4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002544:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800254e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002550:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800255c:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002574:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80b7 	beq.w	80026ee <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0xbe>
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d056      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x16a>
 800258c:	e077      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800258e:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d02d      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	08db      	lsrs	r3, r3, #3
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	4a5a      	ldr	r2, [pc, #360]	; (8002710 <HAL_RCC_GetSysClockFreq+0x240>)
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	ee07 3a90 	vmov	s15, r3
 80025bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80025d8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002718 <HAL_RCC_GetSysClockFreq+0x248>
 80025dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80025f4:	e065      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002600:	eddf 6a46 	vldr	s13, [pc, #280]	; 800271c <HAL_RCC_GetSysClockFreq+0x24c>
 8002604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002618:	ed97 6a02 	vldr	s12, [r7, #8]
 800261c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002718 <HAL_RCC_GetSysClockFreq+0x248>
 8002620:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002624:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800262c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002634:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002638:	e043      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002644:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002720 <HAL_RCC_GetSysClockFreq+0x250>
 8002648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800265c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002660:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002718 <HAL_RCC_GetSysClockFreq+0x248>
 8002664:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002668:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800266c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002670:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002678:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800267c:	e021      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	ee07 3a90 	vmov	s15, r3
 8002684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002688:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002724 <HAL_RCC_GetSysClockFreq+0x254>
 800268c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80026a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80026a4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002718 <HAL_RCC_GetSysClockFreq+0x248>
 80026a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80026c0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <HAL_RCC_GetSysClockFreq+0x238>)
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	0a5b      	lsrs	r3, r3, #9
 80026c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026cc:	3301      	adds	r3, #1
 80026ce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026da:	edd7 6a06 	vldr	s13, [r7, #24]
 80026de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e6:	ee17 3a90 	vmov	r3, s15
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	e004      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	e001      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_GetSysClockFreq+0x240>)
 80026f6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	44020c00 	.word	0x44020c00
 800270c:	003d0900 	.word	0x003d0900
 8002710:	03d09000 	.word	0x03d09000
 8002714:	017d7840 	.word	0x017d7840
 8002718:	46000000 	.word	0x46000000
 800271c:	4c742400 	.word	0x4c742400
 8002720:	4bbebc20 	.word	0x4bbebc20
 8002724:	4a742400 	.word	0x4a742400

08002728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800272c:	f7ff fed0 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002736:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800273a:	4907      	ldr	r1, [pc, #28]	; (8002758 <HAL_RCC_GetHCLKFreq+0x30>)
 800273c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800273e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <HAL_RCC_GetHCLKFreq+0x34>)
 8002748:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_RCC_GetHCLKFreq+0x34>)
 800274c:	681b      	ldr	r3, [r3, #0]
}
 800274e:	4618      	mov	r0, r3
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	44020c00 	.word	0x44020c00
 8002758:	08009e88 	.word	0x08009e88
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002764:	f7ff ffe0 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	44020c00 	.word	0x44020c00
 8002788:	08009e98 	.word	0x08009e98

0800278c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002790:	f7ff ffca 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	44020c00 	.word	0x44020c00
 80027b4:	08009e98 	.word	0x08009e98

080027b8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80027bc:	f7ff ffb4 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetPCLK3Freq+0x24>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	0b1b      	lsrs	r3, r3, #12
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCC_GetPCLK3Freq+0x28>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	44020c00 	.word	0x44020c00
 80027e0:	08009e98 	.word	0x08009e98

080027e4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80027e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e8:	b0d8      	sub	sp, #352	; 0x160
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80027fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002808:	2500      	movs	r5, #0
 800280a:	ea54 0305 	orrs.w	r3, r4, r5
 800280e:	d00b      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002810:	4bcd      	ldr	r3, [pc, #820]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002816:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800281a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	4ac9      	ldr	r2, [pc, #804]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002822:	430b      	orrs	r3, r1
 8002824:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002828:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f002 0801 	and.w	r8, r2, #1
 8002834:	f04f 0900 	mov.w	r9, #0
 8002838:	ea58 0309 	orrs.w	r3, r8, r9
 800283c:	d042      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800283e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	2b05      	cmp	r3, #5
 8002846:	d823      	bhi.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	08002899 	.word	0x08002899
 8002854:	08002869 	.word	0x08002869
 8002858:	0800287d 	.word	0x0800287d
 800285c:	08002899 	.word	0x08002899
 8002860:	08002899 	.word	0x08002899
 8002864:	08002899 	.word	0x08002899
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002868:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800286c:	3308      	adds	r3, #8
 800286e:	4618      	mov	r0, r3
 8002870:	f004 feda 	bl	8007628 <RCCEx_PLL2_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800287a:	e00e      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800287c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002880:	3330      	adds	r3, #48	; 0x30
 8002882:	4618      	mov	r0, r3
 8002884:	f004 ff68 	bl	8007758 <RCCEx_PLL3_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800288e:	e004      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002896:	e000      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800289a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10c      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80028a2:	4ba9      	ldr	r3, [pc, #676]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028a8:	f023 0107 	bic.w	r1, r3, #7
 80028ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	4aa5      	ldr	r2, [pc, #660]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028b4:	430b      	orrs	r3, r1
 80028b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028ba:	e003      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80028c0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f002 0a02 	and.w	sl, r2, #2
 80028d0:	f04f 0b00 	mov.w	fp, #0
 80028d4:	ea5a 030b 	orrs.w	r3, sl, fp
 80028d8:	f000 8088 	beq.w	80029ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80028dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e2:	2b28      	cmp	r3, #40	; 0x28
 80028e4:	d868      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	080029c1 	.word	0x080029c1
 80028f0:	080029b9 	.word	0x080029b9
 80028f4:	080029b9 	.word	0x080029b9
 80028f8:	080029b9 	.word	0x080029b9
 80028fc:	080029b9 	.word	0x080029b9
 8002900:	080029b9 	.word	0x080029b9
 8002904:	080029b9 	.word	0x080029b9
 8002908:	080029b9 	.word	0x080029b9
 800290c:	08002991 	.word	0x08002991
 8002910:	080029b9 	.word	0x080029b9
 8002914:	080029b9 	.word	0x080029b9
 8002918:	080029b9 	.word	0x080029b9
 800291c:	080029b9 	.word	0x080029b9
 8002920:	080029b9 	.word	0x080029b9
 8002924:	080029b9 	.word	0x080029b9
 8002928:	080029b9 	.word	0x080029b9
 800292c:	080029a5 	.word	0x080029a5
 8002930:	080029b9 	.word	0x080029b9
 8002934:	080029b9 	.word	0x080029b9
 8002938:	080029b9 	.word	0x080029b9
 800293c:	080029b9 	.word	0x080029b9
 8002940:	080029b9 	.word	0x080029b9
 8002944:	080029b9 	.word	0x080029b9
 8002948:	080029b9 	.word	0x080029b9
 800294c:	080029c1 	.word	0x080029c1
 8002950:	080029b9 	.word	0x080029b9
 8002954:	080029b9 	.word	0x080029b9
 8002958:	080029b9 	.word	0x080029b9
 800295c:	080029b9 	.word	0x080029b9
 8002960:	080029b9 	.word	0x080029b9
 8002964:	080029b9 	.word	0x080029b9
 8002968:	080029b9 	.word	0x080029b9
 800296c:	080029c1 	.word	0x080029c1
 8002970:	080029b9 	.word	0x080029b9
 8002974:	080029b9 	.word	0x080029b9
 8002978:	080029b9 	.word	0x080029b9
 800297c:	080029b9 	.word	0x080029b9
 8002980:	080029b9 	.word	0x080029b9
 8002984:	080029b9 	.word	0x080029b9
 8002988:	080029b9 	.word	0x080029b9
 800298c:	080029c1 	.word	0x080029c1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002990:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002994:	3308      	adds	r3, #8
 8002996:	4618      	mov	r0, r3
 8002998:	f004 fe46 	bl	8007628 <RCCEx_PLL2_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80029a2:	e00e      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029a8:	3330      	adds	r3, #48	; 0x30
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 fed4 	bl	8007758 <RCCEx_PLL3_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80029b6:	e004      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80029be:	e000      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80029c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80029ca:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d0:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80029d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029da:	4a5b      	ldr	r2, [pc, #364]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029dc:	430b      	orrs	r3, r1
 80029de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029e2:	e003      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029e8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f002 0304 	and.w	r3, r2, #4
 80029f8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a02:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002a06:	460b      	mov	r3, r1
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	d04e      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a16:	d02c      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002a18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a1c:	d825      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a22:	d028      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a28:	d81f      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a2c:	d025      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a30:	d81b      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a32:	2b80      	cmp	r3, #128	; 0x80
 8002a34:	d00f      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d817      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01f      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	d113      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a46:	3308      	adds	r3, #8
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fded 	bl	8007628 <RCCEx_PLL2_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002a54:	e014      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a5a:	3330      	adds	r3, #48	; 0x30
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f004 fe7b 	bl	8007758 <RCCEx_PLL3_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002a68:	e00a      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a72:	bf00      	nop
 8002a74:	e004      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a80:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10c      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002a88:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a8e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002a92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002aa0:	e003      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002aa6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f002 0308 	and.w	r3, r2, #8
 8002ab6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ac0:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	d056      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002aca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ad0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ad4:	d031      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002ad6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ada:	d82a      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae0:	d02d      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae6:	d824      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002ae8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002aec:	d029      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002aee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002af2:	d81e      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af8:	d011      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afe:	d818      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d023      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b08:	d113      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b0e:	3308      	adds	r3, #8
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 fd89 	bl	8007628 <RCCEx_PLL2_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002b1c:	e017      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b22:	3330      	adds	r3, #48	; 0x30
 8002b24:	4618      	mov	r0, r3
 8002b26:	f004 fe17 	bl	8007758 <RCCEx_PLL3_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002b30:	e00d      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b38:	e009      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b3a:	bf00      	nop
 8002b3c:	e007      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b3e:	bf00      	nop
 8002b40:	e005      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002b42:	bf00      	nop
 8002b44:	e003      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002b46:	bf00      	nop
 8002b48:	44020c00 	.word	0x44020c00
        break;
 8002b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002b56:	4bbb      	ldr	r3, [pc, #748]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b5c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b66:	4ab7      	ldr	r2, [pc, #732]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b6e:	e003      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f002 0310 	and.w	r3, r2, #16
 8002b84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b8e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002b92:	460b      	mov	r3, r1
 8002b94:	4313      	orrs	r3, r2
 8002b96:	d053      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002ba2:	d031      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002ba4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002ba8:	d82a      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bae:	d02d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb4:	d824      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bba:	d029      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002bbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bc0:	d81e      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	d011      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bcc:	d818      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d020      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	d113      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bdc:	3308      	adds	r3, #8
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 fd22 	bl	8007628 <RCCEx_PLL2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002bea:	e014      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bf0:	3330      	adds	r3, #48	; 0x30
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f004 fdb0 	bl	8007758 <RCCEx_PLL3_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c06:	e006      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c08:	bf00      	nop
 8002c0a:	e004      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c0c:	bf00      	nop
 8002c0e:	e002      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c10:	bf00      	nop
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002c1e:	4b89      	ldr	r3, [pc, #548]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c24:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2e:	4a85      	ldr	r2, [pc, #532]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002c30:	430b      	orrs	r3, r1
 8002c32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c36:	e003      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c3c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f002 0320 	and.w	r3, r2, #32
 8002c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002c56:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	d053      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002c6a:	d031      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002c6c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002c70:	d82a      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c76:	d02d      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c7c:	d824      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c7e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002c82:	d029      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002c84:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002c88:	d81e      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8e:	d011      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d818      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d020      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9e:	d113      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 fcbe 	bl	8007628 <RCCEx_PLL2_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002cb2:	e014      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cb8:	3330      	adds	r3, #48	; 0x30
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 fd4c 	bl	8007758 <RCCEx_PLL3_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002cc6:	e00a      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002cce:	e006      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cd0:	bf00      	nop
 8002cd2:	e004      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cd4:	bf00      	nop
 8002cd6:	e002      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002ce6:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cec:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8002cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a53      	ldr	r2, [pc, #332]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cfe:	e003      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002d14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d1e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8002d22:	460b      	mov	r3, r1
 8002d24:	4313      	orrs	r3, r2
 8002d26:	d053      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d32:	d031      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002d34:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d38:	d82a      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3e:	d02d      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d44:	d824      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d4a:	d029      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002d4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d50:	d81e      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d56:	d011      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002d58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d5c:	d818      	bhi.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d020      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002d62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d66:	d113      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fc5a 	bl	8007628 <RCCEx_PLL2_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002d7a:	e014      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d80:	3330      	adds	r3, #48	; 0x30
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fce8 	bl	8007758 <RCCEx_PLL3_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d96:	e006      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002d98:	bf00      	nop
 8002d9a:	e004      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002d9c:	bf00      	nop
 8002d9e:	e002      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002dae:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002db4:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dc6:	e003      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002dcc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002ddc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002de6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002dea:	460b      	mov	r3, r1
 8002dec:	4313      	orrs	r3, r2
 8002dee:	d055      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002dfa:	d033      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002dfc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002e00:	d82c      	bhi.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e06:	d02f      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002e08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e0c:	d826      	bhi.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002e0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e12:	d02b      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002e14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e18:	d820      	bhi.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e24:	d81a      	bhi.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d022      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e2e:	d115      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e34:	3308      	adds	r3, #8
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 fbf6 	bl	8007628 <RCCEx_PLL2_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002e42:	e016      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002e44:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e4c:	3330      	adds	r3, #48	; 0x30
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f004 fc82 	bl	8007758 <RCCEx_PLL3_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e62:	e006      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002e64:	bf00      	nop
 8002e66:	e004      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002e68:	bf00      	nop
 8002e6a:	e002      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002e7a:	4bbb      	ldr	r3, [pc, #748]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002e7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e80:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8a:	4ab7      	ldr	r2, [pc, #732]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e98:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002ea8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002eb2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	d053      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8002ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002ec6:	d031      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002ec8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002ecc:	d82a      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed2:	d02d      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed8:	d824      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002eda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ede:	d029      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002ee0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ee4:	d81e      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eea:	d011      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ef0:	d818      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d020      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002ef6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efa:	d113      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f00:	3308      	adds	r3, #8
 8002f02:	4618      	mov	r0, r3
 8002f04:	f004 fb90 	bl	8007628 <RCCEx_PLL2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002f0e:	e014      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f14:	3330      	adds	r3, #48	; 0x30
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 fc1e 	bl	8007758 <RCCEx_PLL3_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002f22:	e00a      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f2a:	e006      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002f2c:	bf00      	nop
 8002f2e:	e004      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002f30:	bf00      	nop
 8002f32:	e002      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002f34:	bf00      	nop
 8002f36:	e000      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8002f42:	4b89      	ldr	r3, [pc, #548]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f48:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002f4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f52:	4a85      	ldr	r2, [pc, #532]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002f54:	430b      	orrs	r3, r1
 8002f56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f5a:	e003      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002f70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002f7a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4313      	orrs	r3, r2
 8002f82:	d055      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002f90:	d031      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8002f92:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002f96:	d82a      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9c:	d02d      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa2:	d824      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002fa4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002fa8:	d029      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002faa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002fae:	d81e      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb4:	d011      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fba:	d818      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc4:	d113      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fca:	3308      	adds	r3, #8
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fb2b 	bl	8007628 <RCCEx_PLL2_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002fd8:	e014      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fde:	3330      	adds	r3, #48	; 0x30
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f004 fbb9 	bl	8007758 <RCCEx_PLL3_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002fec:	e00a      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002ff4:	e006      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002ff6:	bf00      	nop
 8002ff8:	e004      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003004:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800300c:	4b56      	ldr	r3, [pc, #344]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800300e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003012:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8003016:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800301a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301e:	4a52      	ldr	r2, [pc, #328]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003020:	430b      	orrs	r3, r1
 8003022:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003028:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800302c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800303c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003046:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800304a:	460b      	mov	r3, r1
 800304c:	4313      	orrs	r3, r2
 800304e:	d044      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003058:	2b05      	cmp	r3, #5
 800305a:	d823      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	080030ad 	.word	0x080030ad
 8003068:	0800307d 	.word	0x0800307d
 800306c:	08003091 	.word	0x08003091
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030ad 	.word	0x080030ad
 8003078:	080030ad 	.word	0x080030ad
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800307c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003080:	3308      	adds	r3, #8
 8003082:	4618      	mov	r0, r3
 8003084:	f004 fad0 	bl	8007628 <RCCEx_PLL2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800308e:	e00e      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003090:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003094:	3330      	adds	r3, #48	; 0x30
 8003096:	4618      	mov	r0, r3
 8003098:	f004 fb5e 	bl	8007758 <RCCEx_PLL3_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80030ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10d      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80030b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030bc:	f023 0107 	bic.w	r1, r3, #7
 80030c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c8:	4a27      	ldr	r2, [pc, #156]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80030ca:	430b      	orrs	r3, r1
 80030cc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80030d0:	e003      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030d6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80030da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80030e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80030f0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80030f4:	460b      	mov	r3, r1
 80030f6:	4313      	orrs	r3, r2
 80030f8:	d04f      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80030fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	2b50      	cmp	r3, #80	; 0x50
 8003104:	d029      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003106:	2b50      	cmp	r3, #80	; 0x50
 8003108:	d823      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d027      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d81f      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003112:	2b30      	cmp	r3, #48	; 0x30
 8003114:	d025      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003116:	2b30      	cmp	r3, #48	; 0x30
 8003118:	d81b      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800311a:	2b20      	cmp	r3, #32
 800311c:	d00f      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800311e:	2b20      	cmp	r3, #32
 8003120:	d817      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d022      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003126:	2b10      	cmp	r3, #16
 8003128:	d113      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800312a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800312e:	3308      	adds	r3, #8
 8003130:	4618      	mov	r0, r3
 8003132:	f004 fa79 	bl	8007628 <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800313c:	e017      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800313e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003142:	3330      	adds	r3, #48	; 0x30
 8003144:	4618      	mov	r0, r3
 8003146:	f004 fb07 	bl	8007758 <RCCEx_PLL3_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003150:	e00d      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003158:	e009      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800315a:	bf00      	nop
 800315c:	e007      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800315e:	bf00      	nop
 8003160:	e005      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003162:	bf00      	nop
 8003164:	e003      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003166:	bf00      	nop
 8003168:	44020c00 	.word	0x44020c00
        break;
 800316c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10d      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003176:	4baf      	ldr	r3, [pc, #700]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003178:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800317c:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003180:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	4aaa      	ldr	r2, [pc, #680]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800318a:	430b      	orrs	r3, r1
 800318c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003190:	e003      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003192:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003196:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800319a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80031a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80031b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	d055      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80031ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80031c6:	d031      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80031c8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80031cc:	d82a      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80031ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d2:	d02d      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80031d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d8:	d824      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80031da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031de:	d029      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80031e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031e4:	d81e      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80031e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ea:	d011      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80031ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031f0:	d818      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d020      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80031f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031fa:	d113      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003200:	3308      	adds	r3, #8
 8003202:	4618      	mov	r0, r3
 8003204:	f004 fa10 	bl	8007628 <RCCEx_PLL2_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800320e:	e014      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003210:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003214:	3330      	adds	r3, #48	; 0x30
 8003216:	4618      	mov	r0, r3
 8003218:	f004 fa9e 	bl	8007758 <RCCEx_PLL3_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003222:	e00a      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800322a:	e006      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800322c:	bf00      	nop
 800322e:	e004      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003230:	bf00      	nop
 8003232:	e002      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003242:	4b7c      	ldr	r3, [pc, #496]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003248:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800324c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003254:	4a77      	ldr	r2, [pc, #476]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003256:	430b      	orrs	r3, r1
 8003258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800325c:	e003      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003262:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003266:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003276:	2300      	movs	r3, #0
 8003278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800327c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003280:	460b      	mov	r3, r1
 8003282:	4313      	orrs	r3, r2
 8003284:	d03d      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003292:	d01b      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003294:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003298:	d814      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800329a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800329e:	d017      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80032a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032a4:	d80e      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d014      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80032aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ae:	d109      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032b4:	3330      	adds	r3, #48	; 0x30
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 fa4e 	bl	8007758 <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80032c2:	e008      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032ca:	e004      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80032cc:	bf00      	nop
 80032ce:	e002      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80032d0:	bf00      	nop
 80032d2:	e000      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80032d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80032de:	4b55      	ldr	r3, [pc, #340]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80032e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032e4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80032e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	4a50      	ldr	r2, [pc, #320]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80032f2:	430b      	orrs	r3, r1
 80032f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80032f8:	e003      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800330e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003312:	2300      	movs	r3, #0
 8003314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003318:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800331c:	460b      	mov	r3, r1
 800331e:	4313      	orrs	r3, r2
 8003320:	d03d      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003322:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800332e:	d01b      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003330:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003334:	d814      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003336:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800333a:	d017      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800333c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003340:	d80e      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d014      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800334a:	d109      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800334c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003350:	3330      	adds	r3, #48	; 0x30
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fa00 	bl	8007758 <RCCEx_PLL3_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800335e:	e008      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003366:	e004      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003372:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800337a:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800337c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003380:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003384:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	4a29      	ldr	r2, [pc, #164]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800338e:	430b      	orrs	r3, r1
 8003390:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800339a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800339e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80033aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80033b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033b8:	460b      	mov	r3, r1
 80033ba:	4313      	orrs	r3, r2
 80033bc:	d040      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80033be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ca:	d01b      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80033cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033d0:	d814      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80033d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033d6:	d017      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80033d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033dc:	d80e      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d014      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80033e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e6:	d109      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033ec:	3330      	adds	r3, #48	; 0x30
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 f9b2 	bl	8007758 <RCCEx_PLL3_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80033fa:	e008      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003402:	e004      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003404:	bf00      	nop
 8003406:	e002      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800340c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003412:	2b00      	cmp	r3, #0
 8003414:	d110      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003418:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800341c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003428:	4a02      	ldr	r2, [pc, #8]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800342a:	430b      	orrs	r3, r1
 800342c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003430:	e006      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003432:	bf00      	nop
 8003434:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800343c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003440:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	2100      	movs	r1, #0
 800344a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800344e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003456:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d03d      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003464:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800346c:	d01b      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800346e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003472:	d814      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003478:	d017      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800347a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800347e:	d80e      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d014      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003488:	d109      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800348a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800348e:	3330      	adds	r3, #48	; 0x30
 8003490:	4618      	mov	r0, r3
 8003492:	f004 f961 	bl	8007758 <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800349c:	e008      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034a4:	e004      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80034a6:	bf00      	nop
 80034a8:	e002      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80034ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10d      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80034b8:	4bbe      	ldr	r3, [pc, #760]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80034ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034be:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80034c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ca:	4aba      	ldr	r2, [pc, #744]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80034d2:	e003      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034d8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80034dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80034e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80034f6:	460b      	mov	r3, r1
 80034f8:	4313      	orrs	r3, r2
 80034fa:	d035      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80034fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003508:	d015      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800350a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800350e:	d80e      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003518:	d109      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800351a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800351e:	3330      	adds	r3, #48	; 0x30
 8003520:	4618      	mov	r0, r3
 8003522:	f004 f919 	bl	8007758 <RCCEx_PLL3_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003534:	e002      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800353a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10d      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003544:	4b9b      	ldr	r3, [pc, #620]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003546:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800354a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800354e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003556:	4a97      	ldr	r2, [pc, #604]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003558:	430b      	orrs	r3, r1
 800355a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800355e:	e003      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003564:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	2100      	movs	r1, #0
 8003572:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800357e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003582:	460b      	mov	r3, r1
 8003584:	4313      	orrs	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003588:	4b8a      	ldr	r3, [pc, #552]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	4a89      	ldr	r2, [pc, #548]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800358e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003592:	61d3      	str	r3, [r2, #28]
 8003594:	4b87      	ldr	r3, [pc, #540]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800359c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80035a0:	4a84      	ldr	r2, [pc, #528]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80035a2:	430b      	orrs	r3, r1
 80035a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80035b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80035bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80035c0:	460b      	mov	r3, r1
 80035c2:	4313      	orrs	r3, r2
 80035c4:	d055      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80035c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80035d2:	d031      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80035d4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80035d8:	d82a      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80035da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035de:	d02d      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e4:	d824      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80035e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ea:	d029      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80035ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035f0:	d81e      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80035f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f6:	d011      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fc:	d818      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d020      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003606:	d113      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003608:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800360c:	3308      	adds	r3, #8
 800360e:	4618      	mov	r0, r3
 8003610:	f004 f80a 	bl	8007628 <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800361a:	e014      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800361c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003620:	3330      	adds	r3, #48	; 0x30
 8003622:	4618      	mov	r0, r3
 8003624:	f004 f898 	bl	8007758 <RCCEx_PLL3_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800362e:	e00a      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003636:	e006      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003638:	bf00      	nop
 800363a:	e004      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800363c:	bf00      	nop
 800363e:	e002      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003646:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800364e:	4b59      	ldr	r3, [pc, #356]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003650:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003654:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003658:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800365c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003660:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003662:	430b      	orrs	r3, r1
 8003664:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003668:	e003      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800366e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003672:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800367e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003688:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800368c:	460b      	mov	r3, r1
 800368e:	4313      	orrs	r3, r2
 8003690:	d055      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003692:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003696:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800369a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800369e:	d031      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80036a0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80036a4:	d82a      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80036a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036aa:	d02d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80036ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b0:	d824      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80036b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036b6:	d029      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80036b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036bc:	d81e      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80036be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c2:	d011      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d818      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d020      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80036ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d2:	d113      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036d8:	3308      	adds	r3, #8
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 ffa4 	bl	8007628 <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80036e6:	e014      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ec:	3330      	adds	r3, #48	; 0x30
 80036ee:	4618      	mov	r0, r3
 80036f0:	f004 f832 	bl	8007758 <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80036fa:	e00a      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003702:	e006      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003704:	bf00      	nop
 8003706:	e004      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003708:	bf00      	nop
 800370a:	e002      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800370c:	bf00      	nop
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003712:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10d      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800371c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003720:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003724:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003728:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800372c:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800372e:	430b      	orrs	r3, r1
 8003730:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003736:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800373a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800373e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	2100      	movs	r1, #0
 8003748:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d057      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800375e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003762:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800376a:	d033      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003770:	d82c      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003776:	d02f      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003778:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800377c:	d826      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800377e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003782:	d02b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003784:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003788:	d820      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800378a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800378e:	d013      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003794:	d81a      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d022      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800379a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379e:	d115      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037a4:	3308      	adds	r3, #8
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 ff3e 	bl	8007628 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80037b2:	e016      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80037b4:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037bc:	3330      	adds	r3, #48	; 0x30
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 ffca 	bl	8007758 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80037ca:	e00a      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037d2:	e006      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80037d4:	bf00      	nop
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80037d8:	bf00      	nop
 80037da:	e002      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80037dc:	bf00      	nop
 80037de:	e000      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80037e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80037ea:	4bbb      	ldr	r3, [pc, #748]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80037ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80037f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80037f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037fc:	4ab6      	ldr	r2, [pc, #728]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80037fe:	430b      	orrs	r3, r1
 8003800:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800380a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800380e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	2100      	movs	r1, #0
 8003818:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003824:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d055      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800382e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003836:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800383a:	d031      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800383c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003840:	d82a      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003846:	d02d      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384c:	d824      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800384e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003852:	d029      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003858:	d81e      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800385a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800385e:	d011      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003864:	d818      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800386a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386e:	d113      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003870:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003874:	3308      	adds	r3, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f003 fed6 	bl	8007628 <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003882:	e014      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003884:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003888:	3330      	adds	r3, #48	; 0x30
 800388a:	4618      	mov	r0, r3
 800388c:	f003 ff64 	bl	8007758 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003896:	e00a      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800389e:	e006      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80038a0:	bf00      	nop
 80038a2:	e004      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80038a4:	bf00      	nop
 80038a6:	e002      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80038ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80038b6:	4b88      	ldr	r3, [pc, #544]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80038bc:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80038c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038c8:	4a83      	ldr	r2, [pc, #524]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80038ca:	430b      	orrs	r3, r1
 80038cc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80038d0:	e003      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038d6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80038da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	2100      	movs	r1, #0
 80038e4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038f0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80038f4:	460b      	mov	r3, r1
 80038f6:	4313      	orrs	r3, r2
 80038f8:	d055      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80038fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003902:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003906:	d031      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003908:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800390c:	d82a      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800390e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003912:	d02d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003918:	d824      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800391a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800391e:	d029      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003920:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003924:	d81e      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800392a:	d011      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800392c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003930:	d818      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d020      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800393a:	d113      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800393c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003940:	3308      	adds	r3, #8
 8003942:	4618      	mov	r0, r3
 8003944:	f003 fe70 	bl	8007628 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800394e:	e014      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003954:	3330      	adds	r3, #48	; 0x30
 8003956:	4618      	mov	r0, r3
 8003958:	f003 fefe 	bl	8007758 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003962:	e00a      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800396a:	e006      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800396c:	bf00      	nop
 800396e:	e004      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003970:	bf00      	nop
 8003972:	e002      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003982:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003984:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003988:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800398c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003994:	4a50      	ldr	r2, [pc, #320]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003996:	430b      	orrs	r3, r1
 8003998:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800399c:	e003      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039a2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80039a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	2100      	movs	r1, #0
 80039b0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039bc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80039c0:	460b      	mov	r3, r1
 80039c2:	4313      	orrs	r3, r2
 80039c4:	d055      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80039c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80039ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d2:	d031      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d8:	d82a      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d02d      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d824      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80039e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ea:	d029      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80039ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039f0:	d81e      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f6:	d011      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fc:	d818      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d020      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a06:	d113      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 fe0a 	bl	8007628 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003a1a:	e014      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a20:	3330      	adds	r3, #48	; 0x30
 8003a22:	4618      	mov	r0, r3
 8003a24:	f003 fe98 	bl	8007758 <RCCEx_PLL3_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a36:	e006      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003a38:	bf00      	nop
 8003a3a:	e004      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003a3c:	bf00      	nop
 8003a3e:	e002      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10d      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003a4e:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003a54:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003a68:	e003      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a6e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003a7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a82:	2300      	movs	r3, #0
 8003a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	d055      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003a92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a9e:	d035      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003aa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa4:	d82e      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003aa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aaa:	d031      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003aac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ab0:	d828      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab6:	d01b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003abc:	d822      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac6:	d009      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003ac8:	e01c      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aca:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	4a02      	ldr	r2, [pc, #8]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ad6:	e01c      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003ad8:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 fda0 	bl	8007628 <RCCEx_PLL2_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003aee:	e010      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003af4:	3330      	adds	r3, #48	; 0x30
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 fe2e 	bl	8007758 <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b02:	e006      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b0a:	e002      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003b1a:	4bc3      	ldr	r3, [pc, #780]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b20:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b2c:	4abe      	ldr	r2, [pc, #760]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b34:	e003      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b3a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b54:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	d051      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b6a:	d033      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003b6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b70:	d82c      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003b72:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b76:	d02d      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003b78:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b7c:	d826      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b82:	d019      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b88:	d820      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8003b8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b92:	d007      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003b94:	e01a      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b96:	4ba4      	ldr	r3, [pc, #656]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	4aa3      	ldr	r2, [pc, #652]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003ba2:	e018      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ba8:	3308      	adds	r3, #8
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fd3c 	bl	8007628 <RCCEx_PLL2_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bb6:	e00e      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bbc:	3330      	adds	r3, #48	; 0x30
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 fdca 	bl	8007758 <RCCEx_PLL3_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003bca:	e004      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10d      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003bde:	4b92      	ldr	r3, [pc, #584]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be4:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8003be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003bf0:	4a8d      	ldr	r2, [pc, #564]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bf8:	e003      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bfe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003c0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c10:	2300      	movs	r3, #0
 8003c12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c14:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d032      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	d80f      	bhi.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d211      	bcs.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d911      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d109      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f003 fcf3 	bl	8007628 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c58:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10d      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003c60:	4b71      	ldr	r3, [pc, #452]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c66:	f023 0107 	bic.w	r1, r3, #7
 8003c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003c72:	4a6d      	ldr	r2, [pc, #436]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c74:	430b      	orrs	r3, r1
 8003c76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c7a:	e003      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c80:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	6739      	str	r1, [r7, #112]	; 0x70
 8003c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c94:	677b      	str	r3, [r7, #116]	; 0x74
 8003c96:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	d024      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ca4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d005      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003cc6:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ccc:	f023 0108 	bic.w	r1, r3, #8
 8003cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cd8:	4a53      	ldr	r2, [pc, #332]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ce6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cfc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d00:	460b      	mov	r3, r1
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f000 80b9 	beq.w	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003d08:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d14:	f7fd fb6e 	bl	80013f4 <HAL_GetTick>
 8003d18:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d1c:	e00b      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fd fb69 	bl	80013f4 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d903      	bls.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d34:	e005      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d36:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ed      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003d42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 8093 	bne.w	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003d5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d023      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d66:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003d6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01b      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d72:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d86:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d96:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003da0:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003da2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003da6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003daa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d019      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7fd fb1d 	bl	80013f4 <HAL_GetTick>
 8003dba:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbe:	e00d      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fd fb18 	bl	80013f4 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003dca:	1ad2      	subs	r2, r2, r3
 8003dcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d903      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8003dda:	e006      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ea      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003dea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d13a      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003df6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e02:	d115      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003e04:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e10:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e1e:	4a02      	ldr	r2, [pc, #8]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	61d3      	str	r3, [r2, #28]
 8003e24:	e00a      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003e26:	bf00      	nop
 8003e28:	44020c00 	.word	0x44020c00
 8003e2c:	44020800 	.word	0x44020800
 8003e30:	4b9f      	ldr	r3, [pc, #636]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	4a9e      	ldr	r2, [pc, #632]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e3a:	61d3      	str	r3, [r2, #28]
 8003e3c:	4b9c      	ldr	r3, [pc, #624]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e42:	4a9b      	ldr	r2, [pc, #620]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e4c:	4b98      	ldr	r3, [pc, #608]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e4e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e56:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	4a94      	ldr	r2, [pc, #592]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003e60:	430b      	orrs	r3, r1
 8003e62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e66:	e008      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003e86:	663b      	str	r3, [r7, #96]	; 0x60
 8003e88:	2300      	movs	r3, #0
 8003e8a:	667b      	str	r3, [r7, #100]	; 0x64
 8003e8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e90:	460b      	mov	r3, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	d035      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003e9e:	2b30      	cmp	r3, #48	; 0x30
 8003ea0:	d014      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003ea2:	2b30      	cmp	r3, #48	; 0x30
 8003ea4:	d80e      	bhi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d012      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d80a      	bhi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d010      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb6:	4b7e      	ldr	r3, [pc, #504]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	4a7d      	ldr	r2, [pc, #500]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003eca:	e004      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003ecc:	bf00      	nop
 8003ece:	e002      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003ed0:	bf00      	nop
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10d      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003ede:	4b74      	ldr	r3, [pc, #464]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ee4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003ef0:	4a6f      	ldr	r2, [pc, #444]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ef8:	e003      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003efe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003f0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f10:	2300      	movs	r3, #0
 8003f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f14:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	d033      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f22:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d007      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8003f2e:	e010      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f30:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	4a5e      	ldr	r2, [pc, #376]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003f3c:	e00d      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f42:	3308      	adds	r3, #8
 8003f44:	4618      	mov	r0, r3
 8003f46:	f003 fb6f 	bl	8007628 <RCCEx_PLL2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003f50:	e003      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003f62:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f68:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f70:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003f74:	4a4e      	ldr	r2, [pc, #312]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f82:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003f92:	653b      	str	r3, [r7, #80]	; 0x50
 8003f94:	2300      	movs	r3, #0
 8003f96:	657b      	str	r3, [r7, #84]	; 0x54
 8003f98:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	d033      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8003fa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fa6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8003fae:	2b80      	cmp	r3, #128	; 0x80
 8003fb0:	d007      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8003fb2:	e010      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b3e      	ldr	r3, [pc, #248]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003fc0:	e00d      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f003 fb2d 	bl	8007628 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10d      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8003fe6:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fe8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ff4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003ff8:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004006:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800400a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
 8004018:	2300      	movs	r3, #0
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004020:	460b      	mov	r3, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	d04a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004026:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800402a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800402e:	2b04      	cmp	r3, #4
 8004030:	d827      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800404d 	.word	0x0800404d
 800403c:	0800405b 	.word	0x0800405b
 8004040:	0800406f 	.word	0x0800406f
 8004044:	0800408b 	.word	0x0800408b
 8004048:	0800408b 	.word	0x0800408b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004056:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004058:	e018      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800405a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800405e:	3308      	adds	r3, #8
 8004060:	4618      	mov	r0, r3
 8004062:	f003 fae1 	bl	8007628 <RCCEx_PLL2_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800406c:	e00e      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800406e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004072:	3330      	adds	r3, #48	; 0x30
 8004074:	4618      	mov	r0, r3
 8004076:	f003 fb6f 	bl	8007758 <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004080:	e004      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004088:	e000      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800408a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10f      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409a:	f023 0107 	bic.w	r1, r3, #7
 800409e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040a6:	4a02      	ldr	r2, [pc, #8]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80040a8:	430b      	orrs	r3, r1
 80040aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040ae:	e005      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80040b0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80040bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80040c8:	643b      	str	r3, [r7, #64]	; 0x40
 80040ca:	2300      	movs	r3, #0
 80040cc:	647b      	str	r3, [r7, #68]	; 0x44
 80040ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f000 8081 	beq.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80040da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d85f      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004171 	.word	0x08004171
 80040f0:	080041a7 	.word	0x080041a7
 80040f4:	080041a7 	.word	0x080041a7
 80040f8:	080041a7 	.word	0x080041a7
 80040fc:	080041a7 	.word	0x080041a7
 8004100:	080041a7 	.word	0x080041a7
 8004104:	080041a7 	.word	0x080041a7
 8004108:	080041a7 	.word	0x080041a7
 800410c:	0800417f 	.word	0x0800417f
 8004110:	080041a7 	.word	0x080041a7
 8004114:	080041a7 	.word	0x080041a7
 8004118:	080041a7 	.word	0x080041a7
 800411c:	080041a7 	.word	0x080041a7
 8004120:	080041a7 	.word	0x080041a7
 8004124:	080041a7 	.word	0x080041a7
 8004128:	080041a7 	.word	0x080041a7
 800412c:	08004193 	.word	0x08004193
 8004130:	080041a7 	.word	0x080041a7
 8004134:	080041a7 	.word	0x080041a7
 8004138:	080041a7 	.word	0x080041a7
 800413c:	080041a7 	.word	0x080041a7
 8004140:	080041a7 	.word	0x080041a7
 8004144:	080041a7 	.word	0x080041a7
 8004148:	080041a7 	.word	0x080041a7
 800414c:	080041af 	.word	0x080041af
 8004150:	080041a7 	.word	0x080041a7
 8004154:	080041a7 	.word	0x080041a7
 8004158:	080041a7 	.word	0x080041a7
 800415c:	080041a7 	.word	0x080041a7
 8004160:	080041a7 	.word	0x080041a7
 8004164:	080041a7 	.word	0x080041a7
 8004168:	080041a7 	.word	0x080041a7
 800416c:	080041af 	.word	0x080041af
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004170:	4bab      	ldr	r3, [pc, #684]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	4aaa      	ldr	r2, [pc, #680]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800417c:	e018      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800417e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004182:	3308      	adds	r3, #8
 8004184:	4618      	mov	r0, r3
 8004186:	f003 fa4f 	bl	8007628 <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004190:	e00e      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004192:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004196:	3330      	adds	r3, #48	; 0x30
 8004198:	4618      	mov	r0, r3
 800419a:	f003 fadd 	bl	8007758 <RCCEx_PLL3_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80041a4:	e004      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041ac:	e000      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80041ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80041b8:	4b99      	ldr	r3, [pc, #612]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80041c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80041ca:	4a95      	ldr	r2, [pc, #596]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041d8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80041dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80041e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ea:	2300      	movs	r3, #0
 80041ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d04e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80041f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d02e      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d827      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800420c:	2bc0      	cmp	r3, #192	; 0xc0
 800420e:	d02b      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004210:	2bc0      	cmp	r3, #192	; 0xc0
 8004212:	d823      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d017      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d81f      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d007      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004224:	e01a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004226:	4b7e      	ldr	r3, [pc, #504]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	4a7d      	ldr	r2, [pc, #500]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004230:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004232:	e01a      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004238:	3308      	adds	r3, #8
 800423a:	4618      	mov	r0, r3
 800423c:	f003 f9f4 	bl	8007628 <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004246:	e010      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004248:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800424c:	3330      	adds	r3, #48	; 0x30
 800424e:	4618      	mov	r0, r3
 8004250:	f003 fa82 	bl	8007758 <RCCEx_PLL3_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800425a:	e006      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004262:	e002      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10d      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004272:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004278:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800427c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004284:	4a66      	ldr	r2, [pc, #408]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004286:	430b      	orrs	r3, r1
 8004288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800428c:	e003      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004292:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004296:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
 80042a4:	2300      	movs	r3, #0
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
 80042a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042ac:	460b      	mov	r3, r1
 80042ae:	4313      	orrs	r3, r2
 80042b0:	d055      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80042b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80042ba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80042be:	d031      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80042c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80042c4:	d82a      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80042c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ca:	d02d      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80042cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d0:	d824      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80042d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042d6:	d029      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80042d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042dc:	d81e      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80042de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e2:	d011      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80042e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e8:	d818      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d020      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80042ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f2:	d113      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042f8:	3308      	adds	r3, #8
 80042fa:	4618      	mov	r0, r3
 80042fc:	f003 f994 	bl	8007628 <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004306:	e014      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004308:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800430c:	3330      	adds	r3, #48	; 0x30
 800430e:	4618      	mov	r0, r3
 8004310:	f003 fa22 	bl	8007758 <RCCEx_PLL3_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800431a:	e00a      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004322:	e006      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004324:	bf00      	nop
 8004326:	e004      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004328:	bf00      	nop
 800432a:	e002      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800432c:	bf00      	nop
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004332:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10d      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800433a:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800433c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004340:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004344:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004348:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800434c:	4a34      	ldr	r2, [pc, #208]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800434e:	430b      	orrs	r3, r1
 8004350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800435a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800435e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
 800436c:	2300      	movs	r3, #0
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004370:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	d058      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800437a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800437e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004382:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004386:	d031      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004388:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800438c:	d82a      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800438e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004392:	d02d      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004398:	d824      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800439a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800439e:	d029      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80043a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043a4:	d81e      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043aa:	d011      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80043ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b0:	d818      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d020      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	d113      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043c0:	3308      	adds	r3, #8
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 f930 	bl	8007628 <RCCEx_PLL2_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80043ce:	e014      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043d4:	3330      	adds	r3, #48	; 0x30
 80043d6:	4618      	mov	r0, r3
 80043d8:	f003 f9be 	bl	8007758 <RCCEx_PLL3_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80043e2:	e00a      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043ea:	e006      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80043ec:	bf00      	nop
 80043ee:	e004      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80043f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d110      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004408:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800440c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004414:	4902      	ldr	r1, [pc, #8]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800441e:	bf00      	nop
 8004420:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004428:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800442c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	2100      	movs	r1, #0
 8004436:	6239      	str	r1, [r7, #32]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	d055      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800444c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004450:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004454:	d031      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004456:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800445a:	d82a      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800445c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004460:	d02d      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004466:	d824      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004468:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800446c:	d029      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800446e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004472:	d81e      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d011      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447e:	d818      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004488:	d113      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800448a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800448e:	3308      	adds	r3, #8
 8004490:	4618      	mov	r0, r3
 8004492:	f003 f8c9 	bl	8007628 <RCCEx_PLL2_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800449c:	e014      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800449e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a2:	3330      	adds	r3, #48	; 0x30
 80044a4:	4618      	mov	r0, r3
 80044a6:	f003 f957 	bl	8007758 <RCCEx_PLL3_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044b0:	e00a      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80044b8:	e006      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80044ba:	bf00      	nop
 80044bc:	e004      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80044be:	bf00      	nop
 80044c0:	e002      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80044c2:	bf00      	nop
 80044c4:	e000      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80044c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80044d0:	4b88      	ldr	r3, [pc, #544]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d6:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80044da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044e2:	4984      	ldr	r1, [pc, #528]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80044ea:	e003      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	2100      	movs	r1, #0
 80044fe:	61b9      	str	r1, [r7, #24]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800450a:	460b      	mov	r3, r1
 800450c:	4313      	orrs	r3, r2
 800450e:	d03d      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004514:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004518:	2b03      	cmp	r3, #3
 800451a:	d81c      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	0800455f 	.word	0x0800455f
 8004528:	08004535 	.word	0x08004535
 800452c:	08004543 	.word	0x08004543
 8004530:	0800455f 	.word	0x0800455f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004534:	4b6f      	ldr	r3, [pc, #444]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	4a6e      	ldr	r2, [pc, #440]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800453a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800453e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004540:	e00e      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004542:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004546:	3308      	adds	r3, #8
 8004548:	4618      	mov	r0, r3
 800454a:	f003 f86d 	bl	8007628 <RCCEx_PLL2_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004554:	e004      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800455c:	e000      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800455e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004560:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004568:	4b62      	ldr	r3, [pc, #392]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800456a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800456e:	f023 0203 	bic.w	r2, r3, #3
 8004572:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004576:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800457a:	495e      	ldr	r1, [pc, #376]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004582:	e003      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004588:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800458c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	2100      	movs	r1, #0
 8004596:	6139      	str	r1, [r7, #16]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d03a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80045a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b4:	d00e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80045b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ba:	d815      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d017      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80045c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c4:	d110      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c6:	4b4b      	ldr	r3, [pc, #300]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	4a4a      	ldr	r2, [pc, #296]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80045d2:	e00e      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045d8:	3308      	adds	r3, #8
 80045da:	4618      	mov	r0, r3
 80045dc:	f003 f824 	bl	8007628 <RCCEx_PLL2_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80045e6:	e004      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045ee:	e000      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80045f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80045fa:	4b3e      	ldr	r3, [pc, #248]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004604:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004608:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800460c:	4939      	ldr	r1, [pc, #228]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004614:	e003      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800461a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800461e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	2100      	movs	r1, #0
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d038      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800463a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800463e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004642:	2b30      	cmp	r3, #48	; 0x30
 8004644:	d01b      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004646:	2b30      	cmp	r3, #48	; 0x30
 8004648:	d815      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800464a:	2b10      	cmp	r3, #16
 800464c:	d002      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800464e:	2b20      	cmp	r3, #32
 8004650:	d007      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004652:	e010      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004654:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	4a26      	ldr	r2, [pc, #152]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800465a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465e:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004660:	e00e      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004662:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004666:	3330      	adds	r3, #48	; 0x30
 8004668:	4618      	mov	r0, r3
 800466a:	f003 f875 	bl	8007758 <RCCEx_PLL3_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004674:	e004      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800467c:	e000      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800467e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004680:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10d      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004688:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800468a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800468e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004692:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004696:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800469a:	4916      	ldr	r1, [pc, #88]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80046a2:	e003      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	2100      	movs	r1, #0
 80046b6:	6039      	str	r1, [r7, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046c2:	460b      	mov	r3, r1
 80046c4:	4313      	orrs	r3, r2
 80046c6:	d00c      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80046ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80046da:	4906      	ldr	r1, [pc, #24]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80046e2:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f2:	bf00      	nop
 80046f4:	44020c00 	.word	0x44020c00

080046f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b08b      	sub	sp, #44	; 0x2c
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004700:	4bad      	ldr	r3, [pc, #692]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004708:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800470a:	4bab      	ldr	r3, [pc, #684]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004714:	4ba8      	ldr	r3, [pc, #672]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004720:	4ba5      	ldr	r3, [pc, #660]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800472a:	4ba3      	ldr	r3, [pc, #652]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	08db      	lsrs	r3, r3, #3
 8004730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8126 	beq.w	800499a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d053      	beq.n	80047fc <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d86f      	bhi.n	800483a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d003      	beq.n	8004768 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d02b      	beq.n	80047be <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004766:	e068      	b.n	800483a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004768:	4b93      	ldr	r3, [pc, #588]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	08db      	lsrs	r3, r3, #3
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	4a92      	ldr	r2, [pc, #584]	; (80049bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
 8004778:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	ee07 3a90 	vmov	s15, r3
 8004780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479c:	ed97 6a04 	vldr	s12, [r7, #16]
 80047a0:	eddf 5a87 	vldr	s11, [pc, #540]	; 80049c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80047a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80047bc:	e068      	b.n	8004890 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80049c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80047cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047da:	ed97 6a04 	vldr	s12, [r7, #16]
 80047de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80047e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80047fa:	e049      	b.n	8004890 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eddf 6a70 	vldr	s13, [pc, #448]	; 80049c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004818:	ed97 6a04 	vldr	s12, [r7, #16]
 800481c:	eddf 5a68 	vldr	s11, [pc, #416]	; 80049c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004834:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004838:	e02a      	b.n	8004890 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800483a:	4b5f      	ldr	r3, [pc, #380]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	08db      	lsrs	r3, r3, #3
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	4a5d      	ldr	r2, [pc, #372]	; (80049bc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004872:	eddf 5a53 	vldr	s11, [pc, #332]	; 80049c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800488e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004890:	4b49      	ldr	r3, [pc, #292]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800489c:	d121      	bne.n	80048e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800489e:	4b46      	ldr	r3, [pc, #280]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80048aa:	4b43      	ldr	r3, [pc, #268]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	0a5b      	lsrs	r3, r3, #9
 80048b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80048bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80048c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80048c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e006      	b.n	80048e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e002      	b.n	80048e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048e8:	4b33      	ldr	r3, [pc, #204]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f4:	d121      	bne.n	800493a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80048f6:	4b30      	ldr	r3, [pc, #192]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d017      	beq.n	8004932 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004902:	4b2d      	ldr	r3, [pc, #180]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004918:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800491c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004928:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	e002      	b.n	8004940 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800494c:	d121      	bne.n	8004992 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d017      	beq.n	800498a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800495a:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800495c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495e:	0e1b      	lsrs	r3, r3, #24
 8004960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004964:	ee07 3a90 	vmov	s15, r3
 8004968:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800496c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004970:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004974:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004980:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004988:	e010      	b.n	80049ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	e00c      	b.n	80049ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	609a      	str	r2, [r3, #8]
}
 8004998:	e008      	b.n	80049ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	609a      	str	r2, [r3, #8]
}
 80049ac:	bf00      	nop
 80049ae:	372c      	adds	r7, #44	; 0x2c
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	44020c00 	.word	0x44020c00
 80049bc:	03d09000 	.word	0x03d09000
 80049c0:	46000000 	.word	0x46000000
 80049c4:	4a742400 	.word	0x4a742400
 80049c8:	4bbebc20 	.word	0x4bbebc20

080049cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b08b      	sub	sp, #44	; 0x2c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80049d4:	4bad      	ldr	r3, [pc, #692]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049dc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80049de:	4bab      	ldr	r3, [pc, #684]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80049e8:	4ba8      	ldr	r3, [pc, #672]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049f2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80049f4:	4ba5      	ldr	r3, [pc, #660]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80049fe:	4ba3      	ldr	r3, [pc, #652]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	08db      	lsrs	r3, r3, #3
 8004a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8126 	beq.w	8004c6e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d053      	beq.n	8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d86f      	bhi.n	8004b0e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d003      	beq.n	8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d02b      	beq.n	8004a92 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004a3a:	e068      	b.n	8004b0e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a3c:	4b93      	ldr	r3, [pc, #588]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	4a92      	ldr	r2, [pc, #584]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a70:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a74:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004a90:	e068      	b.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aae:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ab2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004ace:	e049      	b.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aec:	ed97 6a04 	vldr	s12, [r7, #16]
 8004af0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004b0c:	e02a      	b.n	8004b64 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b0e:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	08db      	lsrs	r3, r3, #3
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	4a5d      	ldr	r2, [pc, #372]	; (8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b46:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004b62:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b64:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b70:	d121      	bne.n	8004bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d017      	beq.n	8004bae <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004b7e:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	0a5b      	lsrs	r3, r3, #9
 8004b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004b90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b94:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004b98:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bbc:	4b33      	ldr	r3, [pc, #204]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc8:	d121      	bne.n	8004c0e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004bca:	4b30      	ldr	r3, [pc, #192]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d017      	beq.n	8004c06 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004bd6:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004bf0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	e006      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	e002      	b.n	8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c14:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c20:	d121      	bne.n	8004c66 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d017      	beq.n	8004c5e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	0e1b      	lsrs	r3, r3, #24
 8004c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c44:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004c48:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c54:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c5c:	e010      	b.n	8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	e00c      	b.n	8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	e008      	b.n	8004c80 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
}
 8004c80:	bf00      	nop
 8004c82:	372c      	adds	r7, #44	; 0x2c
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	44020c00 	.word	0x44020c00
 8004c90:	03d09000 	.word	0x03d09000
 8004c94:	46000000 	.word	0x46000000
 8004c98:	4a742400 	.word	0x4a742400
 8004c9c:	4bbebc20 	.word	0x4bbebc20

08004ca0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b08b      	sub	sp, #44	; 0x2c
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004ca8:	4bad      	ldr	r3, [pc, #692]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004cb2:	4bab      	ldr	r3, [pc, #684]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8004cbc:	4ba8      	ldr	r3, [pc, #672]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	0a1b      	lsrs	r3, r3, #8
 8004cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc6:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8004cc8:	4ba5      	ldr	r3, [pc, #660]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004cd2:	4ba3      	ldr	r3, [pc, #652]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd6:	08db      	lsrs	r3, r3, #3
 8004cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8126 	beq.w	8004f42 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d053      	beq.n	8004da4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d86f      	bhi.n	8004de2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d003      	beq.n	8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d02b      	beq.n	8004d66 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8004d0e:	e068      	b.n	8004de2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d10:	4b93      	ldr	r3, [pc, #588]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	08db      	lsrs	r3, r3, #3
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	4a92      	ldr	r2, [pc, #584]	; (8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d20:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d44:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d48:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004d64:	e068      	b.n	8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d70:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004f6c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d82:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004da2:	e049      	b.n	8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004f70 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8004db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc0:	ed97 6a04 	vldr	s12, [r7, #16]
 8004dc4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ddc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004de0:	e02a      	b.n	8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004de2:	4b5f      	ldr	r3, [pc, #380]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	08db      	lsrs	r3, r3, #3
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	4a5d      	ldr	r2, [pc, #372]	; (8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004dee:	fa22 f303 	lsr.w	r3, r2, r3
 8004df2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e16:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e1a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004e36:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e38:	4b49      	ldr	r3, [pc, #292]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e44:	d121      	bne.n	8004e8a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004e46:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d017      	beq.n	8004e82 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004e52:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	0a5b      	lsrs	r3, r3, #9
 8004e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8004e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e68:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004e6c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e78:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e006      	b.n	8004e90 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e002      	b.n	8004e90 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e90:	4b33      	ldr	r3, [pc, #204]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9c:	d121      	bne.n	8004ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004e9e:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d017      	beq.n	8004eda <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	0c1b      	lsrs	r3, r3, #16
 8004eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb4:	ee07 3a90 	vmov	s15, r3
 8004eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004ebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ec0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004ec4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ed0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	e006      	b.n	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	e002      	b.n	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef4:	d121      	bne.n	8004f3a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d017      	beq.n	8004f32 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	0e1b      	lsrs	r3, r3, #24
 8004f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f0c:	ee07 3a90 	vmov	s15, r3
 8004f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8004f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f18:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004f1c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f28:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004f30:	e010      	b.n	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
}
 8004f38:	e00c      	b.n	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	609a      	str	r2, [r3, #8]
}
 8004f40:	e008      	b.n	8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	372c      	adds	r7, #44	; 0x2c
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	44020c00 	.word	0x44020c00
 8004f64:	03d09000 	.word	0x03d09000
 8004f68:	46000000 	.word	0x46000000
 8004f6c:	4a742400 	.word	0x4a742400
 8004f70:	4bbebc20 	.word	0x4bbebc20

08004f74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b08f      	sub	sp, #60	; 0x3c
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f82:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8004f86:	4321      	orrs	r1, r4
 8004f88:	d150      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004f8a:	4b26      	ldr	r3, [pc, #152]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f94:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004f96:	4b23      	ldr	r3, [pc, #140]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d108      	bne.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004faa:	d104      	bne.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb2:	f002 bb2a 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc4:	d108      	bne.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fcc:	d104      	bne.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004fce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd4:	f002 bb19 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004fd8:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe4:	d119      	bne.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fec:	d115      	bne.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffa:	d30a      	bcc.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	0a1b      	lsrs	r3, r3, #8
 8005002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800500e:	f002 bafc 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005016:	f002 baf8 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
 800501e:	f002 baf4 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005022:	bf00      	nop
 8005024:	44020c00 	.word	0x44020c00
 8005028:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800502c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005030:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8005034:	ea50 0104 	orrs.w	r1, r0, r4
 8005038:	f001 8275 	beq.w	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800503c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005040:	2801      	cmp	r0, #1
 8005042:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8005046:	f082 82dd 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800504a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800504e:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8005052:	ea50 0104 	orrs.w	r1, r0, r4
 8005056:	f001 816c 	beq.w	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800505a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800505e:	2801      	cmp	r0, #1
 8005060:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8005064:	f082 82ce 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800506c:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8005070:	ea50 0104 	orrs.w	r1, r0, r4
 8005074:	f001 8602 	beq.w	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800507c:	2801      	cmp	r0, #1
 800507e:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8005082:	f082 82bf 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800508a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800508e:	ea50 0104 	orrs.w	r1, r0, r4
 8005092:	f001 854c 	beq.w	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800509a:	2801      	cmp	r0, #1
 800509c:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 80050a0:	f082 82b0 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050a8:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80050ac:	ea50 0104 	orrs.w	r1, r0, r4
 80050b0:	f001 849e 	beq.w	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80050b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050b8:	2801      	cmp	r0, #1
 80050ba:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80050be:	f082 82a1 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050c6:	f1a1 0420 	sub.w	r4, r1, #32
 80050ca:	ea50 0104 	orrs.w	r1, r0, r4
 80050ce:	f001 83e8 	beq.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80050d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050d6:	2801      	cmp	r0, #1
 80050d8:	f171 0120 	sbcs.w	r1, r1, #32
 80050dc:	f082 8292 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050e4:	f1a1 0410 	sub.w	r4, r1, #16
 80050e8:	ea50 0104 	orrs.w	r1, r0, r4
 80050ec:	f002 8256 	beq.w	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80050f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050f4:	2801      	cmp	r0, #1
 80050f6:	f171 0110 	sbcs.w	r1, r1, #16
 80050fa:	f082 8283 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005102:	f1a1 0408 	sub.w	r4, r1, #8
 8005106:	ea50 0104 	orrs.w	r1, r0, r4
 800510a:	f002 81cc 	beq.w	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800510e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005112:	2801      	cmp	r0, #1
 8005114:	f171 0108 	sbcs.w	r1, r1, #8
 8005118:	f082 8274 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800511c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005120:	1f0c      	subs	r4, r1, #4
 8005122:	ea50 0104 	orrs.w	r1, r0, r4
 8005126:	f001 8648 	beq.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800512a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800512e:	2801      	cmp	r0, #1
 8005130:	f171 0104 	sbcs.w	r1, r1, #4
 8005134:	f082 8266 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800513c:	1e8c      	subs	r4, r1, #2
 800513e:	ea50 0104 	orrs.w	r1, r0, r4
 8005142:	f002 8143 	beq.w	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800514a:	2801      	cmp	r0, #1
 800514c:	f171 0102 	sbcs.w	r1, r1, #2
 8005150:	f082 8258 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005154:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005158:	1e4c      	subs	r4, r1, #1
 800515a:	ea50 0104 	orrs.w	r1, r0, r4
 800515e:	f002 80ce 	beq.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005166:	2801      	cmp	r0, #1
 8005168:	f171 0101 	sbcs.w	r1, r1, #1
 800516c:	f082 824a 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005174:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005178:	4321      	orrs	r1, r4
 800517a:	f002 8059 	beq.w	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800517e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005182:	4cb6      	ldr	r4, [pc, #728]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005184:	42a0      	cmp	r0, r4
 8005186:	f171 0100 	sbcs.w	r1, r1, #0
 800518a:	f082 823b 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800518e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005192:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005196:	4321      	orrs	r1, r4
 8005198:	f001 87d9 	beq.w	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800519c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051a0:	4caf      	ldr	r4, [pc, #700]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80051a2:	42a0      	cmp	r0, r4
 80051a4:	f171 0100 	sbcs.w	r1, r1, #0
 80051a8:	f082 822c 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051b0:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80051b4:	4321      	orrs	r1, r4
 80051b6:	f001 8751 	beq.w	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80051ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051be:	4ca9      	ldr	r4, [pc, #676]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80051c0:	42a0      	cmp	r0, r4
 80051c2:	f171 0100 	sbcs.w	r1, r1, #0
 80051c6:	f082 821d 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ce:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 80051d2:	4321      	orrs	r1, r4
 80051d4:	f001 869a 	beq.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80051d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051dc:	4ca2      	ldr	r4, [pc, #648]	; (8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80051de:	42a0      	cmp	r0, r4
 80051e0:	f171 0100 	sbcs.w	r1, r1, #0
 80051e4:	f082 820e 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ec:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80051f0:	4321      	orrs	r1, r4
 80051f2:	f001 8612 	beq.w	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80051f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051fa:	4c9c      	ldr	r4, [pc, #624]	; (800546c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80051fc:	42a0      	cmp	r0, r4
 80051fe:	f171 0100 	sbcs.w	r1, r1, #0
 8005202:	f082 81ff 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800520a:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800520e:	4321      	orrs	r1, r4
 8005210:	f002 817e 	beq.w	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005218:	4c95      	ldr	r4, [pc, #596]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800521a:	42a0      	cmp	r0, r4
 800521c:	f171 0100 	sbcs.w	r1, r1, #0
 8005220:	f082 81f0 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005228:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800522c:	4321      	orrs	r1, r4
 800522e:	f000 829e 	beq.w	800576e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005232:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005236:	4c8f      	ldr	r4, [pc, #572]	; (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8005238:	42a0      	cmp	r0, r4
 800523a:	f171 0100 	sbcs.w	r1, r1, #0
 800523e:	f082 81e1 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005242:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005246:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800524a:	4321      	orrs	r1, r4
 800524c:	f000 826d 	beq.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005254:	4c88      	ldr	r4, [pc, #544]	; (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005256:	42a0      	cmp	r0, r4
 8005258:	f171 0100 	sbcs.w	r1, r1, #0
 800525c:	f082 81d2 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005264:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005268:	4321      	orrs	r1, r4
 800526a:	f001 800d 	beq.w	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800526e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005272:	4c82      	ldr	r4, [pc, #520]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005274:	42a0      	cmp	r0, r4
 8005276:	f171 0100 	sbcs.w	r1, r1, #0
 800527a:	f082 81c3 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800527e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005282:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005286:	4321      	orrs	r1, r4
 8005288:	f000 81d0 	beq.w	800562c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800528c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005290:	4c7b      	ldr	r4, [pc, #492]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005292:	42a0      	cmp	r0, r4
 8005294:	f171 0100 	sbcs.w	r1, r1, #0
 8005298:	f082 81b4 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800529c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052a0:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 80052a4:	4321      	orrs	r1, r4
 80052a6:	f000 8142 	beq.w	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80052aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052ae:	4c75      	ldr	r4, [pc, #468]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	f171 0100 	sbcs.w	r1, r1, #0
 80052b6:	f082 81a5 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052be:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 80052c2:	4321      	orrs	r1, r4
 80052c4:	f001 824e 	beq.w	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80052c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052cc:	4c6e      	ldr	r4, [pc, #440]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80052ce:	42a0      	cmp	r0, r4
 80052d0:	f171 0100 	sbcs.w	r1, r1, #0
 80052d4:	f082 8196 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052dc:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80052e0:	4321      	orrs	r1, r4
 80052e2:	f001 8197 	beq.w	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80052e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052ea:	4c68      	ldr	r4, [pc, #416]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80052ec:	42a0      	cmp	r0, r4
 80052ee:	f171 0100 	sbcs.w	r1, r1, #0
 80052f2:	f082 8187 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052fa:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 80052fe:	4321      	orrs	r1, r4
 8005300:	f001 8154 	beq.w	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005304:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005308:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800530c:	f171 0100 	sbcs.w	r1, r1, #0
 8005310:	f082 8178 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005318:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800531c:	4321      	orrs	r1, r4
 800531e:	f001 80b7 	beq.w	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005326:	f248 0401 	movw	r4, #32769	; 0x8001
 800532a:	42a0      	cmp	r0, r4
 800532c:	f171 0100 	sbcs.w	r1, r1, #0
 8005330:	f082 8168 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005334:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005338:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800533c:	4321      	orrs	r1, r4
 800533e:	f001 8064 	beq.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005346:	f244 0401 	movw	r4, #16385	; 0x4001
 800534a:	42a0      	cmp	r0, r4
 800534c:	f171 0100 	sbcs.w	r1, r1, #0
 8005350:	f082 8158 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005358:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800535c:	4321      	orrs	r1, r4
 800535e:	f001 8011 	beq.w	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005366:	f242 0401 	movw	r4, #8193	; 0x2001
 800536a:	42a0      	cmp	r0, r4
 800536c:	f171 0100 	sbcs.w	r1, r1, #0
 8005370:	f082 8148 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005378:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800537c:	4321      	orrs	r1, r4
 800537e:	f000 871e 	beq.w	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005386:	f241 0401 	movw	r4, #4097	; 0x1001
 800538a:	42a0      	cmp	r0, r4
 800538c:	f171 0100 	sbcs.w	r1, r1, #0
 8005390:	f082 8138 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005394:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005398:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800539c:	4321      	orrs	r1, r4
 800539e:	f000 86a8 	beq.w	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80053a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053a6:	f640 0401 	movw	r4, #2049	; 0x801
 80053aa:	42a0      	cmp	r0, r4
 80053ac:	f171 0100 	sbcs.w	r1, r1, #0
 80053b0:	f082 8128 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053b8:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 80053bc:	4321      	orrs	r1, r4
 80053be:	f000 8632 	beq.w	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80053c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053c6:	f240 4401 	movw	r4, #1025	; 0x401
 80053ca:	42a0      	cmp	r0, r4
 80053cc:	f171 0100 	sbcs.w	r1, r1, #0
 80053d0:	f082 8118 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053d8:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 80053dc:	4321      	orrs	r1, r4
 80053de:	f000 85b0 	beq.w	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80053e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053e6:	f240 2401 	movw	r4, #513	; 0x201
 80053ea:	42a0      	cmp	r0, r4
 80053ec:	f171 0100 	sbcs.w	r1, r1, #0
 80053f0:	f082 8108 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053f8:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 80053fc:	4321      	orrs	r1, r4
 80053fe:	f000 8535 	beq.w	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005406:	f240 1401 	movw	r4, #257	; 0x101
 800540a:	42a0      	cmp	r0, r4
 800540c:	f171 0100 	sbcs.w	r1, r1, #0
 8005410:	f082 80f8 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005418:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800541c:	4321      	orrs	r1, r4
 800541e:	f000 84ba 	beq.w	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005426:	2881      	cmp	r0, #129	; 0x81
 8005428:	f171 0100 	sbcs.w	r1, r1, #0
 800542c:	f082 80ea 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005434:	2821      	cmp	r0, #33	; 0x21
 8005436:	f171 0100 	sbcs.w	r1, r1, #0
 800543a:	d26f      	bcs.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800543c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005440:	4301      	orrs	r1, r0
 8005442:	f002 80df 	beq.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800544a:	1e42      	subs	r2, r0, #1
 800544c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005450:	2a20      	cmp	r2, #32
 8005452:	f173 0100 	sbcs.w	r1, r3, #0
 8005456:	f082 80d5 	bcs.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800545a:	e019      	b.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800545c:	80000001 	.word	0x80000001
 8005460:	40000001 	.word	0x40000001
 8005464:	20000001 	.word	0x20000001
 8005468:	10000001 	.word	0x10000001
 800546c:	08000001 	.word	0x08000001
 8005470:	04000001 	.word	0x04000001
 8005474:	00800001 	.word	0x00800001
 8005478:	00400001 	.word	0x00400001
 800547c:	00200001 	.word	0x00200001
 8005480:	00100001 	.word	0x00100001
 8005484:	00080001 	.word	0x00080001
 8005488:	00040001 	.word	0x00040001
 800548c:	00020001 	.word	0x00020001
 8005490:	2a1f      	cmp	r2, #31
 8005492:	f202 80b7 	bhi.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005496:	a101      	add	r1, pc, #4	; (adr r1, 800549c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005498:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800549c:	080057c9 	.word	0x080057c9
 80054a0:	08005895 	.word	0x08005895
 80054a4:	08007605 	.word	0x08007605
 80054a8:	08005955 	.word	0x08005955
 80054ac:	08007605 	.word	0x08007605
 80054b0:	08007605 	.word	0x08007605
 80054b4:	08007605 	.word	0x08007605
 80054b8:	08005a25 	.word	0x08005a25
 80054bc:	08007605 	.word	0x08007605
 80054c0:	08007605 	.word	0x08007605
 80054c4:	08007605 	.word	0x08007605
 80054c8:	08007605 	.word	0x08007605
 80054cc:	08007605 	.word	0x08007605
 80054d0:	08007605 	.word	0x08007605
 80054d4:	08007605 	.word	0x08007605
 80054d8:	08005b07 	.word	0x08005b07
 80054dc:	08007605 	.word	0x08007605
 80054e0:	08007605 	.word	0x08007605
 80054e4:	08007605 	.word	0x08007605
 80054e8:	08007605 	.word	0x08007605
 80054ec:	08007605 	.word	0x08007605
 80054f0:	08007605 	.word	0x08007605
 80054f4:	08007605 	.word	0x08007605
 80054f8:	08007605 	.word	0x08007605
 80054fc:	08007605 	.word	0x08007605
 8005500:	08007605 	.word	0x08007605
 8005504:	08007605 	.word	0x08007605
 8005508:	08007605 	.word	0x08007605
 800550c:	08007605 	.word	0x08007605
 8005510:	08007605 	.word	0x08007605
 8005514:	08007605 	.word	0x08007605
 8005518:	08005bdd 	.word	0x08005bdd
 800551c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005520:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005524:	430b      	orrs	r3, r1
 8005526:	f000 83c4 	beq.w	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800552a:	f002 b86b 	b.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800552e:	4ba1      	ldr	r3, [pc, #644]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005534:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005538:	633b      	str	r3, [r7, #48]	; 0x30
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005540:	d036      	beq.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005548:	d86b      	bhi.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005550:	d02b      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005558:	d863      	bhi.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005560:	d01b      	beq.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005568:	d85b      	bhi.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005576:	d008      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005578:	e053      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800557a:	f107 0320 	add.w	r3, r7, #32
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff f8ba 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005588:	e04e      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800558a:	f107 0314 	add.w	r3, r7, #20
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fa1c 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005598:	e046      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fb7e 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80055a8:	e03e      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80055aa:	4b83      	ldr	r3, [pc, #524]	; (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80055ae:	e03b      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055b0:	4b80      	ldr	r3, [pc, #512]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055bc:	4b7d      	ldr	r3, [pc, #500]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d10c      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055ce:	4b79      	ldr	r3, [pc, #484]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	08db      	lsrs	r3, r3, #3
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	4a78      	ldr	r2, [pc, #480]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
 80055e0:	e01e      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055e2:	4b74      	ldr	r3, [pc, #464]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ee:	d106      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f6:	d102      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80055f8:	4b71      	ldr	r3, [pc, #452]	; (80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
 80055fc:	e010      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055fe:	4b6d      	ldr	r3, [pc, #436]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560a:	d106      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005612:	d102      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005614:	4b6b      	ldr	r3, [pc, #428]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800561e:	e003      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005620:	e002      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005626:	bf00      	nop
          }
        }
        break;
 8005628:	f001 bfef 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800562c:	4b61      	ldr	r3, [pc, #388]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800562e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005632:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005636:	633b      	str	r3, [r7, #48]	; 0x30
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563e:	d036      	beq.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005646:	d86b      	bhi.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800564e:	d02b      	beq.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005656:	d863      	bhi.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565e:	d01b      	beq.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005666:	d85b      	bhi.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005674:	d008      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005676:	e053      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005678:	f107 0320 	add.w	r3, r7, #32
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff f83b 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005686:	e04e      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005688:	f107 0314 	add.w	r3, r7, #20
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff f99d 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005696:	e046      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005698:	f107 0308 	add.w	r3, r7, #8
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff faff 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80056a6:	e03e      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80056a8:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80056ac:	e03b      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056ae:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80056b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056ba:	4b3e      	ldr	r3, [pc, #248]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056cc:	4b39      	ldr	r3, [pc, #228]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	4a39      	ldr	r2, [pc, #228]	; (80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
 80056de:	e01e      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056e0:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ec:	d106      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f4:	d102      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
 80056fa:	e010      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056fc:	4b2d      	ldr	r3, [pc, #180]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005708:	d106      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005710:	d102      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005712:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
 8005716:	e002      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800571e:	e002      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005724:	bf00      	nop
          }
        }
        break;
 8005726:	f001 bf70 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800572a:	4b22      	ldr	r3, [pc, #136]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800572c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	2b00      	cmp	r3, #0
 800573a:	d108      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800573c:	f107 0320 	add.w	r3, r7, #32
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe ffd9 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800574a:	f001 bf5e 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d108      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005754:	f107 0314 	add.w	r3, r7, #20
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff f937 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005762:	f001 bf52 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800576a:	f001 bf4e 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005770:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800577a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005780:	f107 0320 	add.w	r3, r7, #32
 8005784:	4618      	mov	r0, r3
 8005786:	f7fe ffb7 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800578e:	f001 bf3c 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d108      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff f915 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057a6:	f001 bf30 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057ae:	f001 bf2c 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80057b2:	bf00      	nop
 80057b4:	44020c00 	.word	0x44020c00
 80057b8:	00bb8000 	.word	0x00bb8000
 80057bc:	03d09000 	.word	0x03d09000
 80057c0:	003d0900 	.word	0x003d0900
 80057c4:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80057c8:	4b9d      	ldr	r3, [pc, #628]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80057ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80057da:	f7fc ffd7 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 80057de:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80057e0:	f001 bf13 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80057e4:	4b96      	ldr	r3, [pc, #600]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f0:	d10a      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d107      	bne.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff f8e5 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	637b      	str	r3, [r7, #52]	; 0x34
 8005806:	e043      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005808:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005814:	d10a      	bne.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	2b02      	cmp	r3, #2
 800581a:	d107      	bne.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800581c:	f107 0308 	add.w	r3, r7, #8
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fa3d 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	e031      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800582c:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b02      	cmp	r3, #2
 8005836:	d10c      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	2b03      	cmp	r3, #3
 800583c:	d109      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800583e:	4b80      	ldr	r3, [pc, #512]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	08db      	lsrs	r3, r3, #3
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	4a7e      	ldr	r2, [pc, #504]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800584a:	fa22 f303 	lsr.w	r3, r2, r3
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
 8005850:	e01e      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005852:	4b7b      	ldr	r3, [pc, #492]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800585a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585e:	d105      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	2b04      	cmp	r3, #4
 8005864:	d102      	bne.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005866:	4b78      	ldr	r3, [pc, #480]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	e011      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800586c:	4b74      	ldr	r3, [pc, #464]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800586e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b02      	cmp	r3, #2
 8005878:	d106      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	2b05      	cmp	r3, #5
 800587e:	d103      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800588c:	f001 bebd 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005890:	f001 bebb 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005894:	4b6a      	ldr	r3, [pc, #424]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800589a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800589e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80058a6:	f7fc ff5b 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80058aa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80058ac:	f001 bead 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80058b0:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058bc:	d10a      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d107      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058c4:	f107 0314 	add.w	r3, r7, #20
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff f87f 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
 80058d2:	e03d      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	2b10      	cmp	r3, #16
 80058d8:	d108      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058da:	f107 0308 	add.w	r3, r7, #8
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff f9de 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058e8:	f001 be8f 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80058ec:	4b54      	ldr	r3, [pc, #336]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d10c      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2b18      	cmp	r3, #24
 80058fc:	d109      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058fe:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	08db      	lsrs	r3, r3, #3
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	4a4e      	ldr	r2, [pc, #312]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	e01e      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005912:	4b4b      	ldr	r3, [pc, #300]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800591a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591e:	d105      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2b20      	cmp	r3, #32
 8005924:	d102      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8005926:	4b48      	ldr	r3, [pc, #288]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	e011      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800592c:	4b44      	ldr	r3, [pc, #272]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800592e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b02      	cmp	r3, #2
 8005938:	d106      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	2b28      	cmp	r3, #40	; 0x28
 800593e:	d103      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
 8005946:	e003      	b.n	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800594c:	f001 be5d 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005950:	f001 be5b 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005954:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800595a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800595e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005966:	f7fc fefb 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 800596a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800596c:	f001 be4d 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005970:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597c:	d10a      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d107      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff f81f 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
 8005992:	e045      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005994:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a0:	d10a      	bne.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	2b80      	cmp	r3, #128	; 0x80
 80059a6:	d107      	bne.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a8:	f107 0308 	add.w	r3, r7, #8
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff f977 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	637b      	str	r3, [r7, #52]	; 0x34
 80059b6:	e033      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80059b8:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d10c      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	2bc0      	cmp	r3, #192	; 0xc0
 80059c8:	d109      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059ca:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	08db      	lsrs	r3, r3, #3
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80059d6:	fa22 f303 	lsr.w	r3, r2, r3
 80059da:	637b      	str	r3, [r7, #52]	; 0x34
 80059dc:	e020      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ea:	d106      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	d102      	bne.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80059f4:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
 80059f8:	e012      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80059fa:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80059fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d107      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005a0e:	d103      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8005a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
 8005a16:	e003      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a1c:	f001 bdf5 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a20:	f001 bdf3 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a2a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a36:	f7fc fe93 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8005a3a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005a3c:	f001 bde5 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a40:	44020c00 	.word	0x44020c00
 8005a44:	03d09000 	.word	0x03d09000
 8005a48:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005a4c:	4ba0      	ldr	r3, [pc, #640]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a58:	d10b      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a60:	d107      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a62:	f107 0314 	add.w	r3, r7, #20
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe ffb0 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a70:	e047      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005a72:	4b97      	ldr	r3, [pc, #604]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a86:	d107      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a88:	f107 0308 	add.w	r3, r7, #8
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff f907 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
 8005a96:	e034      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005a98:	4b8d      	ldr	r3, [pc, #564]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d10d      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005aaa:	d109      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005aac:	4b88      	ldr	r3, [pc, #544]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	08db      	lsrs	r3, r3, #3
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	4a87      	ldr	r2, [pc, #540]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
 8005abe:	e020      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005ac0:	4b83      	ldr	r3, [pc, #524]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d106      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad4:	d102      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005ad6:	4b80      	ldr	r3, [pc, #512]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8005ada:	e012      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005adc:	4b7c      	ldr	r3, [pc, #496]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d107      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005af0:	d103      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8005af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	e003      	b.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005afe:	f001 bd84 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b02:	f001 bd82 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005b06:	4b72      	ldr	r3, [pc, #456]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b0c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b10:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b18:	f7fc fe22 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8005b1c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b1e:	f001 bd74 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005b22:	4b6b      	ldr	r3, [pc, #428]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2e:	d10b      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b36:	d107      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe ff45 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
 8005b46:	e047      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005b48:	4b61      	ldr	r3, [pc, #388]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b54:	d10b      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff f89c 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6c:	e034      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005b6e:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d10d      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b80:	d109      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b82:	4b53      	ldr	r3, [pc, #332]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	08db      	lsrs	r3, r3, #3
 8005b88:	f003 0303 	and.w	r3, r3, #3
 8005b8c:	4a51      	ldr	r2, [pc, #324]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
 8005b94:	e020      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005b96:	4b4e      	ldr	r3, [pc, #312]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005baa:	d102      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8005bac:	4b4a      	ldr	r3, [pc, #296]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb0:	e012      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005bc6:	d103      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8005bc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bce:	e003      	b.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bd4:	f001 bd19 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005bd8:	f001 bd17 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005bdc:	4b3c      	ldr	r3, [pc, #240]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005be2:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bee:	f7fc fdb7 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8005bf2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005bf4:	f001 bd09 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005bf8:	4b35      	ldr	r3, [pc, #212]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c04:	d10b      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0c:	d107      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c0e:	f107 0314 	add.w	r3, r7, #20
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe feda 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1c:	e047      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c2a:	d10b      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c32:	d107      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c34:	f107 0308 	add.w	r3, r7, #8
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff f831 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
 8005c42:	e034      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005c44:	4b22      	ldr	r3, [pc, #136]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d10d      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005c56:	d109      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c58:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	08db      	lsrs	r3, r3, #3
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	4a1c      	ldr	r2, [pc, #112]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
 8005c68:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6a:	e020      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005c6c:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c78:	d106      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c80:	d102      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
 8005c86:	e012      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d107      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005c9c:	d103      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8005c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005caa:	f001 bcae 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005cae:	f001 bcac 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8005cb2:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005cb8:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8005cbc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10b      	bne.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fc fd4c 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8005cca:	f001 bc9e 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005cce:	bf00      	nop
 8005cd0:	44020c00 	.word	0x44020c00
 8005cd4:	03d09000 	.word	0x03d09000
 8005cd8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8005cdc:	4ba0      	ldr	r3, [pc, #640]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce8:	d10b      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cf2:	f107 0314 	add.w	r3, r7, #20
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe fe68 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005d00:	e047      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8005d02:	4b97      	ldr	r3, [pc, #604]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d0e:	d10b      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d16:	d107      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe ffbf 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	637b      	str	r3, [r7, #52]	; 0x34
 8005d26:	e034      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8005d28:	4b8d      	ldr	r3, [pc, #564]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d10d      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d3a:	d109      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d3c:	4b88      	ldr	r3, [pc, #544]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	08db      	lsrs	r3, r3, #3
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	4a87      	ldr	r2, [pc, #540]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4e:	e020      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8005d50:	4b83      	ldr	r3, [pc, #524]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d5c:	d106      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d64:	d102      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8005d66:	4b80      	ldr	r3, [pc, #512]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6a:	e012      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8005d6c:	4b7c      	ldr	r3, [pc, #496]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d107      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005d80:	d103      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	637b      	str	r3, [r7, #52]	; 0x34
 8005d88:	e003      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d8e:	f001 bc3c 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d92:	f001 bc3a 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8005d96:	4b72      	ldr	r3, [pc, #456]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d9c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005da0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7fc fcda 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8005dac:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8005dae:	f001 bc2c 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8005db2:	4b6b      	ldr	r3, [pc, #428]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dc8:	f107 0314 	add.w	r3, r7, #20
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fe fdfd 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd6:	e047      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005dd8:	4b61      	ldr	r3, [pc, #388]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de4:	d10b      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dec:	d107      	bne.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dee:	f107 0308 	add.w	r3, r7, #8
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe ff54 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfc:	e034      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8005dfe:	4b58      	ldr	r3, [pc, #352]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d10d      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e10:	d109      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e12:	4b53      	ldr	r3, [pc, #332]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	08db      	lsrs	r3, r3, #3
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	4a51      	ldr	r2, [pc, #324]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
 8005e24:	e020      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8005e26:	4b4e      	ldr	r3, [pc, #312]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e32:	d106      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e3a:	d102      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8005e3c:	4b4a      	ldr	r3, [pc, #296]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e40:	e012      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8005e42:	4b47      	ldr	r3, [pc, #284]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d107      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005e56:	d103      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8005e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e64:	f001 bbd1 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e68:	f001 bbcf 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8005e6c:	4b3c      	ldr	r3, [pc, #240]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005e76:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e7e:	f7fc fc6f 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8005e82:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e84:	f001 bbc1 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8005e88:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e94:	d10b      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e9c:	d107      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9e:	f107 0314 	add.w	r3, r7, #20
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe fd92 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8005eac:	e047      	b.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8005eae:	4b2c      	ldr	r3, [pc, #176]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eba:	d10b      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec4:	f107 0308 	add.w	r3, r7, #8
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fee9 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	e034      	b.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8005ed4:	4b22      	ldr	r3, [pc, #136]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d10d      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ee6:	d109      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	08db      	lsrs	r3, r3, #3
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8005efa:	e020      	b.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8005efc:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f08:	d106      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f10:	d102      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	e012      	b.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8005f18:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d107      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f2c:	d103      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
 8005f34:	e003      	b.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f3a:	f001 bb66 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f3e:	f001 bb64 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f48:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f54:	f7fc fc04 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8005f58:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f5a:	f001 bb56 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f5e:	bf00      	nop
 8005f60:	44020c00 	.word	0x44020c00
 8005f64:	03d09000 	.word	0x03d09000
 8005f68:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8005f6c:	4ba1      	ldr	r3, [pc, #644]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f78:	d10b      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f80:	d107      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f82:	f107 0314 	add.w	r3, r7, #20
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fe fd20 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f90:	e047      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8005f92:	4b98      	ldr	r3, [pc, #608]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9e:	d10b      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa8:	f107 0308 	add.w	r3, r7, #8
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe fe77 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb6:	e034      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8005fb8:	4b8e      	ldr	r3, [pc, #568]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d10d      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005fca:	d109      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fcc:	4b89      	ldr	r3, [pc, #548]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	08db      	lsrs	r3, r3, #3
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	4a88      	ldr	r2, [pc, #544]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fde:	e020      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8005fe0:	4b84      	ldr	r3, [pc, #528]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fec:	d106      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ff4:	d102      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8005ff6:	4b81      	ldr	r3, [pc, #516]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8005ffa:	e012      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8005ffc:	4b7d      	ldr	r3, [pc, #500]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d107      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8006010:	d103      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8006012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006016:	637b      	str	r3, [r7, #52]	; 0x34
 8006018:	e003      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800601e:	f001 baf4 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006022:	f001 baf2 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006026:	4b73      	ldr	r3, [pc, #460]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006028:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2b00      	cmp	r3, #0
 8006036:	d104      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006038:	f7fc fb92 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 800603c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800603e:	f001 bae4 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8006042:	4b6c      	ldr	r3, [pc, #432]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800604a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800604e:	d10a      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2b01      	cmp	r3, #1
 8006054:	d107      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fcb6 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
 8006064:	e043      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006066:	4b63      	ldr	r3, [pc, #396]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800606e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006072:	d10a      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2b02      	cmp	r3, #2
 8006078:	d107      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800607a:	f107 0308 	add.w	r3, r7, #8
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fe0e 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
 8006088:	e031      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800608a:	4b5a      	ldr	r3, [pc, #360]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b02      	cmp	r3, #2
 8006094:	d10c      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	2b03      	cmp	r3, #3
 800609a:	d109      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800609c:	4b55      	ldr	r3, [pc, #340]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	08db      	lsrs	r3, r3, #3
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	4a54      	ldr	r2, [pc, #336]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
 80060ae:	e01e      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80060b0:	4b50      	ldr	r3, [pc, #320]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060bc:	d105      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d102      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80060c4:	4b4d      	ldr	r3, [pc, #308]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
 80060c8:	e011      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80060ca:	4b4a      	ldr	r3, [pc, #296]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d106      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2b05      	cmp	r3, #5
 80060dc:	d103      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80060de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
 80060e4:	e003      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ea:	f001 ba8e 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060ee:	f001 ba8c 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80060f2:	4b40      	ldr	r3, [pc, #256]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80060f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060fc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006104:	f7fc fb2c 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8006108:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800610a:	f001 ba7e 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800610e:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611a:	d10a      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	2b10      	cmp	r3, #16
 8006120:	d107      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006122:	f107 0314 	add.w	r3, r7, #20
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fc50 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
 8006130:	e043      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006132:	4b30      	ldr	r3, [pc, #192]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800613a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613e:	d10a      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	2b20      	cmp	r3, #32
 8006144:	d107      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006146:	f107 0308 	add.w	r3, r7, #8
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fda8 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	637b      	str	r3, [r7, #52]	; 0x34
 8006154:	e031      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006156:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b02      	cmp	r3, #2
 8006160:	d10c      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	2b30      	cmp	r3, #48	; 0x30
 8006166:	d109      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006168:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	08db      	lsrs	r3, r3, #3
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
 800617a:	e01e      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800617c:	4b1d      	ldr	r3, [pc, #116]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006188:	d105      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d102      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006190:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006192:	637b      	str	r3, [r7, #52]	; 0x34
 8006194:	e011      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006196:	4b17      	ldr	r3, [pc, #92]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d106      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	2b50      	cmp	r3, #80	; 0x50
 80061a8:	d103      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80061aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
 80061b0:	e003      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061b6:	f001 ba28 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061ba:	f001 ba26 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80061be:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80061c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061c4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80061c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80061d0:	f7fc faf2 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 80061d4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80061d6:	f001 ba18 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061e0:	d10e      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e2:	f107 0314 	add.w	r3, r7, #20
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fbf0 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061f0:	f001 ba0b 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061f4:	44020c00 	.word	0x44020c00
 80061f8:	03d09000 	.word	0x03d09000
 80061fc:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006206:	d108      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006208:	f107 0308 	add.w	r3, r7, #8
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe fd47 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006216:	f001 b9f8 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800621a:	4ba4      	ldr	r3, [pc, #656]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d10d      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800622c:	d109      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800622e:	4b9f      	ldr	r3, [pc, #636]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	08db      	lsrs	r3, r3, #3
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	4a9d      	ldr	r2, [pc, #628]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800623a:	fa22 f303 	lsr.w	r3, r2, r3
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
 8006240:	e020      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006242:	4b9a      	ldr	r3, [pc, #616]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624e:	d106      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006256:	d102      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006258:	4b96      	ldr	r3, [pc, #600]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
 800625c:	e012      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800625e:	4b93      	ldr	r3, [pc, #588]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d107      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006272:	d103      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006280:	f001 b9c3 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006284:	f001 b9c1 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006288:	4b88      	ldr	r3, [pc, #544]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800628a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2b00      	cmp	r3, #0
 8006298:	d104      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800629a:	f7fc fa45 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 800629e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80062a0:	f001 b9b3 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d104      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80062aa:	f7fc f911 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 80062ae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80062b0:	f001 b9ab 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d108      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ba:	f107 0314 	add.w	r3, r7, #20
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe fb84 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062c8:	f001 b99f 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80062cc:	4b77      	ldr	r3, [pc, #476]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d8:	d105      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d102      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80062e0:	4b75      	ldr	r3, [pc, #468]	; (80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80062e2:	637b      	str	r3, [r7, #52]	; 0x34
 80062e4:	e023      	b.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80062e6:	4b71      	ldr	r3, [pc, #452]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d10c      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d109      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062f8:	4b6c      	ldr	r3, [pc, #432]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	08db      	lsrs	r3, r3, #3
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	4a6b      	ldr	r2, [pc, #428]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
 800630a:	e010      	b.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800630c:	4b67      	ldr	r3, [pc, #412]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006318:	d105      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b05      	cmp	r3, #5
 800631e:	d102      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006320:	4b64      	ldr	r3, [pc, #400]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
 8006324:	e003      	b.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800632a:	f001 b96e 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800632e:	f001 b96c 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006332:	4b5e      	ldr	r3, [pc, #376]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800633e:	4b5b      	ldr	r3, [pc, #364]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b02      	cmp	r3, #2
 800634a:	d106      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
 8006358:	e012      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800635a:	4b54      	ldr	r3, [pc, #336]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800635c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006368:	d106      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2b08      	cmp	r3, #8
 800636e:	d103      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006370:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
 8006376:	e003      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800637c:	f001 b945 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006380:	f001 b943 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006384:	4b49      	ldr	r3, [pc, #292]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800638a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800638e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006396:	f7fc f9e3 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 800639a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800639c:	f001 b935 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a6:	d108      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fc77 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063b6:	f001 b928 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80063ba:	4b3c      	ldr	r3, [pc, #240]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d10d      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063cc:	d109      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063ce:	4b37      	ldr	r3, [pc, #220]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	08db      	lsrs	r3, r3, #3
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	4a35      	ldr	r2, [pc, #212]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80063da:	fa22 f303 	lsr.w	r3, r2, r3
 80063de:	637b      	str	r3, [r7, #52]	; 0x34
 80063e0:	e011      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80063e2:	4b32      	ldr	r3, [pc, #200]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ee:	d106      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063f6:	d102      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80063f8:	4b2e      	ldr	r3, [pc, #184]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
 80063fc:	e003      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006402:	f001 b902 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006406:	f001 b900 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800640a:	4b28      	ldr	r3, [pc, #160]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800640c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006410:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006414:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fc f9a0 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8006420:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006422:	f001 b8f2 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800642c:	d108      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800642e:	f107 0308 	add.w	r3, r7, #8
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fc34 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800643c:	f001 b8e5 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006440:	4b1a      	ldr	r3, [pc, #104]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b02      	cmp	r3, #2
 800644a:	d10d      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006452:	d109      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006454:	4b15      	ldr	r3, [pc, #84]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	08db      	lsrs	r3, r3, #3
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	4a14      	ldr	r2, [pc, #80]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
 8006466:	e011      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006468:	4b10      	ldr	r3, [pc, #64]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d106      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800647c:	d102      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
 8006482:	e003      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006488:	f001 b8bf 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800648c:	f001 b8bd 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006492:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006496:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800649a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80064a2:	f7fc f989 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 80064a6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80064a8:	f001 b8af 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064ac:	44020c00 	.word	0x44020c00
 80064b0:	03d09000 	.word	0x03d09000
 80064b4:	003d0900 	.word	0x003d0900
 80064b8:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064c2:	d108      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c4:	f107 0308 	add.w	r3, r7, #8
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe fbe9 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d2:	f001 b89a 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80064d6:	4b9f      	ldr	r3, [pc, #636]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d10d      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064e8:	d109      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064ea:	4b9a      	ldr	r3, [pc, #616]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	08db      	lsrs	r3, r3, #3
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	4a98      	ldr	r2, [pc, #608]	; (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80064f6:	fa22 f303 	lsr.w	r3, r2, r3
 80064fa:	637b      	str	r3, [r7, #52]	; 0x34
 80064fc:	e011      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80064fe:	4b95      	ldr	r3, [pc, #596]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650a:	d106      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006512:	d102      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006514:	4b91      	ldr	r3, [pc, #580]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
 8006518:	e003      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800651e:	f001 b874 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006522:	f001 b872 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006526:	4b8b      	ldr	r3, [pc, #556]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006528:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800652c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006530:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006538:	f7fc f93e 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 800653c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800653e:	f001 b864 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006548:	d108      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800654a:	f107 0308 	add.w	r3, r7, #8
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fba6 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006558:	f001 b857 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800655c:	4b7d      	ldr	r3, [pc, #500]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b02      	cmp	r3, #2
 8006566:	d10d      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800656e:	d109      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006570:	4b78      	ldr	r3, [pc, #480]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	08db      	lsrs	r3, r3, #3
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	4a77      	ldr	r2, [pc, #476]	; (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
 8006580:	637b      	str	r3, [r7, #52]	; 0x34
 8006582:	e011      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006584:	4b73      	ldr	r3, [pc, #460]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800658c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006590:	d106      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006598:	d102      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800659a:	4b70      	ldr	r3, [pc, #448]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065a4:	f001 b831 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065a8:	f001 b82f 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80065ac:	4b69      	ldr	r3, [pc, #420]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80065ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065b2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065be:	f7fc f8cf 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80065c2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80065c4:	f001 b821 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ce:	d108      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065d0:	f107 0308 	add.w	r3, r7, #8
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe fb63 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065de:	f001 b814 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80065e2:	4b5c      	ldr	r3, [pc, #368]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d10e      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065f4:	d10a      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065f6:	4b57      	ldr	r3, [pc, #348]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	08db      	lsrs	r3, r3, #3
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	4a55      	ldr	r2, [pc, #340]	; (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006608:	f000 bfff 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006610:	f000 bffb 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006614:	4b4f      	ldr	r3, [pc, #316]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006616:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800661a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800661e:	633b      	str	r3, [r7, #48]	; 0x30
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006626:	d056      	beq.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800662e:	f200 808b 	bhi.w	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006638:	d03e      	beq.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006640:	f200 8082 	bhi.w	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664a:	d027      	beq.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006652:	d879      	bhi.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665a:	d017      	beq.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006662:	d871      	bhi.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	2b00      	cmp	r3, #0
 8006668:	d004      	beq.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	d004      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006672:	e069      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006674:	f7fc f8a0 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 8006678:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800667a:	e068      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800667c:	f107 0314 	add.w	r3, r7, #20
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe f9a3 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800668a:	e060      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800668c:	f107 0308 	add.w	r3, r7, #8
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe fb05 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800669a:	e058      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800669c:	4b2d      	ldr	r3, [pc, #180]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800669e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d103      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80066b0:	e04d      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066b6:	e04a      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80066b8:	4b26      	ldr	r3, [pc, #152]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80066ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066c6:	d103      	bne.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80066c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80066ce:	e03e      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066d4:	e03b      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066d6:	4b1f      	ldr	r3, [pc, #124]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80066d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d10c      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066f4:	4b17      	ldr	r3, [pc, #92]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	4a16      	ldr	r2, [pc, #88]	; (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
 8006706:	e01e      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006708:	4b12      	ldr	r3, [pc, #72]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006714:	d106      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671c:	d102      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800671e:	4b0f      	ldr	r3, [pc, #60]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
 8006722:	e010      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006724:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006730:	d106      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d102      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800673c:	637b      	str	r3, [r7, #52]	; 0x34
 800673e:	e002      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006744:	e003      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006746:	e002      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800674c:	bf00      	nop
          }
        }
        break;
 800674e:	f000 bf5c 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006752:	bf00      	nop
 8006754:	44020c00 	.word	0x44020c00
 8006758:	03d09000 	.word	0x03d09000
 800675c:	003d0900 	.word	0x003d0900
 8006760:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006764:	4b9e      	ldr	r3, [pc, #632]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006766:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800676a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800676e:	633b      	str	r3, [r7, #48]	; 0x30
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006776:	d056      	beq.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800677e:	f200 808b 	bhi.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006788:	d03e      	beq.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006790:	f200 8082 	bhi.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800679a:	d027      	beq.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067a2:	d879      	bhi.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067aa:	d017      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b2:	d871      	bhi.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c0:	d004      	beq.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80067c2:	e069      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fb ffcc 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80067c8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80067ca:	e068      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe f8fb 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80067da:	e060      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067dc:	f107 0308 	add.w	r3, r7, #8
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe fa5d 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80067ea:	e058      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067ec:	4b7c      	ldr	r3, [pc, #496]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80067ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d103      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80067fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006800:	e04d      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006806:	e04a      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006808:	4b75      	ldr	r3, [pc, #468]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800680a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800680e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006816:	d103      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006818:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800681c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800681e:	e03e      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006824:	e03b      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006826:	4b6e      	ldr	r3, [pc, #440]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800682c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006832:	4b6b      	ldr	r3, [pc, #428]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b02      	cmp	r3, #2
 800683c:	d10c      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006844:	4b66      	ldr	r3, [pc, #408]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	08db      	lsrs	r3, r3, #3
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	4a65      	ldr	r2, [pc, #404]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006850:	fa22 f303 	lsr.w	r3, r2, r3
 8006854:	637b      	str	r3, [r7, #52]	; 0x34
 8006856:	e01e      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006858:	4b61      	ldr	r3, [pc, #388]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006864:	d106      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686c:	d102      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800686e:	4b5e      	ldr	r3, [pc, #376]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
 8006872:	e010      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006874:	4b5a      	ldr	r3, [pc, #360]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006880:	d106      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006888:	d102      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800688a:	4b58      	ldr	r3, [pc, #352]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
 800688e:	e002      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006894:	e003      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006896:	e002      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800689c:	bf00      	nop
          }
        }
        break;
 800689e:	f000 beb4 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80068a2:	4b4f      	ldr	r3, [pc, #316]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80068a8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068b4:	d056      	beq.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068bc:	f200 808b 	bhi.w	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068c6:	d03e      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068ce:	f200 8082 	bhi.w	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068d8:	d027      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068e0:	d879      	bhi.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068e8:	d017      	beq.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f0:	d871      	bhi.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d004      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fe:	d004      	beq.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006900:	e069      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006902:	f7fb ff59 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 8006906:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006908:	e068      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690a:	f107 0314 	add.w	r3, r7, #20
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe f85c 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006918:	e060      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800691a:	f107 0308 	add.w	r3, r7, #8
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe f9be 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006928:	e058      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800692a:	4b2d      	ldr	r3, [pc, #180]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800692c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b02      	cmp	r3, #2
 8006936:	d103      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800693e:	e04d      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006944:	e04a      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006946:	4b26      	ldr	r3, [pc, #152]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800694c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006954:	d103      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006956:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800695a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800695c:	e03e      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006962:	e03b      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006964:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800696a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b02      	cmp	r3, #2
 800697a:	d10c      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006982:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800698e:	fa22 f303 	lsr.w	r3, r2, r3
 8006992:	637b      	str	r3, [r7, #52]	; 0x34
 8006994:	e01e      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800699e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a2:	d106      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d102      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80069ac:	4b0e      	ldr	r3, [pc, #56]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34
 80069b0:	e010      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c6:	d102      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80069c8:	4b08      	ldr	r3, [pc, #32]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
 80069cc:	e002      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80069d2:	e003      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80069d4:	e002      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80069da:	bf00      	nop
          }
        }
        break;
 80069dc:	f000 be15 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069e0:	44020c00 	.word	0x44020c00
 80069e4:	03d09000 	.word	0x03d09000
 80069e8:	003d0900 	.word	0x003d0900
 80069ec:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80069f0:	4b9e      	ldr	r3, [pc, #632]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80069f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80069f6:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006a02:	d056      	beq.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006a0a:	f200 808b 	bhi.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a14:	d03e      	beq.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a1c:	f200 8082 	bhi.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a26:	d027      	beq.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a2e:	d879      	bhi.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a36:	d017      	beq.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a3e:	d871      	bhi.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4c:	d004      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8006a4e:	e069      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006a50:	f7fb feb2 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 8006a54:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006a56:	e068      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a58:	f107 0314 	add.w	r3, r7, #20
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fd ffb5 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a66:	e060      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a68:	f107 0308 	add.w	r3, r7, #8
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe f917 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a76:	e058      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a78:	4b7c      	ldr	r3, [pc, #496]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d103      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a8c:	e04d      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a92:	e04a      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006a94:	4b75      	ldr	r3, [pc, #468]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa2:	d103      	bne.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006aa4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006aaa:	e03e      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ab0:	e03b      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ab2:	4b6e      	ldr	r3, [pc, #440]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ab8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006abe:	4b6b      	ldr	r3, [pc, #428]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ad0:	4b66      	ldr	r3, [pc, #408]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	08db      	lsrs	r3, r3, #3
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	4a65      	ldr	r2, [pc, #404]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae2:	e01e      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ae4:	4b61      	ldr	r3, [pc, #388]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af0:	d106      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af8:	d102      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006afa:	4b5e      	ldr	r3, [pc, #376]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006afc:	637b      	str	r3, [r7, #52]	; 0x34
 8006afe:	e010      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b00:	4b5a      	ldr	r3, [pc, #360]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b0c:	d106      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b14:	d102      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b16:	4b58      	ldr	r3, [pc, #352]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1a:	e002      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006b20:	e003      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8006b22:	e002      	b.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b28:	bf00      	nop
          }
        }
        break;
 8006b2a:	f000 bd6e 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006b2e:	4b4f      	ldr	r3, [pc, #316]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006b34:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006b38:	633b      	str	r3, [r7, #48]	; 0x30
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b40:	d056      	beq.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b48:	f200 808b 	bhi.w	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b52:	d03e      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b5a:	f200 8082 	bhi.w	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b64:	d027      	beq.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b6c:	d879      	bhi.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b74:	d017      	beq.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b7c:	d871      	bhi.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b8a:	d004      	beq.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8006b8c:	e069      	b.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006b8e:	f7fb fe13 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 8006b92:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006b94:	e068      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b96:	f107 0314 	add.w	r3, r7, #20
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fd ff16 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ba4:	e060      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba6:	f107 0308 	add.w	r3, r7, #8
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe f878 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006bb4:	e058      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bb6:	4b2d      	ldr	r3, [pc, #180]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d103      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8006bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006bca:	e04d      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006bd0:	e04a      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006bd2:	4b26      	ldr	r3, [pc, #152]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006be0:	d103      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8006be2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006be6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006be8:	e03e      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006bee:	e03b      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bf0:	4b1e      	ldr	r3, [pc, #120]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bf6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bfc:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d10c      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c0e:	4b17      	ldr	r3, [pc, #92]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c20:	e01e      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2e:	d106      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c36:	d102      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006c38:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3c:	e010      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4a:	d106      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c52:	d102      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c54:	4b08      	ldr	r3, [pc, #32]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34
 8006c58:	e002      	b.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006c5e:	e003      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8006c60:	e002      	b.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c66:	bf00      	nop
          }
        }
        break;
 8006c68:	f000 bccf 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c6c:	44020c00 	.word	0x44020c00
 8006c70:	03d09000 	.word	0x03d09000
 8006c74:	003d0900 	.word	0x003d0900
 8006c78:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8006c7c:	4b9e      	ldr	r3, [pc, #632]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006c7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006c82:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006c86:	633b      	str	r3, [r7, #48]	; 0x30
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c8e:	d056      	beq.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c96:	f200 808b 	bhi.w	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca0:	d03e      	beq.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	f200 8082 	bhi.w	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cb2:	d027      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cba:	d879      	bhi.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cc2:	d017      	beq.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cca:	d871      	bhi.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd8:	d004      	beq.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8006cda:	e069      	b.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006cdc:	f7fb fd6c 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 8006ce0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006ce2:	e068      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ce4:	f107 0314 	add.w	r3, r7, #20
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd fe6f 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cf2:	e060      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf4:	f107 0308 	add.w	r3, r7, #8
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fd ffd1 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d02:	e058      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d04:	4b7c      	ldr	r3, [pc, #496]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d103      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8006d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d16:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d18:	e04d      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d1e:	e04a      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006d20:	4b75      	ldr	r3, [pc, #468]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d2e:	d103      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8006d30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d34:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d36:	e03e      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d3c:	e03b      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d3e:	4b6e      	ldr	r3, [pc, #440]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d4a:	4b6b      	ldr	r3, [pc, #428]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d10c      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d109      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d5c:	4b66      	ldr	r3, [pc, #408]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	08db      	lsrs	r3, r3, #3
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	4a65      	ldr	r2, [pc, #404]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006d68:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6e:	e01e      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d70:	4b61      	ldr	r3, [pc, #388]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7c:	d106      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d84:	d102      	bne.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d86:	4b5e      	ldr	r3, [pc, #376]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8a:	e010      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d8c:	4b5a      	ldr	r3, [pc, #360]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d98:	d106      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da0:	d102      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006da2:	4b58      	ldr	r3, [pc, #352]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34
 8006da6:	e002      	b.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006dac:	e003      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8006dae:	e002      	b.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006db4:	bf00      	nop
          }
        }
        break;
 8006db6:	f000 bc28 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006dba:	4b4f      	ldr	r3, [pc, #316]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006dc6:	4b4c      	ldr	r3, [pc, #304]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd2:	d106      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8006dda:	4b4a      	ldr	r3, [pc, #296]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006dde:	f000 bc14 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de8:	d108      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dea:	f107 0320 	add.w	r3, r7, #32
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fd fc82 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df8:	f000 bc07 	b.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e02:	d107      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e04:	f107 0314 	add.w	r3, r7, #20
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd fddf 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e12:	e3fa      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e18:	e3f7      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006e1a:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	633b      	str	r3, [r7, #48]	; 0x30
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d861      	bhi.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e49 	.word	0x08006e49
 8006e38:	08006e59 	.word	0x08006e59
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e79 	.word	0x08006e79
 8006e44:	08006e7f 	.word	0x08006e7f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e48:	f107 0320 	add.w	r3, r7, #32
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fd fc53 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e56:	e04e      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fd fdb5 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e66:	e046      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e68:	f107 0308 	add.w	r3, r7, #8
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fd ff17 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e76:	e03e      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e78:	4b23      	ldr	r3, [pc, #140]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e7c:	e03b      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e84:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d10c      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e9c:	4b16      	ldr	r3, [pc, #88]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	4a15      	ldr	r2, [pc, #84]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
 8006eae:	e01e      	b.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eb0:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ebc:	d106      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec4:	d102      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ec6:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eca:	e010      	b.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee0:	d102      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee6:	e002      	b.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006eec:	e003      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8006eee:	e002      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ef4:	bf00      	nop
          }
        }
        break;
 8006ef6:	e388      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ef8:	44020c00 	.word	0x44020c00
 8006efc:	03d09000 	.word	0x03d09000
 8006f00:	003d0900 	.word	0x003d0900
 8006f04:	017d7840 	.word	0x017d7840
 8006f08:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006f0c:	4ba9      	ldr	r3, [pc, #676]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f16:	633b      	str	r3, [r7, #48]	; 0x30
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	f200 809a 	bhi.w	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8006f20:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006fad 	.word	0x08006fad
 8006f2c:	08007055 	.word	0x08007055
 8006f30:	08007055 	.word	0x08007055
 8006f34:	08007055 	.word	0x08007055
 8006f38:	08007055 	.word	0x08007055
 8006f3c:	08007055 	.word	0x08007055
 8006f40:	08007055 	.word	0x08007055
 8006f44:	08007055 	.word	0x08007055
 8006f48:	08006fbd 	.word	0x08006fbd
 8006f4c:	08007055 	.word	0x08007055
 8006f50:	08007055 	.word	0x08007055
 8006f54:	08007055 	.word	0x08007055
 8006f58:	08007055 	.word	0x08007055
 8006f5c:	08007055 	.word	0x08007055
 8006f60:	08007055 	.word	0x08007055
 8006f64:	08007055 	.word	0x08007055
 8006f68:	08006fcd 	.word	0x08006fcd
 8006f6c:	08007055 	.word	0x08007055
 8006f70:	08007055 	.word	0x08007055
 8006f74:	08007055 	.word	0x08007055
 8006f78:	08007055 	.word	0x08007055
 8006f7c:	08007055 	.word	0x08007055
 8006f80:	08007055 	.word	0x08007055
 8006f84:	08007055 	.word	0x08007055
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08007055 	.word	0x08007055
 8006f90:	08007055 	.word	0x08007055
 8006f94:	08007055 	.word	0x08007055
 8006f98:	08007055 	.word	0x08007055
 8006f9c:	08007055 	.word	0x08007055
 8006fa0:	08007055 	.word	0x08007055
 8006fa4:	08007055 	.word	0x08007055
 8006fa8:	08006fe3 	.word	0x08006fe3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fac:	f107 0320 	add.w	r3, r7, #32
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fd fba1 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fba:	e04e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fbc:	f107 0314 	add.w	r3, r7, #20
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fd fd03 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fca:	e046      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fcc:	f107 0308 	add.w	r3, r7, #8
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fd fe65 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fda:	e03e      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006fdc:	4b76      	ldr	r3, [pc, #472]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8006fde:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fe0:	e03b      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fe2:	4b74      	ldr	r3, [pc, #464]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fe8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fee:	4b71      	ldr	r3, [pc, #452]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d10c      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007000:	4b6c      	ldr	r3, [pc, #432]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	08db      	lsrs	r3, r3, #3
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	4a6c      	ldr	r2, [pc, #432]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
 8007012:	e01e      	b.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007014:	4b67      	ldr	r3, [pc, #412]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800701c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007020:	d106      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007028:	d102      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800702a:	4b65      	ldr	r3, [pc, #404]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
 800702e:	e010      	b.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007030:	4b60      	ldr	r3, [pc, #384]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800703c:	d106      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007044:	d102      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007046:	4b5f      	ldr	r3, [pc, #380]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007048:	637b      	str	r3, [r7, #52]	; 0x34
 800704a:	e002      	b.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007050:	e003      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8007052:	e002      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007058:	bf00      	nop
          }
        }
        break;
 800705a:	e2d6      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800705c:	4b55      	ldr	r3, [pc, #340]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800705e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007062:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007066:	633b      	str	r3, [r7, #48]	; 0x30
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706e:	d031      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007076:	d866      	bhi.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	2bc0      	cmp	r3, #192	; 0xc0
 800707c:	d027      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	2bc0      	cmp	r3, #192	; 0xc0
 8007082:	d860      	bhi.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d019      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	2b80      	cmp	r3, #128	; 0x80
 800708e:	d85a      	bhi.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	2b40      	cmp	r3, #64	; 0x40
 800709a:	d008      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800709c:	e053      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800709e:	f107 0320 	add.w	r3, r7, #32
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fd fb28 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070ac:	e04e      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ae:	f107 0314 	add.w	r3, r7, #20
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fd fc8a 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070bc:	e046      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070be:	f107 0308 	add.w	r3, r7, #8
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd fdec 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070cc:	e03e      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80070ce:	4b3a      	ldr	r3, [pc, #232]	; (80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070d2:	e03b      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070d4:	4b37      	ldr	r3, [pc, #220]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80070d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070e0:	4b34      	ldr	r3, [pc, #208]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d10c      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d109      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070f2:	4b30      	ldr	r3, [pc, #192]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	08db      	lsrs	r3, r3, #3
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	4a2f      	ldr	r2, [pc, #188]	; (80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80070fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
 8007104:	e01e      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007106:	4b2b      	ldr	r3, [pc, #172]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800710e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007112:	d106      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711a:	d102      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800711c:	4b28      	ldr	r3, [pc, #160]	; (80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
 8007120:	e010      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007122:	4b24      	ldr	r3, [pc, #144]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800712e:	d106      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007136:	d102      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007138:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800713a:	637b      	str	r3, [r7, #52]	; 0x34
 800713c:	e002      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007142:	e003      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007144:	e002      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800714a:	bf00      	nop
          }
        }
        break;
 800714c:	e25d      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800714e:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007154:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007158:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2b00      	cmp	r3, #0
 800715e:	d103      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007160:	f7fb fb14 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 8007164:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007166:	e250      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007168:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007174:	d10b      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800717c:	d107      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800717e:	f107 0314 	add.w	r3, r7, #20
 8007182:	4618      	mov	r0, r3
 8007184:	f7fd fc22 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
 800718c:	e04f      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800718e:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800719a:	d115      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a2:	d111      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071a4:	f107 0308 	add.w	r3, r7, #8
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fd fd79 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
 80071b2:	e03c      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80071b4:	44020c00 	.word	0x44020c00
 80071b8:	00bb8000 	.word	0x00bb8000
 80071bc:	03d09000 	.word	0x03d09000
 80071c0:	003d0900 	.word	0x003d0900
 80071c4:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80071c8:	4b94      	ldr	r3, [pc, #592]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d10d      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80071da:	d109      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071dc:	4b8f      	ldr	r3, [pc, #572]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	08db      	lsrs	r3, r3, #3
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	4a8e      	ldr	r2, [pc, #568]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
 80071ee:	e01e      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80071f0:	4b8a      	ldr	r3, [pc, #552]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fc:	d106      	bne.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007204:	d102      	bne.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007206:	4b87      	ldr	r3, [pc, #540]	; (8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
 800720a:	e010      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800720c:	4b83      	ldr	r3, [pc, #524]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007218:	d106      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007220:	d102      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007222:	4b81      	ldr	r3, [pc, #516]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
 8007226:	e002      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800722c:	e1ed      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800722e:	e1ec      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007230:	4b7a      	ldr	r3, [pc, #488]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007236:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800723a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007242:	f7fb fab9 	bl	80027b8 <HAL_RCC_GetPCLK3Freq>
 8007246:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007248:	e1df      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800724a:	4b74      	ldr	r3, [pc, #464]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007256:	d10b      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725e:	d107      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4618      	mov	r0, r3
 8007266:	f7fd fbb1 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
 800726e:	e045      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007270:	4b6a      	ldr	r3, [pc, #424]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800727c:	d10b      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007284:	d107      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007286:	f107 0308 	add.w	r3, r7, #8
 800728a:	4618      	mov	r0, r3
 800728c:	f7fd fd08 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
 8007294:	e032      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007296:	4b61      	ldr	r3, [pc, #388]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d10d      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072a8:	d109      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072aa:	4b5c      	ldr	r3, [pc, #368]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	08db      	lsrs	r3, r3, #3
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	4a5a      	ldr	r2, [pc, #360]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80072b6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
 80072bc:	e01e      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80072be:	4b57      	ldr	r3, [pc, #348]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ca:	d106      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d2:	d102      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80072d4:	4b53      	ldr	r3, [pc, #332]	; (8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80072d6:	637b      	str	r3, [r7, #52]	; 0x34
 80072d8:	e010      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80072da:	4b50      	ldr	r3, [pc, #320]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072e6:	d106      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80072ee:	d102      	bne.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80072f0:	4b4d      	ldr	r3, [pc, #308]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
 80072f4:	e002      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072fa:	e186      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072fc:	e185      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80072fe:	4b47      	ldr	r3, [pc, #284]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007304:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007308:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	2b00      	cmp	r3, #0
 800730e:	d103      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007310:	f7fb fa3c 	bl	800278c <HAL_RCC_GetPCLK2Freq>
 8007314:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007316:	e178      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007318:	4b40      	ldr	r3, [pc, #256]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007324:	d10b      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732c:	d107      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800732e:	f107 0314 	add.w	r3, r7, #20
 8007332:	4618      	mov	r0, r3
 8007334:	f7fd fb4a 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
 800733c:	e045      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800733e:	4b37      	ldr	r3, [pc, #220]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734a:	d10b      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007352:	d107      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007354:	f107 0308 	add.w	r3, r7, #8
 8007358:	4618      	mov	r0, r3
 800735a:	f7fd fca1 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	e032      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007364:	4b2d      	ldr	r3, [pc, #180]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b02      	cmp	r3, #2
 800736e:	d10d      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007376:	d109      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007378:	4b28      	ldr	r3, [pc, #160]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	08db      	lsrs	r3, r3, #3
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	4a27      	ldr	r2, [pc, #156]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
 800738a:	e01e      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800738c:	4b23      	ldr	r3, [pc, #140]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007398:	d106      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073a0:	d102      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80073a2:	4b20      	ldr	r3, [pc, #128]	; (8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80073a4:	637b      	str	r3, [r7, #52]	; 0x34
 80073a6:	e010      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80073a8:	4b1c      	ldr	r3, [pc, #112]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b4:	d106      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80073bc:	d102      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80073be:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
 80073c2:	e002      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073c8:	e11f      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073ca:	e11e      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80073cc:	4b13      	ldr	r3, [pc, #76]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80073ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	633b      	str	r3, [r7, #48]	; 0x30
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d85f      	bhi.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	080073f5 	.word	0x080073f5
 80073e8:	080073fd 	.word	0x080073fd
 80073ec:	0800740d 	.word	0x0800740d
 80073f0:	0800742d 	.word	0x0800742d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80073f4:	f7fb f998 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 80073f8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80073fa:	e053      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073fc:	f107 0320 	add.w	r3, r7, #32
 8007400:	4618      	mov	r0, r3
 8007402:	f7fd f979 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800740a:	e04b      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800740c:	f107 0314 	add.w	r3, r7, #20
 8007410:	4618      	mov	r0, r3
 8007412:	f7fd fadb 	bl	80049cc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800741a:	e043      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800741c:	44020c00 	.word	0x44020c00
 8007420:	03d09000 	.word	0x03d09000
 8007424:	003d0900 	.word	0x003d0900
 8007428:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800742c:	4b79      	ldr	r3, [pc, #484]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800742e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007432:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007438:	4b76      	ldr	r3, [pc, #472]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b02      	cmp	r3, #2
 8007442:	d10c      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800744a:	4b72      	ldr	r3, [pc, #456]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	08db      	lsrs	r3, r3, #3
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	4a70      	ldr	r2, [pc, #448]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007456:	fa22 f303 	lsr.w	r3, r2, r3
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
 800745c:	e01e      	b.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800745e:	4b6d      	ldr	r3, [pc, #436]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746a:	d106      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007472:	d102      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007474:	4b69      	ldr	r3, [pc, #420]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007476:	637b      	str	r3, [r7, #52]	; 0x34
 8007478:	e010      	b.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800747a:	4b66      	ldr	r3, [pc, #408]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007486:	d106      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800748e:	d102      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007490:	4b63      	ldr	r3, [pc, #396]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
 8007494:	e002      	b.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800749a:	e003      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800749c:	e002      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074a2:	bf00      	nop
          }
        }
        break;
 80074a4:	e0b1      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80074a6:	4b5b      	ldr	r3, [pc, #364]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074b0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80074b2:	4b58      	ldr	r3, [pc, #352]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d106      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
 80074cc:	e01f      	b.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80074ce:	4b51      	ldr	r3, [pc, #324]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074dc:	d106      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d103      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80074e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ea:	e010      	b.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80074ec:	4b49      	ldr	r3, [pc, #292]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f8:	d106      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b80      	cmp	r3, #128	; 0x80
 80074fe:	d103      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007500:	f248 0312 	movw	r3, #32786	; 0x8012
 8007504:	637b      	str	r3, [r7, #52]	; 0x34
 8007506:	e002      	b.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800750c:	e07d      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800750e:	e07c      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007510:	4b40      	ldr	r3, [pc, #256]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007516:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800751a:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800751c:	4b3d      	ldr	r3, [pc, #244]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007528:	d105      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007530:	4b3c      	ldr	r3, [pc, #240]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007532:	637b      	str	r3, [r7, #52]	; 0x34
 8007534:	e031      	b.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007536:	4b37      	ldr	r3, [pc, #220]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007542:	d10a      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	2b10      	cmp	r3, #16
 8007548:	d107      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800754a:	f107 0320 	add.w	r3, r7, #32
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd f8d2 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
 8007558:	e01f      	b.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800755a:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800755c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b02      	cmp	r3, #2
 8007566:	d106      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	2b20      	cmp	r3, #32
 800756c:	d103      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800756e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007572:	637b      	str	r3, [r7, #52]	; 0x34
 8007574:	e011      	b.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007576:	4b27      	ldr	r3, [pc, #156]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800757c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007584:	d106      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2b30      	cmp	r3, #48	; 0x30
 800758a:	d103      	bne.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800758c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007590:	637b      	str	r3, [r7, #52]	; 0x34
 8007592:	e002      	b.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007598:	e037      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800759a:	e036      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800759c:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800759e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80075a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075a6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	2b10      	cmp	r3, #16
 80075ac:	d107      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ae:	f107 0320 	add.w	r3, r7, #32
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fd f8a0 	bl	80046f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80075bc:	e025      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80075be:	4b15      	ldr	r3, [pc, #84]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ca:	d10a      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d107      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075d2:	f107 0308 	add.w	r3, r7, #8
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fd fb62 	bl	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
 80075e0:	e00f      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80075e2:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ee:	d105      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2b30      	cmp	r3, #48	; 0x30
 80075f4:	d102      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
 80075fa:	e002      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007600:	e003      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007602:	e002      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007608:	bf00      	nop
    }
  }

  return (frequency);
 800760a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800760c:	4618      	mov	r0, r3
 800760e:	373c      	adds	r7, #60	; 0x3c
 8007610:	46bd      	mov	sp, r7
 8007612:	bd90      	pop	{r4, r7, pc}
 8007614:	44020c00 	.word	0x44020c00
 8007618:	03d09000 	.word	0x03d09000
 800761c:	003d0900 	.word	0x003d0900
 8007620:	017d7840 	.word	0x017d7840
 8007624:	02dc6c00 	.word	0x02dc6c00

08007628 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007630:	4b48      	ldr	r3, [pc, #288]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a47      	ldr	r2, [pc, #284]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 8007636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800763a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800763c:	f7f9 feda 	bl	80013f4 <HAL_GetTick>
 8007640:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007642:	e008      	b.n	8007656 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007644:	f7f9 fed6 	bl	80013f4 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e07a      	b.n	800774c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007656:	4b3f      	ldr	r3, [pc, #252]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007662:	4b3c      	ldr	r3, [pc, #240]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800766a:	f023 0303 	bic.w	r3, r3, #3
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6811      	ldr	r1, [r2, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6852      	ldr	r2, [r2, #4]
 8007676:	0212      	lsls	r2, r2, #8
 8007678:	430a      	orrs	r2, r1
 800767a:	4936      	ldr	r1, [pc, #216]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 800767c:	4313      	orrs	r3, r2
 800767e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	3b01      	subs	r3, #1
 8007686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	3b01      	subs	r3, #1
 8007690:	025b      	lsls	r3, r3, #9
 8007692:	b29b      	uxth	r3, r3
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	3b01      	subs	r3, #1
 800769c:	041b      	lsls	r3, r3, #16
 800769e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076b0:	4928      	ldr	r1, [pc, #160]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80076b6:	4b27      	ldr	r3, [pc, #156]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	f023 020c 	bic.w	r2, r3, #12
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	4924      	ldr	r1, [pc, #144]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80076c8:	4b22      	ldr	r3, [pc, #136]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	f023 0220 	bic.w	r2, r3, #32
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	491f      	ldr	r1, [pc, #124]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80076da:	4b1e      	ldr	r3, [pc, #120]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	491c      	ldr	r1, [pc, #112]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80076e8:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	4a19      	ldr	r2, [pc, #100]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076ee:	f023 0310 	bic.w	r3, r3, #16
 80076f2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80076f4:	4b17      	ldr	r3, [pc, #92]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 80076f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6a12      	ldr	r2, [r2, #32]
 8007704:	00d2      	lsls	r2, r2, #3
 8007706:	4913      	ldr	r1, [pc, #76]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800770c:	4b11      	ldr	r3, [pc, #68]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	4a10      	ldr	r2, [pc, #64]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 8007712:	f043 0310 	orr.w	r3, r3, #16
 8007716:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007718:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a0d      	ldr	r2, [pc, #52]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 800771e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007722:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007724:	f7f9 fe66 	bl	80013f4 <HAL_GetTick>
 8007728:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800772a:	e008      	b.n	800773e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800772c:	f7f9 fe62 	bl	80013f4 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e006      	b.n	800774c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <RCCEx_PLL2_Config+0x12c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f0      	beq.n	800772c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800774a:	2300      	movs	r3, #0

}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	44020c00 	.word	0x44020c00

08007758 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007760:	4b48      	ldr	r3, [pc, #288]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a47      	ldr	r2, [pc, #284]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800776a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800776c:	f7f9 fe42 	bl	80013f4 <HAL_GetTick>
 8007770:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007772:	e008      	b.n	8007786 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007774:	f7f9 fe3e 	bl	80013f4 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d901      	bls.n	8007786 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e07a      	b.n	800787c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007786:	4b3f      	ldr	r3, [pc, #252]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1f0      	bne.n	8007774 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007792:	4b3c      	ldr	r3, [pc, #240]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800779a:	f023 0303 	bic.w	r3, r3, #3
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6811      	ldr	r1, [r2, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6852      	ldr	r2, [r2, #4]
 80077a6:	0212      	lsls	r2, r2, #8
 80077a8:	430a      	orrs	r2, r1
 80077aa:	4936      	ldr	r1, [pc, #216]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	630b      	str	r3, [r1, #48]	; 0x30
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	3b01      	subs	r3, #1
 80077c0:	025b      	lsls	r3, r3, #9
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	041b      	lsls	r3, r3, #16
 80077ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	3b01      	subs	r3, #1
 80077da:	061b      	lsls	r3, r3, #24
 80077dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077e0:	4928      	ldr	r1, [pc, #160]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077e6:	4b27      	ldr	r3, [pc, #156]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	f023 020c 	bic.w	r2, r3, #12
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	4924      	ldr	r1, [pc, #144]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80077f8:	4b22      	ldr	r3, [pc, #136]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	f023 0220 	bic.w	r2, r3, #32
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	491f      	ldr	r1, [pc, #124]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007806:	4313      	orrs	r3, r2
 8007808:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800780a:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 800780c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	491c      	ldr	r1, [pc, #112]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007814:	4313      	orrs	r3, r2
 8007816:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007818:	4b1a      	ldr	r3, [pc, #104]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	4a19      	ldr	r2, [pc, #100]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 800781e:	f023 0310 	bic.w	r3, r3, #16
 8007822:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007824:	4b17      	ldr	r3, [pc, #92]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800782c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6a12      	ldr	r2, [r2, #32]
 8007834:	00d2      	lsls	r2, r2, #3
 8007836:	4913      	ldr	r1, [pc, #76]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007838:	4313      	orrs	r3, r2
 800783a:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800783c:	4b11      	ldr	r3, [pc, #68]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	4a10      	ldr	r2, [pc, #64]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007842:	f043 0310 	orr.w	r3, r3, #16
 8007846:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007848:	4b0e      	ldr	r3, [pc, #56]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a0d      	ldr	r2, [pc, #52]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 800784e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007852:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007854:	f7f9 fdce 	bl	80013f4 <HAL_GetTick>
 8007858:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800785a:	e008      	b.n	800786e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800785c:	f7f9 fdca 	bl	80013f4 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e006      	b.n	800787c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <RCCEx_PLL3_Config+0x12c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0f0      	beq.n	800785c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	44020c00 	.word	0x44020c00

08007888 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e162      	b.n	8007b60 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a70      	ldr	r2, [pc, #448]	; (8007a60 <HAL_SPI_Init+0x1d8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <HAL_SPI_Init+0x4e>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6e      	ldr	r2, [pc, #440]	; (8007a64 <HAL_SPI_Init+0x1dc>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <HAL_SPI_Init+0x4e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a6d      	ldr	r2, [pc, #436]	; (8007a68 <HAL_SPI_Init+0x1e0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <HAL_SPI_Init+0x4e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a6b      	ldr	r2, [pc, #428]	; (8007a6c <HAL_SPI_Init+0x1e4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_SPI_Init+0x4e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a6a      	ldr	r2, [pc, #424]	; (8007a70 <HAL_SPI_Init+0x1e8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <HAL_SPI_Init+0x4e>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a68      	ldr	r2, [pc, #416]	; (8007a74 <HAL_SPI_Init+0x1ec>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	e000      	b.n	80078d8 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80078d6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a5f      	ldr	r2, [pc, #380]	; (8007a60 <HAL_SPI_Init+0x1d8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d018      	beq.n	800791a <HAL_SPI_Init+0x92>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a5d      	ldr	r2, [pc, #372]	; (8007a64 <HAL_SPI_Init+0x1dc>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <HAL_SPI_Init+0x92>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a5c      	ldr	r2, [pc, #368]	; (8007a68 <HAL_SPI_Init+0x1e0>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00e      	beq.n	800791a <HAL_SPI_Init+0x92>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a5a      	ldr	r2, [pc, #360]	; (8007a6c <HAL_SPI_Init+0x1e4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d009      	beq.n	800791a <HAL_SPI_Init+0x92>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a59      	ldr	r2, [pc, #356]	; (8007a70 <HAL_SPI_Init+0x1e8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d004      	beq.n	800791a <HAL_SPI_Init+0x92>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a57      	ldr	r2, [pc, #348]	; (8007a74 <HAL_SPI_Init+0x1ec>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d105      	bne.n	8007926 <HAL_SPI_Init+0x9e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d901      	bls.n	8007926 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e11c      	b.n	8007b60 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fc32 	bl	8008190 <SPI_GetPacketSize>
 800792c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a4b      	ldr	r2, [pc, #300]	; (8007a60 <HAL_SPI_Init+0x1d8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d018      	beq.n	800796a <HAL_SPI_Init+0xe2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a49      	ldr	r2, [pc, #292]	; (8007a64 <HAL_SPI_Init+0x1dc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <HAL_SPI_Init+0xe2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a48      	ldr	r2, [pc, #288]	; (8007a68 <HAL_SPI_Init+0x1e0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00e      	beq.n	800796a <HAL_SPI_Init+0xe2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a46      	ldr	r2, [pc, #280]	; (8007a6c <HAL_SPI_Init+0x1e4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d009      	beq.n	800796a <HAL_SPI_Init+0xe2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a45      	ldr	r2, [pc, #276]	; (8007a70 <HAL_SPI_Init+0x1e8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d004      	beq.n	800796a <HAL_SPI_Init+0xe2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a43      	ldr	r2, [pc, #268]	; (8007a74 <HAL_SPI_Init+0x1ec>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d102      	bne.n	8007970 <HAL_SPI_Init+0xe8>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2b08      	cmp	r3, #8
 800796e:	d820      	bhi.n	80079b2 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007974:	4a40      	ldr	r2, [pc, #256]	; (8007a78 <HAL_SPI_Init+0x1f0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d018      	beq.n	80079ac <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a3f      	ldr	r2, [pc, #252]	; (8007a7c <HAL_SPI_Init+0x1f4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d013      	beq.n	80079ac <HAL_SPI_Init+0x124>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a3d      	ldr	r2, [pc, #244]	; (8007a80 <HAL_SPI_Init+0x1f8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00e      	beq.n	80079ac <HAL_SPI_Init+0x124>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a3c      	ldr	r2, [pc, #240]	; (8007a84 <HAL_SPI_Init+0x1fc>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d009      	beq.n	80079ac <HAL_SPI_Init+0x124>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a3a      	ldr	r2, [pc, #232]	; (8007a88 <HAL_SPI_Init+0x200>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d004      	beq.n	80079ac <HAL_SPI_Init+0x124>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a39      	ldr	r2, [pc, #228]	; (8007a8c <HAL_SPI_Init+0x204>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d104      	bne.n	80079b6 <HAL_SPI_Init+0x12e>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b10      	cmp	r3, #16
 80079b0:	d901      	bls.n	80079b6 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e0d4      	b.n	8007b60 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7f9 f9b4 	bl	8000d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0201 	bic.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80079f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079fc:	d119      	bne.n	8007a32 <HAL_SPI_Init+0x1aa>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a06:	d103      	bne.n	8007a10 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10c      	bne.n	8007a32 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a20:	d107      	bne.n	8007a32 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d028      	beq.n	8007a90 <HAL_SPI_Init+0x208>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	2b06      	cmp	r3, #6
 8007a44:	d924      	bls.n	8007a90 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	e020      	b.n	8007aa0 <HAL_SPI_Init+0x218>
 8007a5e:	bf00      	nop
 8007a60:	40014c00 	.word	0x40014c00
 8007a64:	50014c00 	.word	0x50014c00
 8007a68:	44002000 	.word	0x44002000
 8007a6c:	54002000 	.word	0x54002000
 8007a70:	40015000 	.word	0x40015000
 8007a74:	50015000 	.word	0x50015000
 8007a78:	40013000 	.word	0x40013000
 8007a7c:	50013000 	.word	0x50013000
 8007a80:	40003800 	.word	0x40003800
 8007a84:	50003800 	.word	0x50003800
 8007a88:	40003c00 	.word	0x40003c00
 8007a8c:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a9e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69da      	ldr	r2, [r3, #28]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab2:	ea42 0103 	orr.w	r1, r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b00:	431a      	orrs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0c:	ea42 0103 	orr.w	r1, r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0201 	bic.w	r2, r2, #1
 8007b2a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08c      	sub	sp, #48	; 0x30
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3320      	adds	r3, #32
 8007b82:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3330      	adds	r3, #48	; 0x30
 8007b8a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <HAL_SPI_TransmitReceive+0x32>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e227      	b.n	8007fea <HAL_SPI_TransmitReceive+0x482>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ba2:	f7f9 fc27 	bl	80013f4 <HAL_GetTick>
 8007ba6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8007ba8:	887b      	ldrh	r3, [r7, #2]
 8007baa:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d009      	beq.n	8007bd0 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bce:	e20c      	b.n	8007fea <HAL_SPI_TransmitReceive+0x482>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_SPI_TransmitReceive+0x7a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <HAL_SPI_TransmitReceive+0x7a>
 8007bdc:	887b      	ldrh	r3, [r7, #2]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bf4:	e1f9      	b.n	8007fea <HAL_SPI_TransmitReceive+0x482>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2205      	movs	r2, #5
 8007bfa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	887a      	ldrh	r2, [r7, #2]
 8007c18:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	887a      	ldrh	r2, [r7, #2]
 8007c26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	887a      	ldrh	r2, [r7, #2]
 8007c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007c4c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	0c1b      	lsrs	r3, r3, #16
 8007c56:	041b      	lsls	r3, r3, #16
 8007c58:	8879      	ldrh	r1, [r7, #2]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0201 	orr.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c7a:	d107      	bne.n	8007c8c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	2b0f      	cmp	r3, #15
 8007c92:	f240 8090 	bls.w	8007db6 <HAL_SPI_TransmitReceive+0x24e>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a81      	ldr	r2, [pc, #516]	; (8007ea0 <HAL_SPI_TransmitReceive+0x338>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	f000 8083 	beq.w	8007da8 <HAL_SPI_TransmitReceive+0x240>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a7f      	ldr	r2, [pc, #508]	; (8007ea4 <HAL_SPI_TransmitReceive+0x33c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d07d      	beq.n	8007da8 <HAL_SPI_TransmitReceive+0x240>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a7d      	ldr	r2, [pc, #500]	; (8007ea8 <HAL_SPI_TransmitReceive+0x340>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d078      	beq.n	8007da8 <HAL_SPI_TransmitReceive+0x240>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a7c      	ldr	r2, [pc, #496]	; (8007eac <HAL_SPI_TransmitReceive+0x344>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d073      	beq.n	8007da8 <HAL_SPI_TransmitReceive+0x240>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a7a      	ldr	r2, [pc, #488]	; (8007eb0 <HAL_SPI_TransmitReceive+0x348>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d06e      	beq.n	8007da8 <HAL_SPI_TransmitReceive+0x240>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a79      	ldr	r2, [pc, #484]	; (8007eb4 <HAL_SPI_TransmitReceive+0x34c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d170      	bne.n	8007db6 <HAL_SPI_TransmitReceive+0x24e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007cd4:	e068      	b.n	8007da8 <HAL_SPI_TransmitReceive+0x240>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d11a      	bne.n	8007d1a <HAL_SPI_TransmitReceive+0x1b2>
 8007ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d017      	beq.n	8007d1a <HAL_SPI_TransmitReceive+0x1b2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6812      	ldr	r2, [r2, #0]
 8007cf4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d18:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	695a      	ldr	r2, [r3, #20]
 8007d20:	f248 0308 	movw	r3, #32776	; 0x8008
 8007d24:	4013      	ands	r3, r2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d01a      	beq.n	8007d60 <HAL_SPI_TransmitReceive+0x1f8>
 8007d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d017      	beq.n	8007d60 <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d3a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d40:	1d1a      	adds	r2, r3, #4
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007d5e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d60:	f7f9 fb48 	bl	80013f4 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d803      	bhi.n	8007d78 <HAL_SPI_TransmitReceive+0x210>
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d102      	bne.n	8007d7e <HAL_SPI_TransmitReceive+0x216>
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d114      	bne.n	8007da8 <HAL_SPI_TransmitReceive+0x240>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f938 	bl	8007ff4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e120      	b.n	8007fea <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007da8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d193      	bne.n	8007cd6 <HAL_SPI_TransmitReceive+0x16e>
 8007dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d190      	bne.n	8007cd6 <HAL_SPI_TransmitReceive+0x16e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007db4:	e0f2      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	2b07      	cmp	r3, #7
 8007dbc:	f240 80e8 	bls.w	8007f90 <HAL_SPI_TransmitReceive+0x428>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007dc0:	e066      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x328>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d119      	bne.n	8007e04 <HAL_SPI_TransmitReceive+0x29c>
 8007dd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d016      	beq.n	8007e04 <HAL_SPI_TransmitReceive+0x29c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dda:	881a      	ldrh	r2, [r3, #0]
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de4:	1c9a      	adds	r2, r3, #2
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e02:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d11a      	bne.n	8007e48 <HAL_SPI_TransmitReceive+0x2e0>
 8007e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d017      	beq.n	8007e48 <HAL_SPI_TransmitReceive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	8812      	ldrh	r2, [r2, #0]
 8007e20:	b292      	uxth	r2, r2
 8007e22:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e28:	1c9a      	adds	r2, r3, #2
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007e46:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e48:	f7f9 fad4 	bl	80013f4 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d803      	bhi.n	8007e60 <HAL_SPI_TransmitReceive+0x2f8>
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5e:	d102      	bne.n	8007e66 <HAL_SPI_TransmitReceive+0x2fe>
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d114      	bne.n	8007e90 <HAL_SPI_TransmitReceive+0x328>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f8c4 	bl	8007ff4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e0ac      	b.n	8007fea <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d195      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x25a>
 8007e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d192      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x25a>
 8007e9c:	e07e      	b.n	8007f9c <HAL_SPI_TransmitReceive+0x434>
 8007e9e:	bf00      	nop
 8007ea0:	40013000 	.word	0x40013000
 8007ea4:	50013000 	.word	0x50013000
 8007ea8:	40003800 	.word	0x40003800
 8007eac:	50003800 	.word	0x50003800
 8007eb0:	40003c00 	.word	0x40003c00
 8007eb4:	50003c00 	.word	0x50003c00
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d11b      	bne.n	8007efe <HAL_SPI_TransmitReceive+0x396>
 8007ec6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d018      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x396>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3320      	adds	r3, #32
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007efc:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d11d      	bne.n	8007f48 <HAL_SPI_TransmitReceive+0x3e0>
 8007f0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01a      	beq.n	8007f48 <HAL_SPI_TransmitReceive+0x3e0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1e:	7812      	ldrb	r2, [r2, #0]
 8007f20:	b2d2      	uxtb	r2, r2
 8007f22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007f46:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f48:	f7f9 fa54 	bl	80013f4 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d803      	bhi.n	8007f60 <HAL_SPI_TransmitReceive+0x3f8>
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	d102      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x3fe>
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d114      	bne.n	8007f90 <HAL_SPI_TransmitReceive+0x428>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 f844 	bl	8007ff4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e02c      	b.n	8007fea <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d190      	bne.n	8007eb8 <HAL_SPI_TransmitReceive+0x350>
 8007f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d18d      	bne.n	8007eb8 <HAL_SPI_TransmitReceive+0x350>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2108      	movs	r1, #8
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f8c4 	bl	8008134 <SPI_WaitOnFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <HAL_SPI_TransmitReceive+0x45a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb8:	f043 0220 	orr.w	r2, r3, #32
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 f816 	bl	8007ff4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <HAL_SPI_TransmitReceive+0x47e>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e001      	b.n	8007fea <HAL_SPI_TransmitReceive+0x482>
  }
  return errorcode;
 8007fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3728      	adds	r7, #40	; 0x28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop

08007ff4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0208 	orr.w	r2, r2, #8
 8008012:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0210 	orr.w	r2, r2, #16
 8008022:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0201 	bic.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008056:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b04      	cmp	r3, #4
 8008062:	d014      	beq.n	800808e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00f      	beq.n	800808e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008074:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699a      	ldr	r2, [r3, #24]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0220 	orr.w	r2, r2, #32
 800808c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b03      	cmp	r3, #3
 8008098:	d014      	beq.n	80080c4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00f      	beq.n	80080c4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080aa:	f043 0204 	orr.w	r2, r3, #4
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699a      	ldr	r2, [r3, #24]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00f      	beq.n	80080ee <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d4:	f043 0201 	orr.w	r2, r3, #1
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	699a      	ldr	r2, [r3, #24]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00f      	beq.n	8008118 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080fe:	f043 0208 	orr.w	r2, r3, #8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008116:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008128:	bf00      	nop
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008144:	e010      	b.n	8008168 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008146:	f7f9 f955 	bl	80013f4 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d803      	bhi.n	800815e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d102      	bne.n	8008164 <SPI_WaitOnFlagUntilTimeout+0x30>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e00f      	b.n	8008188 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695a      	ldr	r2, [r3, #20]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4013      	ands	r3, r2
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	429a      	cmp	r2, r3
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	429a      	cmp	r2, r3
 8008184:	d0df      	beq.n	8008146 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	3301      	adds	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	3307      	adds	r3, #7
 80081ae:	08db      	lsrs	r3, r3, #3
 80081b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e042      	b.n	800825e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7f8 fe62 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2224      	movs	r2, #36	; 0x24
 80081f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0201 	bic.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f8cb 	bl	80083a4 <UART_SetConfig>
 800820e:	4603      	mov	r3, r0
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e022      	b.n	800825e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 faad 	bl	8008780 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008234:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689a      	ldr	r2, [r3, #8]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008244:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0201 	orr.w	r2, r2, #1
 8008254:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fb34 	bl	80088c4 <UART_CheckIdleState>
 800825c:	4603      	mov	r3, r0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b08a      	sub	sp, #40	; 0x28
 800826a:	af02      	add	r7, sp, #8
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	603b      	str	r3, [r7, #0]
 8008272:	4613      	mov	r3, r2
 8008274:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827c:	2b20      	cmp	r3, #32
 800827e:	f040 808b 	bne.w	8008398 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_UART_Transmit+0x28>
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e083      	b.n	800839a <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829c:	2b80      	cmp	r3, #128	; 0x80
 800829e:	d107      	bne.n	80082b0 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082ae:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2221      	movs	r2, #33	; 0x21
 80082bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082c0:	f7f9 f898 	bl	80013f4 <HAL_GetTick>
 80082c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	88fa      	ldrh	r2, [r7, #6]
 80082ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	88fa      	ldrh	r2, [r7, #6]
 80082d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082de:	d108      	bne.n	80082f2 <HAL_UART_Transmit+0x8c>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	e003      	b.n	80082fa <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082fa:	e030      	b.n	800835e <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2200      	movs	r2, #0
 8008304:	2180      	movs	r1, #128	; 0x80
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fb86 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e03d      	b.n	800839a <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10b      	bne.n	800833c <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008332:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	3302      	adds	r3, #2
 8008338:	61bb      	str	r3, [r7, #24]
 800833a:	e007      	b.n	800834c <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	3301      	adds	r3, #1
 800834a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b01      	subs	r3, #1
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1c8      	bne.n	80082fc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2200      	movs	r2, #0
 8008372:	2140      	movs	r1, #64	; 0x40
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f000 fb4f 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e006      	b.n	800839a <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	e000      	b.n	800839a <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008398:	2302      	movs	r3, #2
  }
}
 800839a:	4618      	mov	r0, r3
 800839c:	3720      	adds	r7, #32
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083a8:	b094      	sub	sp, #80	; 0x50
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	4b78      	ldr	r3, [pc, #480]	; (800859c <UART_SetConfig+0x1f8>)
 80083ba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4971      	ldr	r1, [pc, #452]	; (80085a0 <UART_SetConfig+0x1fc>)
 80083dc:	4019      	ands	r1, r3
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e4:	430b      	orrs	r3, r1
 80083e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	68d9      	ldr	r1, [r3, #12]
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	ea40 0301 	orr.w	r3, r0, r1
 80083fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4b64      	ldr	r3, [pc, #400]	; (800859c <UART_SetConfig+0x1f8>)
 800840c:	429a      	cmp	r2, r3
 800840e:	d009      	beq.n	8008424 <UART_SetConfig+0x80>
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	4b63      	ldr	r3, [pc, #396]	; (80085a4 <UART_SetConfig+0x200>)
 8008416:	429a      	cmp	r2, r3
 8008418:	d004      	beq.n	8008424 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	6a1a      	ldr	r2, [r3, #32]
 800841e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008420:	4313      	orrs	r3, r2
 8008422:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800842e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008438:	430b      	orrs	r3, r1
 800843a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	f023 000f 	bic.w	r0, r3, #15
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	ea40 0301 	orr.w	r3, r0, r1
 8008452:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b53      	ldr	r3, [pc, #332]	; (80085a8 <UART_SetConfig+0x204>)
 800845a:	429a      	cmp	r2, r3
 800845c:	d102      	bne.n	8008464 <UART_SetConfig+0xc0>
 800845e:	2301      	movs	r3, #1
 8008460:	64bb      	str	r3, [r7, #72]	; 0x48
 8008462:	e066      	b.n	8008532 <UART_SetConfig+0x18e>
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	4b50      	ldr	r3, [pc, #320]	; (80085ac <UART_SetConfig+0x208>)
 800846a:	429a      	cmp	r2, r3
 800846c:	d102      	bne.n	8008474 <UART_SetConfig+0xd0>
 800846e:	2302      	movs	r3, #2
 8008470:	64bb      	str	r3, [r7, #72]	; 0x48
 8008472:	e05e      	b.n	8008532 <UART_SetConfig+0x18e>
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4b4d      	ldr	r3, [pc, #308]	; (80085b0 <UART_SetConfig+0x20c>)
 800847a:	429a      	cmp	r2, r3
 800847c:	d102      	bne.n	8008484 <UART_SetConfig+0xe0>
 800847e:	2304      	movs	r3, #4
 8008480:	64bb      	str	r3, [r7, #72]	; 0x48
 8008482:	e056      	b.n	8008532 <UART_SetConfig+0x18e>
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	4b4a      	ldr	r3, [pc, #296]	; (80085b4 <UART_SetConfig+0x210>)
 800848a:	429a      	cmp	r2, r3
 800848c:	d102      	bne.n	8008494 <UART_SetConfig+0xf0>
 800848e:	2308      	movs	r3, #8
 8008490:	64bb      	str	r3, [r7, #72]	; 0x48
 8008492:	e04e      	b.n	8008532 <UART_SetConfig+0x18e>
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	4b47      	ldr	r3, [pc, #284]	; (80085b8 <UART_SetConfig+0x214>)
 800849a:	429a      	cmp	r2, r3
 800849c:	d102      	bne.n	80084a4 <UART_SetConfig+0x100>
 800849e:	2310      	movs	r3, #16
 80084a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a2:	e046      	b.n	8008532 <UART_SetConfig+0x18e>
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	4b44      	ldr	r3, [pc, #272]	; (80085bc <UART_SetConfig+0x218>)
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d102      	bne.n	80084b4 <UART_SetConfig+0x110>
 80084ae:	2320      	movs	r3, #32
 80084b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084b2:	e03e      	b.n	8008532 <UART_SetConfig+0x18e>
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	4b41      	ldr	r3, [pc, #260]	; (80085c0 <UART_SetConfig+0x21c>)
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d102      	bne.n	80084c4 <UART_SetConfig+0x120>
 80084be:	2340      	movs	r3, #64	; 0x40
 80084c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084c2:	e036      	b.n	8008532 <UART_SetConfig+0x18e>
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	4b3e      	ldr	r3, [pc, #248]	; (80085c4 <UART_SetConfig+0x220>)
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d102      	bne.n	80084d4 <UART_SetConfig+0x130>
 80084ce:	2380      	movs	r3, #128	; 0x80
 80084d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084d2:	e02e      	b.n	8008532 <UART_SetConfig+0x18e>
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	4b3b      	ldr	r3, [pc, #236]	; (80085c8 <UART_SetConfig+0x224>)
 80084da:	429a      	cmp	r2, r3
 80084dc:	d103      	bne.n	80084e6 <UART_SetConfig+0x142>
 80084de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084e4:	e025      	b.n	8008532 <UART_SetConfig+0x18e>
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b38      	ldr	r3, [pc, #224]	; (80085cc <UART_SetConfig+0x228>)
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d103      	bne.n	80084f8 <UART_SetConfig+0x154>
 80084f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084f6:	e01c      	b.n	8008532 <UART_SetConfig+0x18e>
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	4b34      	ldr	r3, [pc, #208]	; (80085d0 <UART_SetConfig+0x22c>)
 80084fe:	429a      	cmp	r2, r3
 8008500:	d103      	bne.n	800850a <UART_SetConfig+0x166>
 8008502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008506:	64bb      	str	r3, [r7, #72]	; 0x48
 8008508:	e013      	b.n	8008532 <UART_SetConfig+0x18e>
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4b31      	ldr	r3, [pc, #196]	; (80085d4 <UART_SetConfig+0x230>)
 8008510:	429a      	cmp	r2, r3
 8008512:	d103      	bne.n	800851c <UART_SetConfig+0x178>
 8008514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008518:	64bb      	str	r3, [r7, #72]	; 0x48
 800851a:	e00a      	b.n	8008532 <UART_SetConfig+0x18e>
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b1e      	ldr	r3, [pc, #120]	; (800859c <UART_SetConfig+0x1f8>)
 8008522:	429a      	cmp	r2, r3
 8008524:	d103      	bne.n	800852e <UART_SetConfig+0x18a>
 8008526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800852a:	64bb      	str	r3, [r7, #72]	; 0x48
 800852c:	e001      	b.n	8008532 <UART_SetConfig+0x18e>
 800852e:	2300      	movs	r3, #0
 8008530:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	4b19      	ldr	r3, [pc, #100]	; (800859c <UART_SetConfig+0x1f8>)
 8008538:	429a      	cmp	r2, r3
 800853a:	d005      	beq.n	8008548 <UART_SetConfig+0x1a4>
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	4b18      	ldr	r3, [pc, #96]	; (80085a4 <UART_SetConfig+0x200>)
 8008542:	429a      	cmp	r2, r3
 8008544:	f040 8094 	bne.w	8008670 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800854a:	2200      	movs	r2, #0
 800854c:	623b      	str	r3, [r7, #32]
 800854e:	627a      	str	r2, [r7, #36]	; 0x24
 8008550:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008554:	f7fc fd0e 	bl	8004f74 <HAL_RCCEx_GetPeriphCLKFreq>
 8008558:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800855a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 80f7 	beq.w	8008750 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	4a1c      	ldr	r2, [pc, #112]	; (80085d8 <UART_SetConfig+0x234>)
 8008568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800856c:	461a      	mov	r2, r3
 800856e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008570:	fbb3 f3f2 	udiv	r3, r3, r2
 8008574:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4413      	add	r3, r2
 8008580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008582:	429a      	cmp	r2, r3
 8008584:	d305      	bcc.n	8008592 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800858c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800858e:	429a      	cmp	r2, r3
 8008590:	d924      	bls.n	80085dc <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008598:	e069      	b.n	800866e <UART_SetConfig+0x2ca>
 800859a:	bf00      	nop
 800859c:	44002400 	.word	0x44002400
 80085a0:	cfff69f3 	.word	0xcfff69f3
 80085a4:	54002400 	.word	0x54002400
 80085a8:	40013800 	.word	0x40013800
 80085ac:	40004400 	.word	0x40004400
 80085b0:	40004800 	.word	0x40004800
 80085b4:	40004c00 	.word	0x40004c00
 80085b8:	40005000 	.word	0x40005000
 80085bc:	40006400 	.word	0x40006400
 80085c0:	40007800 	.word	0x40007800
 80085c4:	40007c00 	.word	0x40007c00
 80085c8:	40008000 	.word	0x40008000
 80085cc:	40006800 	.word	0x40006800
 80085d0:	40006c00 	.word	0x40006c00
 80085d4:	40008400 	.word	0x40008400
 80085d8:	08009ea0 	.word	0x08009ea0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085de:	2200      	movs	r2, #0
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	61fa      	str	r2, [r7, #28]
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	4a64      	ldr	r2, [pc, #400]	; (800877c <UART_SetConfig+0x3d8>)
 80085ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	2200      	movs	r2, #0
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	617a      	str	r2, [r7, #20]
 80085f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80085fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80085fe:	f7f7 fe45 	bl	800028c <__aeabi_uldivmod>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4610      	mov	r0, r2
 8008608:	4619      	mov	r1, r3
 800860a:	f04f 0200 	mov.w	r2, #0
 800860e:	f04f 0300 	mov.w	r3, #0
 8008612:	020b      	lsls	r3, r1, #8
 8008614:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008618:	0202      	lsls	r2, r0, #8
 800861a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800861c:	6849      	ldr	r1, [r1, #4]
 800861e:	0849      	lsrs	r1, r1, #1
 8008620:	2000      	movs	r0, #0
 8008622:	460c      	mov	r4, r1
 8008624:	4605      	mov	r5, r0
 8008626:	eb12 0804 	adds.w	r8, r2, r4
 800862a:	eb43 0905 	adc.w	r9, r3, r5
 800862e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	60bb      	str	r3, [r7, #8]
 8008636:	60fa      	str	r2, [r7, #12]
 8008638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800863c:	4640      	mov	r0, r8
 800863e:	4649      	mov	r1, r9
 8008640:	f7f7 fe24 	bl	800028c <__aeabi_uldivmod>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4613      	mov	r3, r2
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800864c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008652:	d308      	bcc.n	8008666 <UART_SetConfig+0x2c2>
 8008654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800865a:	d204      	bcs.n	8008666 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008662:	60da      	str	r2, [r3, #12]
 8008664:	e003      	b.n	800866e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800866c:	e070      	b.n	8008750 <UART_SetConfig+0x3ac>
 800866e:	e06f      	b.n	8008750 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008678:	d13c      	bne.n	80086f4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800867a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867c:	2200      	movs	r2, #0
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	607a      	str	r2, [r7, #4]
 8008682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008686:	f7fc fc75 	bl	8004f74 <HAL_RCCEx_GetPeriphCLKFreq>
 800868a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800868c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d05e      	beq.n	8008750 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	4a39      	ldr	r2, [pc, #228]	; (800877c <UART_SetConfig+0x3d8>)
 8008698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869c:	461a      	mov	r2, r3
 800869e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086a4:	005a      	lsls	r2, r3, #1
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	085b      	lsrs	r3, r3, #1
 80086ac:	441a      	add	r2, r3
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ba:	2b0f      	cmp	r3, #15
 80086bc:	d916      	bls.n	80086ec <UART_SetConfig+0x348>
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c4:	d212      	bcs.n	80086ec <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f023 030f 	bic.w	r3, r3, #15
 80086ce:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	b29a      	uxth	r2, r3
 80086dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80086de:	4313      	orrs	r3, r2
 80086e0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80086e8:	60da      	str	r2, [r3, #12]
 80086ea:	e031      	b.n	8008750 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80086f2:	e02d      	b.n	8008750 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80086f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f6:	2200      	movs	r2, #0
 80086f8:	469a      	mov	sl, r3
 80086fa:	4693      	mov	fp, r2
 80086fc:	4650      	mov	r0, sl
 80086fe:	4659      	mov	r1, fp
 8008700:	f7fc fc38 	bl	8004f74 <HAL_RCCEx_GetPeriphCLKFreq>
 8008704:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d021      	beq.n	8008750 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	4a1a      	ldr	r2, [pc, #104]	; (800877c <UART_SetConfig+0x3d8>)
 8008712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008716:	461a      	mov	r2, r3
 8008718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871a:	fbb3 f2f2 	udiv	r2, r3, r2
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	441a      	add	r2, r3
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	fbb2 f3f3 	udiv	r3, r2, r3
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008732:	2b0f      	cmp	r3, #15
 8008734:	d909      	bls.n	800874a <UART_SetConfig+0x3a6>
 8008736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873c:	d205      	bcs.n	800874a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800873e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008740:	b29a      	uxth	r2, r3
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60da      	str	r2, [r3, #12]
 8008748:	e002      	b.n	8008750 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	2201      	movs	r2, #1
 8008754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875a:	2201      	movs	r2, #1
 800875c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	2200      	movs	r2, #0
 8008764:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	2200      	movs	r2, #0
 800876a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800876c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008770:	4618      	mov	r0, r3
 8008772:	3750      	adds	r7, #80	; 0x50
 8008774:	46bd      	mov	sp, r7
 8008776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800877a:	bf00      	nop
 800877c:	08009ea0 	.word	0x08009ea0

08008780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	430a      	orrs	r2, r1
 800880e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01a      	beq.n	8008896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800887e:	d10a      	bne.n	8008896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
  }
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b098      	sub	sp, #96	; 0x60
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088d4:	f7f8 fd8e 	bl	80013f4 <HAL_GetTick>
 80088d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d12f      	bne.n	8008948 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088f0:	2200      	movs	r2, #0
 80088f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f88e 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d022      	beq.n	8008948 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008916:	653b      	str	r3, [r7, #80]	; 0x50
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008920:	647b      	str	r3, [r7, #68]	; 0x44
 8008922:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800892e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e6      	bne.n	8008902 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2220      	movs	r2, #32
 8008938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e063      	b.n	8008a10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	2b04      	cmp	r3, #4
 8008954:	d149      	bne.n	80089ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008956:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800895e:	2200      	movs	r2, #0
 8008960:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f857 	bl	8008a18 <UART_WaitOnFlagUntilTimeout>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d03c      	beq.n	80089ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	623b      	str	r3, [r7, #32]
   return(result);
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898e:	633b      	str	r3, [r7, #48]	; 0x30
 8008990:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e6      	bne.n	8008970 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f023 0301 	bic.w	r3, r3, #1
 80089b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c2:	61fa      	str	r2, [r7, #28]
 80089c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	69b9      	ldr	r1, [r7, #24]
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	617b      	str	r3, [r7, #20]
   return(result);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e5      	bne.n	80089a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e012      	b.n	8008a10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3758      	adds	r7, #88	; 0x58
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	603b      	str	r3, [r7, #0]
 8008a24:	4613      	mov	r3, r2
 8008a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a28:	e049      	b.n	8008abe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a30:	d045      	beq.n	8008abe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a32:	f7f8 fcdf 	bl	80013f4 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d302      	bcc.n	8008a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e048      	b.n	8008ade <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d031      	beq.n	8008abe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d110      	bne.n	8008a8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f838 	bl	8008ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2208      	movs	r2, #8
 8008a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e029      	b.n	8008ade <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a98:	d111      	bne.n	8008abe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 f81e 	bl	8008ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e00f      	b.n	8008ade <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	bf0c      	ite	eq
 8008ace:	2301      	moveq	r3, #1
 8008ad0:	2300      	movne	r3, #0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d0a6      	beq.n	8008a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b095      	sub	sp, #84	; 0x54
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e6      	bne.n	8008aee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3308      	adds	r3, #8
 8008b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3308      	adds	r3, #8
 8008b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e3      	bne.n	8008b20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d118      	bne.n	8008b92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f023 0310 	bic.w	r3, r3, #16
 8008b74:	647b      	str	r3, [r7, #68]	; 0x44
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b7e:	61bb      	str	r3, [r7, #24]
 8008b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6979      	ldr	r1, [r7, #20]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e6      	bne.n	8008b60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008ba6:	bf00      	nop
 8008ba8:	3754      	adds	r7, #84	; 0x54
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b085      	sub	sp, #20
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e027      	b.n	8008c18 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2224      	movs	r2, #36	; 0x24
 8008bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0201 	bic.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e02d      	b.n	8008c98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2224      	movs	r2, #36	; 0x24
 8008c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0201 	bic.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f84f 	bl	8008d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e02d      	b.n	8008d14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2224      	movs	r2, #36	; 0x24
 8008cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f811 	bl	8008d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d108      	bne.n	8008d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d3c:	e031      	b.n	8008da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d42:	2308      	movs	r3, #8
 8008d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	0e5b      	lsrs	r3, r3, #25
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	0f5b      	lsrs	r3, r3, #29
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	7b3a      	ldrb	r2, [r7, #12]
 8008d6a:	4911      	ldr	r1, [pc, #68]	; (8008db0 <UARTEx_SetNbDataToProcess+0x94>)
 8008d6c:	5c8a      	ldrb	r2, [r1, r2]
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d72:	7b3a      	ldrb	r2, [r7, #12]
 8008d74:	490f      	ldr	r1, [pc, #60]	; (8008db4 <UARTEx_SetNbDataToProcess+0x98>)
 8008d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	7b7a      	ldrb	r2, [r7, #13]
 8008d88:	4909      	ldr	r1, [pc, #36]	; (8008db0 <UARTEx_SetNbDataToProcess+0x94>)
 8008d8a:	5c8a      	ldrb	r2, [r1, r2]
 8008d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d90:	7b7a      	ldrb	r2, [r7, #13]
 8008d92:	4908      	ldr	r1, [pc, #32]	; (8008db4 <UARTEx_SetNbDataToProcess+0x98>)
 8008d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008da2:	bf00      	nop
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	08009eb8 	.word	0x08009eb8
 8008db4:	08009ec0 	.word	0x08009ec0

08008db8 <__errno>:
 8008db8:	4b01      	ldr	r3, [pc, #4]	; (8008dc0 <__errno+0x8>)
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	2000000c 	.word	0x2000000c

08008dc4 <__libc_init_array>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4d0d      	ldr	r5, [pc, #52]	; (8008dfc <__libc_init_array+0x38>)
 8008dc8:	2600      	movs	r6, #0
 8008dca:	4c0d      	ldr	r4, [pc, #52]	; (8008e00 <__libc_init_array+0x3c>)
 8008dcc:	1b64      	subs	r4, r4, r5
 8008dce:	10a4      	asrs	r4, r4, #2
 8008dd0:	42a6      	cmp	r6, r4
 8008dd2:	d109      	bne.n	8008de8 <__libc_init_array+0x24>
 8008dd4:	4d0b      	ldr	r5, [pc, #44]	; (8008e04 <__libc_init_array+0x40>)
 8008dd6:	2600      	movs	r6, #0
 8008dd8:	4c0b      	ldr	r4, [pc, #44]	; (8008e08 <__libc_init_array+0x44>)
 8008dda:	f001 f831 	bl	8009e40 <_init>
 8008dde:	1b64      	subs	r4, r4, r5
 8008de0:	10a4      	asrs	r4, r4, #2
 8008de2:	42a6      	cmp	r6, r4
 8008de4:	d105      	bne.n	8008df2 <__libc_init_array+0x2e>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dec:	3601      	adds	r6, #1
 8008dee:	4798      	blx	r3
 8008df0:	e7ee      	b.n	8008dd0 <__libc_init_array+0xc>
 8008df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df6:	3601      	adds	r6, #1
 8008df8:	4798      	blx	r3
 8008dfa:	e7f2      	b.n	8008de2 <__libc_init_array+0x1e>
 8008dfc:	08009f68 	.word	0x08009f68
 8008e00:	08009f68 	.word	0x08009f68
 8008e04:	08009f68 	.word	0x08009f68
 8008e08:	08009f6c 	.word	0x08009f6c

08008e0c <memset>:
 8008e0c:	4402      	add	r2, r0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d100      	bne.n	8008e16 <memset+0xa>
 8008e14:	4770      	bx	lr
 8008e16:	f803 1b01 	strb.w	r1, [r3], #1
 8008e1a:	e7f9      	b.n	8008e10 <memset+0x4>

08008e1c <iprintf>:
 8008e1c:	b40f      	push	{r0, r1, r2, r3}
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <iprintf+0x2c>)
 8008e20:	b513      	push	{r0, r1, r4, lr}
 8008e22:	681c      	ldr	r4, [r3, #0]
 8008e24:	b124      	cbz	r4, 8008e30 <iprintf+0x14>
 8008e26:	69a3      	ldr	r3, [r4, #24]
 8008e28:	b913      	cbnz	r3, 8008e30 <iprintf+0x14>
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 fa5c 	bl	80092e8 <__sinit>
 8008e30:	ab05      	add	r3, sp, #20
 8008e32:	9a04      	ldr	r2, [sp, #16]
 8008e34:	68a1      	ldr	r1, [r4, #8]
 8008e36:	4620      	mov	r0, r4
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	f000 fc65 	bl	8009708 <_vfiprintf_r>
 8008e3e:	b002      	add	sp, #8
 8008e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e44:	b004      	add	sp, #16
 8008e46:	4770      	bx	lr
 8008e48:	2000000c 	.word	0x2000000c

08008e4c <_puts_r>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	460e      	mov	r6, r1
 8008e50:	4605      	mov	r5, r0
 8008e52:	b118      	cbz	r0, 8008e5c <_puts_r+0x10>
 8008e54:	6983      	ldr	r3, [r0, #24]
 8008e56:	b90b      	cbnz	r3, 8008e5c <_puts_r+0x10>
 8008e58:	f000 fa46 	bl	80092e8 <__sinit>
 8008e5c:	69ab      	ldr	r3, [r5, #24]
 8008e5e:	68ac      	ldr	r4, [r5, #8]
 8008e60:	b913      	cbnz	r3, 8008e68 <_puts_r+0x1c>
 8008e62:	4628      	mov	r0, r5
 8008e64:	f000 fa40 	bl	80092e8 <__sinit>
 8008e68:	4b2c      	ldr	r3, [pc, #176]	; (8008f1c <_puts_r+0xd0>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d120      	bne.n	8008eb0 <_puts_r+0x64>
 8008e6e:	686c      	ldr	r4, [r5, #4]
 8008e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e72:	07db      	lsls	r3, r3, #31
 8008e74:	d405      	bmi.n	8008e82 <_puts_r+0x36>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	0598      	lsls	r0, r3, #22
 8008e7a:	d402      	bmi.n	8008e82 <_puts_r+0x36>
 8008e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7e:	f000 fad1 	bl	8009424 <__retarget_lock_acquire_recursive>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	0719      	lsls	r1, r3, #28
 8008e86:	d51d      	bpl.n	8008ec4 <_puts_r+0x78>
 8008e88:	6923      	ldr	r3, [r4, #16]
 8008e8a:	b1db      	cbz	r3, 8008ec4 <_puts_r+0x78>
 8008e8c:	3e01      	subs	r6, #1
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e94:	3b01      	subs	r3, #1
 8008e96:	60a3      	str	r3, [r4, #8]
 8008e98:	bb39      	cbnz	r1, 8008eea <_puts_r+0x9e>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	da38      	bge.n	8008f10 <_puts_r+0xc4>
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	210a      	movs	r1, #10
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f848 	bl	8008f38 <__swbuf_r>
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d011      	beq.n	8008ed0 <_puts_r+0x84>
 8008eac:	250a      	movs	r5, #10
 8008eae:	e011      	b.n	8008ed4 <_puts_r+0x88>
 8008eb0:	4b1b      	ldr	r3, [pc, #108]	; (8008f20 <_puts_r+0xd4>)
 8008eb2:	429c      	cmp	r4, r3
 8008eb4:	d101      	bne.n	8008eba <_puts_r+0x6e>
 8008eb6:	68ac      	ldr	r4, [r5, #8]
 8008eb8:	e7da      	b.n	8008e70 <_puts_r+0x24>
 8008eba:	4b1a      	ldr	r3, [pc, #104]	; (8008f24 <_puts_r+0xd8>)
 8008ebc:	429c      	cmp	r4, r3
 8008ebe:	bf08      	it	eq
 8008ec0:	68ec      	ldreq	r4, [r5, #12]
 8008ec2:	e7d5      	b.n	8008e70 <_puts_r+0x24>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 f888 	bl	8008fdc <__swsetup_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d0dd      	beq.n	8008e8c <_puts_r+0x40>
 8008ed0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed6:	07da      	lsls	r2, r3, #31
 8008ed8:	d405      	bmi.n	8008ee6 <_puts_r+0x9a>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	059b      	lsls	r3, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_puts_r+0x9a>
 8008ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee2:	f000 faa0 	bl	8009426 <__retarget_lock_release_recursive>
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da04      	bge.n	8008ef8 <_puts_r+0xac>
 8008eee:	69a2      	ldr	r2, [r4, #24]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	dc06      	bgt.n	8008f02 <_puts_r+0xb6>
 8008ef4:	290a      	cmp	r1, #10
 8008ef6:	d004      	beq.n	8008f02 <_puts_r+0xb6>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	6022      	str	r2, [r4, #0]
 8008efe:	7019      	strb	r1, [r3, #0]
 8008f00:	e7c5      	b.n	8008e8e <_puts_r+0x42>
 8008f02:	4622      	mov	r2, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 f817 	bl	8008f38 <__swbuf_r>
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d1bf      	bne.n	8008e8e <_puts_r+0x42>
 8008f0e:	e7df      	b.n	8008ed0 <_puts_r+0x84>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	250a      	movs	r5, #10
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	6022      	str	r2, [r4, #0]
 8008f18:	701d      	strb	r5, [r3, #0]
 8008f1a:	e7db      	b.n	8008ed4 <_puts_r+0x88>
 8008f1c:	08009eec 	.word	0x08009eec
 8008f20:	08009f0c 	.word	0x08009f0c
 8008f24:	08009ecc 	.word	0x08009ecc

08008f28 <puts>:
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <puts+0xc>)
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	f7ff bf8d 	b.w	8008e4c <_puts_r>
 8008f32:	bf00      	nop
 8008f34:	2000000c 	.word	0x2000000c

08008f38 <__swbuf_r>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	460e      	mov	r6, r1
 8008f3c:	4614      	mov	r4, r2
 8008f3e:	4605      	mov	r5, r0
 8008f40:	b118      	cbz	r0, 8008f4a <__swbuf_r+0x12>
 8008f42:	6983      	ldr	r3, [r0, #24]
 8008f44:	b90b      	cbnz	r3, 8008f4a <__swbuf_r+0x12>
 8008f46:	f000 f9cf 	bl	80092e8 <__sinit>
 8008f4a:	4b21      	ldr	r3, [pc, #132]	; (8008fd0 <__swbuf_r+0x98>)
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	d12b      	bne.n	8008fa8 <__swbuf_r+0x70>
 8008f50:	686c      	ldr	r4, [r5, #4]
 8008f52:	69a3      	ldr	r3, [r4, #24]
 8008f54:	60a3      	str	r3, [r4, #8]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	071a      	lsls	r2, r3, #28
 8008f5a:	d52f      	bpl.n	8008fbc <__swbuf_r+0x84>
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	b36b      	cbz	r3, 8008fbc <__swbuf_r+0x84>
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	b2f6      	uxtb	r6, r6
 8008f64:	6820      	ldr	r0, [r4, #0]
 8008f66:	4637      	mov	r7, r6
 8008f68:	1ac0      	subs	r0, r0, r3
 8008f6a:	6963      	ldr	r3, [r4, #20]
 8008f6c:	4283      	cmp	r3, r0
 8008f6e:	dc04      	bgt.n	8008f7a <__swbuf_r+0x42>
 8008f70:	4621      	mov	r1, r4
 8008f72:	4628      	mov	r0, r5
 8008f74:	f000 f924 	bl	80091c0 <_fflush_r>
 8008f78:	bb30      	cbnz	r0, 8008fc8 <__swbuf_r+0x90>
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	60a3      	str	r3, [r4, #8]
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	1c5a      	adds	r2, r3, #1
 8008f86:	6022      	str	r2, [r4, #0]
 8008f88:	701e      	strb	r6, [r3, #0]
 8008f8a:	6963      	ldr	r3, [r4, #20]
 8008f8c:	4283      	cmp	r3, r0
 8008f8e:	d004      	beq.n	8008f9a <__swbuf_r+0x62>
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	07db      	lsls	r3, r3, #31
 8008f94:	d506      	bpl.n	8008fa4 <__swbuf_r+0x6c>
 8008f96:	2e0a      	cmp	r6, #10
 8008f98:	d104      	bne.n	8008fa4 <__swbuf_r+0x6c>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f000 f90f 	bl	80091c0 <_fflush_r>
 8008fa2:	b988      	cbnz	r0, 8008fc8 <__swbuf_r+0x90>
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <__swbuf_r+0x9c>)
 8008faa:	429c      	cmp	r4, r3
 8008fac:	d101      	bne.n	8008fb2 <__swbuf_r+0x7a>
 8008fae:	68ac      	ldr	r4, [r5, #8]
 8008fb0:	e7cf      	b.n	8008f52 <__swbuf_r+0x1a>
 8008fb2:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <__swbuf_r+0xa0>)
 8008fb4:	429c      	cmp	r4, r3
 8008fb6:	bf08      	it	eq
 8008fb8:	68ec      	ldreq	r4, [r5, #12]
 8008fba:	e7ca      	b.n	8008f52 <__swbuf_r+0x1a>
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f000 f80c 	bl	8008fdc <__swsetup_r>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d0cb      	beq.n	8008f60 <__swbuf_r+0x28>
 8008fc8:	f04f 37ff 	mov.w	r7, #4294967295
 8008fcc:	e7ea      	b.n	8008fa4 <__swbuf_r+0x6c>
 8008fce:	bf00      	nop
 8008fd0:	08009eec 	.word	0x08009eec
 8008fd4:	08009f0c 	.word	0x08009f0c
 8008fd8:	08009ecc 	.word	0x08009ecc

08008fdc <__swsetup_r>:
 8008fdc:	4b32      	ldr	r3, [pc, #200]	; (80090a8 <__swsetup_r+0xcc>)
 8008fde:	b570      	push	{r4, r5, r6, lr}
 8008fe0:	681d      	ldr	r5, [r3, #0]
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	b125      	cbz	r5, 8008ff2 <__swsetup_r+0x16>
 8008fe8:	69ab      	ldr	r3, [r5, #24]
 8008fea:	b913      	cbnz	r3, 8008ff2 <__swsetup_r+0x16>
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 f97b 	bl	80092e8 <__sinit>
 8008ff2:	4b2e      	ldr	r3, [pc, #184]	; (80090ac <__swsetup_r+0xd0>)
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	d10f      	bne.n	8009018 <__swsetup_r+0x3c>
 8008ff8:	686c      	ldr	r4, [r5, #4]
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009000:	0719      	lsls	r1, r3, #28
 8009002:	d42c      	bmi.n	800905e <__swsetup_r+0x82>
 8009004:	06dd      	lsls	r5, r3, #27
 8009006:	d411      	bmi.n	800902c <__swsetup_r+0x50>
 8009008:	2309      	movs	r3, #9
 800900a:	6033      	str	r3, [r6, #0]
 800900c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	81a3      	strh	r3, [r4, #12]
 8009016:	e03e      	b.n	8009096 <__swsetup_r+0xba>
 8009018:	4b25      	ldr	r3, [pc, #148]	; (80090b0 <__swsetup_r+0xd4>)
 800901a:	429c      	cmp	r4, r3
 800901c:	d101      	bne.n	8009022 <__swsetup_r+0x46>
 800901e:	68ac      	ldr	r4, [r5, #8]
 8009020:	e7eb      	b.n	8008ffa <__swsetup_r+0x1e>
 8009022:	4b24      	ldr	r3, [pc, #144]	; (80090b4 <__swsetup_r+0xd8>)
 8009024:	429c      	cmp	r4, r3
 8009026:	bf08      	it	eq
 8009028:	68ec      	ldreq	r4, [r5, #12]
 800902a:	e7e6      	b.n	8008ffa <__swsetup_r+0x1e>
 800902c:	0758      	lsls	r0, r3, #29
 800902e:	d512      	bpl.n	8009056 <__swsetup_r+0x7a>
 8009030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009032:	b141      	cbz	r1, 8009046 <__swsetup_r+0x6a>
 8009034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009038:	4299      	cmp	r1, r3
 800903a:	d002      	beq.n	8009042 <__swsetup_r+0x66>
 800903c:	4630      	mov	r0, r6
 800903e:	f000 fa59 	bl	80094f4 <_free_r>
 8009042:	2300      	movs	r3, #0
 8009044:	6363      	str	r3, [r4, #52]	; 0x34
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	2300      	movs	r3, #0
 8009050:	6063      	str	r3, [r4, #4]
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f043 0308 	orr.w	r3, r3, #8
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	6923      	ldr	r3, [r4, #16]
 8009060:	b94b      	cbnz	r3, 8009076 <__swsetup_r+0x9a>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800906c:	d003      	beq.n	8009076 <__swsetup_r+0x9a>
 800906e:	4621      	mov	r1, r4
 8009070:	4630      	mov	r0, r6
 8009072:	f000 f9ff 	bl	8009474 <__smakebuf_r>
 8009076:	89a0      	ldrh	r0, [r4, #12]
 8009078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800907c:	f010 0301 	ands.w	r3, r0, #1
 8009080:	d00a      	beq.n	8009098 <__swsetup_r+0xbc>
 8009082:	2300      	movs	r3, #0
 8009084:	60a3      	str	r3, [r4, #8]
 8009086:	6963      	ldr	r3, [r4, #20]
 8009088:	425b      	negs	r3, r3
 800908a:	61a3      	str	r3, [r4, #24]
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	b943      	cbnz	r3, 80090a2 <__swsetup_r+0xc6>
 8009090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009094:	d1ba      	bne.n	800900c <__swsetup_r+0x30>
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	0781      	lsls	r1, r0, #30
 800909a:	bf58      	it	pl
 800909c:	6963      	ldrpl	r3, [r4, #20]
 800909e:	60a3      	str	r3, [r4, #8]
 80090a0:	e7f4      	b.n	800908c <__swsetup_r+0xb0>
 80090a2:	2000      	movs	r0, #0
 80090a4:	e7f7      	b.n	8009096 <__swsetup_r+0xba>
 80090a6:	bf00      	nop
 80090a8:	2000000c 	.word	0x2000000c
 80090ac:	08009eec 	.word	0x08009eec
 80090b0:	08009f0c 	.word	0x08009f0c
 80090b4:	08009ecc 	.word	0x08009ecc

080090b8 <__sflush_r>:
 80090b8:	898a      	ldrh	r2, [r1, #12]
 80090ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	4605      	mov	r5, r0
 80090c0:	0710      	lsls	r0, r2, #28
 80090c2:	460c      	mov	r4, r1
 80090c4:	d458      	bmi.n	8009178 <__sflush_r+0xc0>
 80090c6:	684b      	ldr	r3, [r1, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dc05      	bgt.n	80090d8 <__sflush_r+0x20>
 80090cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dc02      	bgt.n	80090d8 <__sflush_r+0x20>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090da:	2e00      	cmp	r6, #0
 80090dc:	d0f9      	beq.n	80090d2 <__sflush_r+0x1a>
 80090de:	2300      	movs	r3, #0
 80090e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090e4:	682f      	ldr	r7, [r5, #0]
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	d032      	beq.n	8009150 <__sflush_r+0x98>
 80090ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	075a      	lsls	r2, r3, #29
 80090f0:	d505      	bpl.n	80090fe <__sflush_r+0x46>
 80090f2:	6863      	ldr	r3, [r4, #4]
 80090f4:	1ac0      	subs	r0, r0, r3
 80090f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090f8:	b10b      	cbz	r3, 80090fe <__sflush_r+0x46>
 80090fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	2300      	movs	r3, #0
 8009100:	4602      	mov	r2, r0
 8009102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009104:	4628      	mov	r0, r5
 8009106:	6a21      	ldr	r1, [r4, #32]
 8009108:	47b0      	blx	r6
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	d106      	bne.n	800911e <__sflush_r+0x66>
 8009110:	6829      	ldr	r1, [r5, #0]
 8009112:	291d      	cmp	r1, #29
 8009114:	d82c      	bhi.n	8009170 <__sflush_r+0xb8>
 8009116:	4a29      	ldr	r2, [pc, #164]	; (80091bc <__sflush_r+0x104>)
 8009118:	40ca      	lsrs	r2, r1
 800911a:	07d6      	lsls	r6, r2, #31
 800911c:	d528      	bpl.n	8009170 <__sflush_r+0xb8>
 800911e:	2200      	movs	r2, #0
 8009120:	04d9      	lsls	r1, r3, #19
 8009122:	6062      	str	r2, [r4, #4]
 8009124:	6922      	ldr	r2, [r4, #16]
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	d504      	bpl.n	8009134 <__sflush_r+0x7c>
 800912a:	1c42      	adds	r2, r0, #1
 800912c:	d101      	bne.n	8009132 <__sflush_r+0x7a>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	b903      	cbnz	r3, 8009134 <__sflush_r+0x7c>
 8009132:	6560      	str	r0, [r4, #84]	; 0x54
 8009134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009136:	602f      	str	r7, [r5, #0]
 8009138:	2900      	cmp	r1, #0
 800913a:	d0ca      	beq.n	80090d2 <__sflush_r+0x1a>
 800913c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009140:	4299      	cmp	r1, r3
 8009142:	d002      	beq.n	800914a <__sflush_r+0x92>
 8009144:	4628      	mov	r0, r5
 8009146:	f000 f9d5 	bl	80094f4 <_free_r>
 800914a:	2000      	movs	r0, #0
 800914c:	6360      	str	r0, [r4, #52]	; 0x34
 800914e:	e7c1      	b.n	80090d4 <__sflush_r+0x1c>
 8009150:	6a21      	ldr	r1, [r4, #32]
 8009152:	2301      	movs	r3, #1
 8009154:	4628      	mov	r0, r5
 8009156:	47b0      	blx	r6
 8009158:	1c41      	adds	r1, r0, #1
 800915a:	d1c7      	bne.n	80090ec <__sflush_r+0x34>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0c4      	beq.n	80090ec <__sflush_r+0x34>
 8009162:	2b1d      	cmp	r3, #29
 8009164:	d001      	beq.n	800916a <__sflush_r+0xb2>
 8009166:	2b16      	cmp	r3, #22
 8009168:	d101      	bne.n	800916e <__sflush_r+0xb6>
 800916a:	602f      	str	r7, [r5, #0]
 800916c:	e7b1      	b.n	80090d2 <__sflush_r+0x1a>
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	e7ad      	b.n	80090d4 <__sflush_r+0x1c>
 8009178:	690f      	ldr	r7, [r1, #16]
 800917a:	2f00      	cmp	r7, #0
 800917c:	d0a9      	beq.n	80090d2 <__sflush_r+0x1a>
 800917e:	0793      	lsls	r3, r2, #30
 8009180:	680e      	ldr	r6, [r1, #0]
 8009182:	600f      	str	r7, [r1, #0]
 8009184:	bf0c      	ite	eq
 8009186:	694b      	ldreq	r3, [r1, #20]
 8009188:	2300      	movne	r3, #0
 800918a:	eba6 0807 	sub.w	r8, r6, r7
 800918e:	608b      	str	r3, [r1, #8]
 8009190:	f1b8 0f00 	cmp.w	r8, #0
 8009194:	dd9d      	ble.n	80090d2 <__sflush_r+0x1a>
 8009196:	4643      	mov	r3, r8
 8009198:	463a      	mov	r2, r7
 800919a:	6a21      	ldr	r1, [r4, #32]
 800919c:	4628      	mov	r0, r5
 800919e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091a0:	47b0      	blx	r6
 80091a2:	2800      	cmp	r0, #0
 80091a4:	dc06      	bgt.n	80091b4 <__sflush_r+0xfc>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	e78f      	b.n	80090d4 <__sflush_r+0x1c>
 80091b4:	4407      	add	r7, r0
 80091b6:	eba8 0800 	sub.w	r8, r8, r0
 80091ba:	e7e9      	b.n	8009190 <__sflush_r+0xd8>
 80091bc:	20400001 	.word	0x20400001

080091c0 <_fflush_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	b913      	cbnz	r3, 80091d0 <_fflush_r+0x10>
 80091ca:	2500      	movs	r5, #0
 80091cc:	4628      	mov	r0, r5
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	b118      	cbz	r0, 80091da <_fflush_r+0x1a>
 80091d2:	6983      	ldr	r3, [r0, #24]
 80091d4:	b90b      	cbnz	r3, 80091da <_fflush_r+0x1a>
 80091d6:	f000 f887 	bl	80092e8 <__sinit>
 80091da:	4b14      	ldr	r3, [pc, #80]	; (800922c <_fflush_r+0x6c>)
 80091dc:	429c      	cmp	r4, r3
 80091de:	d11b      	bne.n	8009218 <_fflush_r+0x58>
 80091e0:	686c      	ldr	r4, [r5, #4]
 80091e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0ef      	beq.n	80091ca <_fflush_r+0xa>
 80091ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091ec:	07d0      	lsls	r0, r2, #31
 80091ee:	d404      	bmi.n	80091fa <_fflush_r+0x3a>
 80091f0:	0599      	lsls	r1, r3, #22
 80091f2:	d402      	bmi.n	80091fa <_fflush_r+0x3a>
 80091f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091f6:	f000 f915 	bl	8009424 <__retarget_lock_acquire_recursive>
 80091fa:	4628      	mov	r0, r5
 80091fc:	4621      	mov	r1, r4
 80091fe:	f7ff ff5b 	bl	80090b8 <__sflush_r>
 8009202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009204:	4605      	mov	r5, r0
 8009206:	07da      	lsls	r2, r3, #31
 8009208:	d4e0      	bmi.n	80091cc <_fflush_r+0xc>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	059b      	lsls	r3, r3, #22
 800920e:	d4dd      	bmi.n	80091cc <_fflush_r+0xc>
 8009210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009212:	f000 f908 	bl	8009426 <__retarget_lock_release_recursive>
 8009216:	e7d9      	b.n	80091cc <_fflush_r+0xc>
 8009218:	4b05      	ldr	r3, [pc, #20]	; (8009230 <_fflush_r+0x70>)
 800921a:	429c      	cmp	r4, r3
 800921c:	d101      	bne.n	8009222 <_fflush_r+0x62>
 800921e:	68ac      	ldr	r4, [r5, #8]
 8009220:	e7df      	b.n	80091e2 <_fflush_r+0x22>
 8009222:	4b04      	ldr	r3, [pc, #16]	; (8009234 <_fflush_r+0x74>)
 8009224:	429c      	cmp	r4, r3
 8009226:	bf08      	it	eq
 8009228:	68ec      	ldreq	r4, [r5, #12]
 800922a:	e7da      	b.n	80091e2 <_fflush_r+0x22>
 800922c:	08009eec 	.word	0x08009eec
 8009230:	08009f0c 	.word	0x08009f0c
 8009234:	08009ecc 	.word	0x08009ecc

08009238 <std>:
 8009238:	2300      	movs	r3, #0
 800923a:	b510      	push	{r4, lr}
 800923c:	4604      	mov	r4, r0
 800923e:	6083      	str	r3, [r0, #8]
 8009240:	8181      	strh	r1, [r0, #12]
 8009242:	4619      	mov	r1, r3
 8009244:	6643      	str	r3, [r0, #100]	; 0x64
 8009246:	81c2      	strh	r2, [r0, #14]
 8009248:	2208      	movs	r2, #8
 800924a:	6183      	str	r3, [r0, #24]
 800924c:	e9c0 3300 	strd	r3, r3, [r0]
 8009250:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009254:	305c      	adds	r0, #92	; 0x5c
 8009256:	f7ff fdd9 	bl	8008e0c <memset>
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <std+0x38>)
 800925c:	6224      	str	r4, [r4, #32]
 800925e:	6263      	str	r3, [r4, #36]	; 0x24
 8009260:	4b04      	ldr	r3, [pc, #16]	; (8009274 <std+0x3c>)
 8009262:	62a3      	str	r3, [r4, #40]	; 0x28
 8009264:	4b04      	ldr	r3, [pc, #16]	; (8009278 <std+0x40>)
 8009266:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009268:	4b04      	ldr	r3, [pc, #16]	; (800927c <std+0x44>)
 800926a:	6323      	str	r3, [r4, #48]	; 0x30
 800926c:	bd10      	pop	{r4, pc}
 800926e:	bf00      	nop
 8009270:	08009cb5 	.word	0x08009cb5
 8009274:	08009cd7 	.word	0x08009cd7
 8009278:	08009d0f 	.word	0x08009d0f
 800927c:	08009d33 	.word	0x08009d33

08009280 <_cleanup_r>:
 8009280:	4901      	ldr	r1, [pc, #4]	; (8009288 <_cleanup_r+0x8>)
 8009282:	f000 b8af 	b.w	80093e4 <_fwalk_reent>
 8009286:	bf00      	nop
 8009288:	080091c1 	.word	0x080091c1

0800928c <__sfmoreglue>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	2268      	movs	r2, #104	; 0x68
 8009290:	1e4d      	subs	r5, r1, #1
 8009292:	460e      	mov	r6, r1
 8009294:	4355      	muls	r5, r2
 8009296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800929a:	f000 f997 	bl	80095cc <_malloc_r>
 800929e:	4604      	mov	r4, r0
 80092a0:	b140      	cbz	r0, 80092b4 <__sfmoreglue+0x28>
 80092a2:	2100      	movs	r1, #0
 80092a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092a8:	e9c0 1600 	strd	r1, r6, [r0]
 80092ac:	300c      	adds	r0, #12
 80092ae:	60a0      	str	r0, [r4, #8]
 80092b0:	f7ff fdac 	bl	8008e0c <memset>
 80092b4:	4620      	mov	r0, r4
 80092b6:	bd70      	pop	{r4, r5, r6, pc}

080092b8 <__sfp_lock_acquire>:
 80092b8:	4801      	ldr	r0, [pc, #4]	; (80092c0 <__sfp_lock_acquire+0x8>)
 80092ba:	f000 b8b3 	b.w	8009424 <__retarget_lock_acquire_recursive>
 80092be:	bf00      	nop
 80092c0:	200001bd 	.word	0x200001bd

080092c4 <__sfp_lock_release>:
 80092c4:	4801      	ldr	r0, [pc, #4]	; (80092cc <__sfp_lock_release+0x8>)
 80092c6:	f000 b8ae 	b.w	8009426 <__retarget_lock_release_recursive>
 80092ca:	bf00      	nop
 80092cc:	200001bd 	.word	0x200001bd

080092d0 <__sinit_lock_acquire>:
 80092d0:	4801      	ldr	r0, [pc, #4]	; (80092d8 <__sinit_lock_acquire+0x8>)
 80092d2:	f000 b8a7 	b.w	8009424 <__retarget_lock_acquire_recursive>
 80092d6:	bf00      	nop
 80092d8:	200001be 	.word	0x200001be

080092dc <__sinit_lock_release>:
 80092dc:	4801      	ldr	r0, [pc, #4]	; (80092e4 <__sinit_lock_release+0x8>)
 80092de:	f000 b8a2 	b.w	8009426 <__retarget_lock_release_recursive>
 80092e2:	bf00      	nop
 80092e4:	200001be 	.word	0x200001be

080092e8 <__sinit>:
 80092e8:	b510      	push	{r4, lr}
 80092ea:	4604      	mov	r4, r0
 80092ec:	f7ff fff0 	bl	80092d0 <__sinit_lock_acquire>
 80092f0:	69a3      	ldr	r3, [r4, #24]
 80092f2:	b11b      	cbz	r3, 80092fc <__sinit+0x14>
 80092f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f8:	f7ff bff0 	b.w	80092dc <__sinit_lock_release>
 80092fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009300:	6523      	str	r3, [r4, #80]	; 0x50
 8009302:	4620      	mov	r0, r4
 8009304:	4b12      	ldr	r3, [pc, #72]	; (8009350 <__sinit+0x68>)
 8009306:	4a13      	ldr	r2, [pc, #76]	; (8009354 <__sinit+0x6c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	62a2      	str	r2, [r4, #40]	; 0x28
 800930c:	42a3      	cmp	r3, r4
 800930e:	bf04      	itt	eq
 8009310:	2301      	moveq	r3, #1
 8009312:	61a3      	streq	r3, [r4, #24]
 8009314:	f000 f820 	bl	8009358 <__sfp>
 8009318:	6060      	str	r0, [r4, #4]
 800931a:	4620      	mov	r0, r4
 800931c:	f000 f81c 	bl	8009358 <__sfp>
 8009320:	60a0      	str	r0, [r4, #8]
 8009322:	4620      	mov	r0, r4
 8009324:	f000 f818 	bl	8009358 <__sfp>
 8009328:	2200      	movs	r2, #0
 800932a:	2104      	movs	r1, #4
 800932c:	60e0      	str	r0, [r4, #12]
 800932e:	6860      	ldr	r0, [r4, #4]
 8009330:	f7ff ff82 	bl	8009238 <std>
 8009334:	2201      	movs	r2, #1
 8009336:	2109      	movs	r1, #9
 8009338:	68a0      	ldr	r0, [r4, #8]
 800933a:	f7ff ff7d 	bl	8009238 <std>
 800933e:	2202      	movs	r2, #2
 8009340:	2112      	movs	r1, #18
 8009342:	68e0      	ldr	r0, [r4, #12]
 8009344:	f7ff ff78 	bl	8009238 <std>
 8009348:	2301      	movs	r3, #1
 800934a:	61a3      	str	r3, [r4, #24]
 800934c:	e7d2      	b.n	80092f4 <__sinit+0xc>
 800934e:	bf00      	nop
 8009350:	08009ec8 	.word	0x08009ec8
 8009354:	08009281 	.word	0x08009281

08009358 <__sfp>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	4607      	mov	r7, r0
 800935c:	f7ff ffac 	bl	80092b8 <__sfp_lock_acquire>
 8009360:	4b1e      	ldr	r3, [pc, #120]	; (80093dc <__sfp+0x84>)
 8009362:	681e      	ldr	r6, [r3, #0]
 8009364:	69b3      	ldr	r3, [r6, #24]
 8009366:	b913      	cbnz	r3, 800936e <__sfp+0x16>
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff ffbd 	bl	80092e8 <__sinit>
 800936e:	3648      	adds	r6, #72	; 0x48
 8009370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009374:	3b01      	subs	r3, #1
 8009376:	d503      	bpl.n	8009380 <__sfp+0x28>
 8009378:	6833      	ldr	r3, [r6, #0]
 800937a:	b30b      	cbz	r3, 80093c0 <__sfp+0x68>
 800937c:	6836      	ldr	r6, [r6, #0]
 800937e:	e7f7      	b.n	8009370 <__sfp+0x18>
 8009380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009384:	b9d5      	cbnz	r5, 80093bc <__sfp+0x64>
 8009386:	4b16      	ldr	r3, [pc, #88]	; (80093e0 <__sfp+0x88>)
 8009388:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800938c:	6665      	str	r5, [r4, #100]	; 0x64
 800938e:	60e3      	str	r3, [r4, #12]
 8009390:	f000 f847 	bl	8009422 <__retarget_lock_init_recursive>
 8009394:	f7ff ff96 	bl	80092c4 <__sfp_lock_release>
 8009398:	2208      	movs	r2, #8
 800939a:	4629      	mov	r1, r5
 800939c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093a0:	6025      	str	r5, [r4, #0]
 80093a2:	61a5      	str	r5, [r4, #24]
 80093a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093ac:	f7ff fd2e 	bl	8008e0c <memset>
 80093b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093b8:	4620      	mov	r0, r4
 80093ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093bc:	3468      	adds	r4, #104	; 0x68
 80093be:	e7d9      	b.n	8009374 <__sfp+0x1c>
 80093c0:	2104      	movs	r1, #4
 80093c2:	4638      	mov	r0, r7
 80093c4:	f7ff ff62 	bl	800928c <__sfmoreglue>
 80093c8:	4604      	mov	r4, r0
 80093ca:	6030      	str	r0, [r6, #0]
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d1d5      	bne.n	800937c <__sfp+0x24>
 80093d0:	f7ff ff78 	bl	80092c4 <__sfp_lock_release>
 80093d4:	230c      	movs	r3, #12
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	e7ee      	b.n	80093b8 <__sfp+0x60>
 80093da:	bf00      	nop
 80093dc:	08009ec8 	.word	0x08009ec8
 80093e0:	ffff0001 	.word	0xffff0001

080093e4 <_fwalk_reent>:
 80093e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	4606      	mov	r6, r0
 80093ea:	4688      	mov	r8, r1
 80093ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093f0:	2700      	movs	r7, #0
 80093f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093f6:	f1b9 0901 	subs.w	r9, r9, #1
 80093fa:	d505      	bpl.n	8009408 <_fwalk_reent+0x24>
 80093fc:	6824      	ldr	r4, [r4, #0]
 80093fe:	2c00      	cmp	r4, #0
 8009400:	d1f7      	bne.n	80093f2 <_fwalk_reent+0xe>
 8009402:	4638      	mov	r0, r7
 8009404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009408:	89ab      	ldrh	r3, [r5, #12]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d907      	bls.n	800941e <_fwalk_reent+0x3a>
 800940e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009412:	3301      	adds	r3, #1
 8009414:	d003      	beq.n	800941e <_fwalk_reent+0x3a>
 8009416:	4629      	mov	r1, r5
 8009418:	4630      	mov	r0, r6
 800941a:	47c0      	blx	r8
 800941c:	4307      	orrs	r7, r0
 800941e:	3568      	adds	r5, #104	; 0x68
 8009420:	e7e9      	b.n	80093f6 <_fwalk_reent+0x12>

08009422 <__retarget_lock_init_recursive>:
 8009422:	4770      	bx	lr

08009424 <__retarget_lock_acquire_recursive>:
 8009424:	4770      	bx	lr

08009426 <__retarget_lock_release_recursive>:
 8009426:	4770      	bx	lr

08009428 <__swhatbuf_r>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	460e      	mov	r6, r1
 800942c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009430:	b096      	sub	sp, #88	; 0x58
 8009432:	4614      	mov	r4, r2
 8009434:	2900      	cmp	r1, #0
 8009436:	461d      	mov	r5, r3
 8009438:	da08      	bge.n	800944c <__swhatbuf_r+0x24>
 800943a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	602a      	str	r2, [r5, #0]
 8009442:	061a      	lsls	r2, r3, #24
 8009444:	d410      	bmi.n	8009468 <__swhatbuf_r+0x40>
 8009446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800944a:	e00e      	b.n	800946a <__swhatbuf_r+0x42>
 800944c:	466a      	mov	r2, sp
 800944e:	f000 fc97 	bl	8009d80 <_fstat_r>
 8009452:	2800      	cmp	r0, #0
 8009454:	dbf1      	blt.n	800943a <__swhatbuf_r+0x12>
 8009456:	9a01      	ldr	r2, [sp, #4]
 8009458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800945c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009460:	425a      	negs	r2, r3
 8009462:	415a      	adcs	r2, r3
 8009464:	602a      	str	r2, [r5, #0]
 8009466:	e7ee      	b.n	8009446 <__swhatbuf_r+0x1e>
 8009468:	2340      	movs	r3, #64	; 0x40
 800946a:	2000      	movs	r0, #0
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	b016      	add	sp, #88	; 0x58
 8009470:	bd70      	pop	{r4, r5, r6, pc}
	...

08009474 <__smakebuf_r>:
 8009474:	898b      	ldrh	r3, [r1, #12]
 8009476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009478:	079d      	lsls	r5, r3, #30
 800947a:	4606      	mov	r6, r0
 800947c:	460c      	mov	r4, r1
 800947e:	d507      	bpl.n	8009490 <__smakebuf_r+0x1c>
 8009480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	6123      	str	r3, [r4, #16]
 8009488:	2301      	movs	r3, #1
 800948a:	6163      	str	r3, [r4, #20]
 800948c:	b002      	add	sp, #8
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	ab01      	add	r3, sp, #4
 8009492:	466a      	mov	r2, sp
 8009494:	f7ff ffc8 	bl	8009428 <__swhatbuf_r>
 8009498:	9900      	ldr	r1, [sp, #0]
 800949a:	4605      	mov	r5, r0
 800949c:	4630      	mov	r0, r6
 800949e:	f000 f895 	bl	80095cc <_malloc_r>
 80094a2:	b948      	cbnz	r0, 80094b8 <__smakebuf_r+0x44>
 80094a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a8:	059a      	lsls	r2, r3, #22
 80094aa:	d4ef      	bmi.n	800948c <__smakebuf_r+0x18>
 80094ac:	f023 0303 	bic.w	r3, r3, #3
 80094b0:	f043 0302 	orr.w	r3, r3, #2
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	e7e3      	b.n	8009480 <__smakebuf_r+0xc>
 80094b8:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <__smakebuf_r+0x7c>)
 80094ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80094bc:	89a3      	ldrh	r3, [r4, #12]
 80094be:	6020      	str	r0, [r4, #0]
 80094c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c4:	6120      	str	r0, [r4, #16]
 80094c6:	81a3      	strh	r3, [r4, #12]
 80094c8:	9b00      	ldr	r3, [sp, #0]
 80094ca:	6163      	str	r3, [r4, #20]
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	b15b      	cbz	r3, 80094e8 <__smakebuf_r+0x74>
 80094d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d4:	4630      	mov	r0, r6
 80094d6:	f000 fc65 	bl	8009da4 <_isatty_r>
 80094da:	b128      	cbz	r0, 80094e8 <__smakebuf_r+0x74>
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	f023 0303 	bic.w	r3, r3, #3
 80094e2:	f043 0301 	orr.w	r3, r3, #1
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	89a0      	ldrh	r0, [r4, #12]
 80094ea:	4305      	orrs	r5, r0
 80094ec:	81a5      	strh	r5, [r4, #12]
 80094ee:	e7cd      	b.n	800948c <__smakebuf_r+0x18>
 80094f0:	08009281 	.word	0x08009281

080094f4 <_free_r>:
 80094f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094f6:	2900      	cmp	r1, #0
 80094f8:	d043      	beq.n	8009582 <_free_r+0x8e>
 80094fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094fe:	1f0c      	subs	r4, r1, #4
 8009500:	9001      	str	r0, [sp, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	bfb8      	it	lt
 8009506:	18e4      	addlt	r4, r4, r3
 8009508:	f000 fc7c 	bl	8009e04 <__malloc_lock>
 800950c:	4a1e      	ldr	r2, [pc, #120]	; (8009588 <_free_r+0x94>)
 800950e:	9801      	ldr	r0, [sp, #4]
 8009510:	6813      	ldr	r3, [r2, #0]
 8009512:	b933      	cbnz	r3, 8009522 <_free_r+0x2e>
 8009514:	6063      	str	r3, [r4, #4]
 8009516:	6014      	str	r4, [r2, #0]
 8009518:	b003      	add	sp, #12
 800951a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800951e:	f000 bc77 	b.w	8009e10 <__malloc_unlock>
 8009522:	42a3      	cmp	r3, r4
 8009524:	d908      	bls.n	8009538 <_free_r+0x44>
 8009526:	6825      	ldr	r5, [r4, #0]
 8009528:	1961      	adds	r1, r4, r5
 800952a:	428b      	cmp	r3, r1
 800952c:	bf01      	itttt	eq
 800952e:	6819      	ldreq	r1, [r3, #0]
 8009530:	685b      	ldreq	r3, [r3, #4]
 8009532:	1949      	addeq	r1, r1, r5
 8009534:	6021      	streq	r1, [r4, #0]
 8009536:	e7ed      	b.n	8009514 <_free_r+0x20>
 8009538:	461a      	mov	r2, r3
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	b10b      	cbz	r3, 8009542 <_free_r+0x4e>
 800953e:	42a3      	cmp	r3, r4
 8009540:	d9fa      	bls.n	8009538 <_free_r+0x44>
 8009542:	6811      	ldr	r1, [r2, #0]
 8009544:	1855      	adds	r5, r2, r1
 8009546:	42a5      	cmp	r5, r4
 8009548:	d10b      	bne.n	8009562 <_free_r+0x6e>
 800954a:	6824      	ldr	r4, [r4, #0]
 800954c:	4421      	add	r1, r4
 800954e:	1854      	adds	r4, r2, r1
 8009550:	6011      	str	r1, [r2, #0]
 8009552:	42a3      	cmp	r3, r4
 8009554:	d1e0      	bne.n	8009518 <_free_r+0x24>
 8009556:	681c      	ldr	r4, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	4421      	add	r1, r4
 800955c:	6053      	str	r3, [r2, #4]
 800955e:	6011      	str	r1, [r2, #0]
 8009560:	e7da      	b.n	8009518 <_free_r+0x24>
 8009562:	d902      	bls.n	800956a <_free_r+0x76>
 8009564:	230c      	movs	r3, #12
 8009566:	6003      	str	r3, [r0, #0]
 8009568:	e7d6      	b.n	8009518 <_free_r+0x24>
 800956a:	6825      	ldr	r5, [r4, #0]
 800956c:	1961      	adds	r1, r4, r5
 800956e:	428b      	cmp	r3, r1
 8009570:	bf02      	ittt	eq
 8009572:	6819      	ldreq	r1, [r3, #0]
 8009574:	685b      	ldreq	r3, [r3, #4]
 8009576:	1949      	addeq	r1, r1, r5
 8009578:	6063      	str	r3, [r4, #4]
 800957a:	bf08      	it	eq
 800957c:	6021      	streq	r1, [r4, #0]
 800957e:	6054      	str	r4, [r2, #4]
 8009580:	e7ca      	b.n	8009518 <_free_r+0x24>
 8009582:	b003      	add	sp, #12
 8009584:	bd30      	pop	{r4, r5, pc}
 8009586:	bf00      	nop
 8009588:	200001c0 	.word	0x200001c0

0800958c <sbrk_aligned>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	4e0e      	ldr	r6, [pc, #56]	; (80095c8 <sbrk_aligned+0x3c>)
 8009590:	460c      	mov	r4, r1
 8009592:	4605      	mov	r5, r0
 8009594:	6831      	ldr	r1, [r6, #0]
 8009596:	b911      	cbnz	r1, 800959e <sbrk_aligned+0x12>
 8009598:	f000 fb7c 	bl	8009c94 <_sbrk_r>
 800959c:	6030      	str	r0, [r6, #0]
 800959e:	4621      	mov	r1, r4
 80095a0:	4628      	mov	r0, r5
 80095a2:	f000 fb77 	bl	8009c94 <_sbrk_r>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	d00a      	beq.n	80095c0 <sbrk_aligned+0x34>
 80095aa:	1cc4      	adds	r4, r0, #3
 80095ac:	f024 0403 	bic.w	r4, r4, #3
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d007      	beq.n	80095c4 <sbrk_aligned+0x38>
 80095b4:	1a21      	subs	r1, r4, r0
 80095b6:	4628      	mov	r0, r5
 80095b8:	f000 fb6c 	bl	8009c94 <_sbrk_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	d101      	bne.n	80095c4 <sbrk_aligned+0x38>
 80095c0:	f04f 34ff 	mov.w	r4, #4294967295
 80095c4:	4620      	mov	r0, r4
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	200001c4 	.word	0x200001c4

080095cc <_malloc_r>:
 80095cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d0:	1ccd      	adds	r5, r1, #3
 80095d2:	4607      	mov	r7, r0
 80095d4:	f025 0503 	bic.w	r5, r5, #3
 80095d8:	3508      	adds	r5, #8
 80095da:	2d0c      	cmp	r5, #12
 80095dc:	bf38      	it	cc
 80095de:	250c      	movcc	r5, #12
 80095e0:	2d00      	cmp	r5, #0
 80095e2:	db01      	blt.n	80095e8 <_malloc_r+0x1c>
 80095e4:	42a9      	cmp	r1, r5
 80095e6:	d905      	bls.n	80095f4 <_malloc_r+0x28>
 80095e8:	230c      	movs	r3, #12
 80095ea:	2600      	movs	r6, #0
 80095ec:	603b      	str	r3, [r7, #0]
 80095ee:	4630      	mov	r0, r6
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f4:	4e2e      	ldr	r6, [pc, #184]	; (80096b0 <_malloc_r+0xe4>)
 80095f6:	f000 fc05 	bl	8009e04 <__malloc_lock>
 80095fa:	6833      	ldr	r3, [r6, #0]
 80095fc:	461c      	mov	r4, r3
 80095fe:	bb34      	cbnz	r4, 800964e <_malloc_r+0x82>
 8009600:	4629      	mov	r1, r5
 8009602:	4638      	mov	r0, r7
 8009604:	f7ff ffc2 	bl	800958c <sbrk_aligned>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	4604      	mov	r4, r0
 800960c:	d14d      	bne.n	80096aa <_malloc_r+0xde>
 800960e:	6834      	ldr	r4, [r6, #0]
 8009610:	4626      	mov	r6, r4
 8009612:	2e00      	cmp	r6, #0
 8009614:	d140      	bne.n	8009698 <_malloc_r+0xcc>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	4631      	mov	r1, r6
 800961a:	4638      	mov	r0, r7
 800961c:	eb04 0803 	add.w	r8, r4, r3
 8009620:	f000 fb38 	bl	8009c94 <_sbrk_r>
 8009624:	4580      	cmp	r8, r0
 8009626:	d13a      	bne.n	800969e <_malloc_r+0xd2>
 8009628:	6821      	ldr	r1, [r4, #0]
 800962a:	3503      	adds	r5, #3
 800962c:	4638      	mov	r0, r7
 800962e:	1a6d      	subs	r5, r5, r1
 8009630:	f025 0503 	bic.w	r5, r5, #3
 8009634:	3508      	adds	r5, #8
 8009636:	2d0c      	cmp	r5, #12
 8009638:	bf38      	it	cc
 800963a:	250c      	movcc	r5, #12
 800963c:	4629      	mov	r1, r5
 800963e:	f7ff ffa5 	bl	800958c <sbrk_aligned>
 8009642:	3001      	adds	r0, #1
 8009644:	d02b      	beq.n	800969e <_malloc_r+0xd2>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	442b      	add	r3, r5
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	e00e      	b.n	800966c <_malloc_r+0xa0>
 800964e:	6822      	ldr	r2, [r4, #0]
 8009650:	1b52      	subs	r2, r2, r5
 8009652:	d41e      	bmi.n	8009692 <_malloc_r+0xc6>
 8009654:	2a0b      	cmp	r2, #11
 8009656:	d916      	bls.n	8009686 <_malloc_r+0xba>
 8009658:	1961      	adds	r1, r4, r5
 800965a:	42a3      	cmp	r3, r4
 800965c:	6025      	str	r5, [r4, #0]
 800965e:	bf18      	it	ne
 8009660:	6059      	strne	r1, [r3, #4]
 8009662:	6863      	ldr	r3, [r4, #4]
 8009664:	bf08      	it	eq
 8009666:	6031      	streq	r1, [r6, #0]
 8009668:	5162      	str	r2, [r4, r5]
 800966a:	604b      	str	r3, [r1, #4]
 800966c:	f104 060b 	add.w	r6, r4, #11
 8009670:	4638      	mov	r0, r7
 8009672:	f000 fbcd 	bl	8009e10 <__malloc_unlock>
 8009676:	1d23      	adds	r3, r4, #4
 8009678:	f026 0607 	bic.w	r6, r6, #7
 800967c:	1af2      	subs	r2, r6, r3
 800967e:	d0b6      	beq.n	80095ee <_malloc_r+0x22>
 8009680:	1b9b      	subs	r3, r3, r6
 8009682:	50a3      	str	r3, [r4, r2]
 8009684:	e7b3      	b.n	80095ee <_malloc_r+0x22>
 8009686:	6862      	ldr	r2, [r4, #4]
 8009688:	42a3      	cmp	r3, r4
 800968a:	bf0c      	ite	eq
 800968c:	6032      	streq	r2, [r6, #0]
 800968e:	605a      	strne	r2, [r3, #4]
 8009690:	e7ec      	b.n	800966c <_malloc_r+0xa0>
 8009692:	4623      	mov	r3, r4
 8009694:	6864      	ldr	r4, [r4, #4]
 8009696:	e7b2      	b.n	80095fe <_malloc_r+0x32>
 8009698:	4634      	mov	r4, r6
 800969a:	6876      	ldr	r6, [r6, #4]
 800969c:	e7b9      	b.n	8009612 <_malloc_r+0x46>
 800969e:	230c      	movs	r3, #12
 80096a0:	4638      	mov	r0, r7
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	f000 fbb4 	bl	8009e10 <__malloc_unlock>
 80096a8:	e7a1      	b.n	80095ee <_malloc_r+0x22>
 80096aa:	6025      	str	r5, [r4, #0]
 80096ac:	e7de      	b.n	800966c <_malloc_r+0xa0>
 80096ae:	bf00      	nop
 80096b0:	200001c0 	.word	0x200001c0

080096b4 <__sfputc_r>:
 80096b4:	6893      	ldr	r3, [r2, #8]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	6093      	str	r3, [r2, #8]
 80096bc:	b410      	push	{r4}
 80096be:	da08      	bge.n	80096d2 <__sfputc_r+0x1e>
 80096c0:	6994      	ldr	r4, [r2, #24]
 80096c2:	42a3      	cmp	r3, r4
 80096c4:	db01      	blt.n	80096ca <__sfputc_r+0x16>
 80096c6:	290a      	cmp	r1, #10
 80096c8:	d103      	bne.n	80096d2 <__sfputc_r+0x1e>
 80096ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ce:	f7ff bc33 	b.w	8008f38 <__swbuf_r>
 80096d2:	6813      	ldr	r3, [r2, #0]
 80096d4:	1c58      	adds	r0, r3, #1
 80096d6:	6010      	str	r0, [r2, #0]
 80096d8:	4608      	mov	r0, r1
 80096da:	7019      	strb	r1, [r3, #0]
 80096dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <__sfputs_r>:
 80096e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e4:	4606      	mov	r6, r0
 80096e6:	460f      	mov	r7, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	18d5      	adds	r5, r2, r3
 80096ec:	42ac      	cmp	r4, r5
 80096ee:	d101      	bne.n	80096f4 <__sfputs_r+0x12>
 80096f0:	2000      	movs	r0, #0
 80096f2:	e007      	b.n	8009704 <__sfputs_r+0x22>
 80096f4:	463a      	mov	r2, r7
 80096f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fa:	4630      	mov	r0, r6
 80096fc:	f7ff ffda 	bl	80096b4 <__sfputc_r>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d1f3      	bne.n	80096ec <__sfputs_r+0xa>
 8009704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009708 <_vfiprintf_r>:
 8009708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970c:	460d      	mov	r5, r1
 800970e:	b09d      	sub	sp, #116	; 0x74
 8009710:	4614      	mov	r4, r2
 8009712:	4698      	mov	r8, r3
 8009714:	4606      	mov	r6, r0
 8009716:	b118      	cbz	r0, 8009720 <_vfiprintf_r+0x18>
 8009718:	6983      	ldr	r3, [r0, #24]
 800971a:	b90b      	cbnz	r3, 8009720 <_vfiprintf_r+0x18>
 800971c:	f7ff fde4 	bl	80092e8 <__sinit>
 8009720:	4b89      	ldr	r3, [pc, #548]	; (8009948 <_vfiprintf_r+0x240>)
 8009722:	429d      	cmp	r5, r3
 8009724:	d11b      	bne.n	800975e <_vfiprintf_r+0x56>
 8009726:	6875      	ldr	r5, [r6, #4]
 8009728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800972a:	07d9      	lsls	r1, r3, #31
 800972c:	d405      	bmi.n	800973a <_vfiprintf_r+0x32>
 800972e:	89ab      	ldrh	r3, [r5, #12]
 8009730:	059a      	lsls	r2, r3, #22
 8009732:	d402      	bmi.n	800973a <_vfiprintf_r+0x32>
 8009734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009736:	f7ff fe75 	bl	8009424 <__retarget_lock_acquire_recursive>
 800973a:	89ab      	ldrh	r3, [r5, #12]
 800973c:	071b      	lsls	r3, r3, #28
 800973e:	d501      	bpl.n	8009744 <_vfiprintf_r+0x3c>
 8009740:	692b      	ldr	r3, [r5, #16]
 8009742:	b9eb      	cbnz	r3, 8009780 <_vfiprintf_r+0x78>
 8009744:	4629      	mov	r1, r5
 8009746:	4630      	mov	r0, r6
 8009748:	f7ff fc48 	bl	8008fdc <__swsetup_r>
 800974c:	b1c0      	cbz	r0, 8009780 <_vfiprintf_r+0x78>
 800974e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009750:	07dc      	lsls	r4, r3, #31
 8009752:	d50e      	bpl.n	8009772 <_vfiprintf_r+0x6a>
 8009754:	f04f 30ff 	mov.w	r0, #4294967295
 8009758:	b01d      	add	sp, #116	; 0x74
 800975a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975e:	4b7b      	ldr	r3, [pc, #492]	; (800994c <_vfiprintf_r+0x244>)
 8009760:	429d      	cmp	r5, r3
 8009762:	d101      	bne.n	8009768 <_vfiprintf_r+0x60>
 8009764:	68b5      	ldr	r5, [r6, #8]
 8009766:	e7df      	b.n	8009728 <_vfiprintf_r+0x20>
 8009768:	4b79      	ldr	r3, [pc, #484]	; (8009950 <_vfiprintf_r+0x248>)
 800976a:	429d      	cmp	r5, r3
 800976c:	bf08      	it	eq
 800976e:	68f5      	ldreq	r5, [r6, #12]
 8009770:	e7da      	b.n	8009728 <_vfiprintf_r+0x20>
 8009772:	89ab      	ldrh	r3, [r5, #12]
 8009774:	0598      	lsls	r0, r3, #22
 8009776:	d4ed      	bmi.n	8009754 <_vfiprintf_r+0x4c>
 8009778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800977a:	f7ff fe54 	bl	8009426 <__retarget_lock_release_recursive>
 800977e:	e7e9      	b.n	8009754 <_vfiprintf_r+0x4c>
 8009780:	2300      	movs	r3, #0
 8009782:	f8cd 800c 	str.w	r8, [sp, #12]
 8009786:	f04f 0901 	mov.w	r9, #1
 800978a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8009954 <_vfiprintf_r+0x24c>
 800978e:	9309      	str	r3, [sp, #36]	; 0x24
 8009790:	2320      	movs	r3, #32
 8009792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009796:	2330      	movs	r3, #48	; 0x30
 8009798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800979c:	4623      	mov	r3, r4
 800979e:	469a      	mov	sl, r3
 80097a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097a4:	b10a      	cbz	r2, 80097aa <_vfiprintf_r+0xa2>
 80097a6:	2a25      	cmp	r2, #37	; 0x25
 80097a8:	d1f9      	bne.n	800979e <_vfiprintf_r+0x96>
 80097aa:	ebba 0b04 	subs.w	fp, sl, r4
 80097ae:	d00b      	beq.n	80097c8 <_vfiprintf_r+0xc0>
 80097b0:	465b      	mov	r3, fp
 80097b2:	4622      	mov	r2, r4
 80097b4:	4629      	mov	r1, r5
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7ff ff93 	bl	80096e2 <__sfputs_r>
 80097bc:	3001      	adds	r0, #1
 80097be:	f000 80aa 	beq.w	8009916 <_vfiprintf_r+0x20e>
 80097c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097c4:	445a      	add	r2, fp
 80097c6:	9209      	str	r2, [sp, #36]	; 0x24
 80097c8:	f89a 3000 	ldrb.w	r3, [sl]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 80a2 	beq.w	8009916 <_vfiprintf_r+0x20e>
 80097d2:	2300      	movs	r3, #0
 80097d4:	f04f 32ff 	mov.w	r2, #4294967295
 80097d8:	f10a 0a01 	add.w	sl, sl, #1
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	9307      	str	r3, [sp, #28]
 80097e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097e4:	931a      	str	r3, [sp, #104]	; 0x68
 80097e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ea:	4654      	mov	r4, sl
 80097ec:	2205      	movs	r2, #5
 80097ee:	4859      	ldr	r0, [pc, #356]	; (8009954 <_vfiprintf_r+0x24c>)
 80097f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f4:	f000 faf8 	bl	8009de8 <memchr>
 80097f8:	9a04      	ldr	r2, [sp, #16]
 80097fa:	b9d8      	cbnz	r0, 8009834 <_vfiprintf_r+0x12c>
 80097fc:	06d1      	lsls	r1, r2, #27
 80097fe:	bf44      	itt	mi
 8009800:	2320      	movmi	r3, #32
 8009802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009806:	0713      	lsls	r3, r2, #28
 8009808:	bf44      	itt	mi
 800980a:	232b      	movmi	r3, #43	; 0x2b
 800980c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009810:	f89a 3000 	ldrb.w	r3, [sl]
 8009814:	2b2a      	cmp	r3, #42	; 0x2a
 8009816:	d015      	beq.n	8009844 <_vfiprintf_r+0x13c>
 8009818:	9a07      	ldr	r2, [sp, #28]
 800981a:	4654      	mov	r4, sl
 800981c:	2000      	movs	r0, #0
 800981e:	f04f 0c0a 	mov.w	ip, #10
 8009822:	4621      	mov	r1, r4
 8009824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009828:	3b30      	subs	r3, #48	; 0x30
 800982a:	2b09      	cmp	r3, #9
 800982c:	d94e      	bls.n	80098cc <_vfiprintf_r+0x1c4>
 800982e:	b1b0      	cbz	r0, 800985e <_vfiprintf_r+0x156>
 8009830:	9207      	str	r2, [sp, #28]
 8009832:	e014      	b.n	800985e <_vfiprintf_r+0x156>
 8009834:	eba0 0308 	sub.w	r3, r0, r8
 8009838:	46a2      	mov	sl, r4
 800983a:	fa09 f303 	lsl.w	r3, r9, r3
 800983e:	4313      	orrs	r3, r2
 8009840:	9304      	str	r3, [sp, #16]
 8009842:	e7d2      	b.n	80097ea <_vfiprintf_r+0xe2>
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	1d19      	adds	r1, r3, #4
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	9103      	str	r1, [sp, #12]
 800984e:	bfbb      	ittet	lt
 8009850:	425b      	neglt	r3, r3
 8009852:	f042 0202 	orrlt.w	r2, r2, #2
 8009856:	9307      	strge	r3, [sp, #28]
 8009858:	9307      	strlt	r3, [sp, #28]
 800985a:	bfb8      	it	lt
 800985c:	9204      	strlt	r2, [sp, #16]
 800985e:	7823      	ldrb	r3, [r4, #0]
 8009860:	2b2e      	cmp	r3, #46	; 0x2e
 8009862:	d10c      	bne.n	800987e <_vfiprintf_r+0x176>
 8009864:	7863      	ldrb	r3, [r4, #1]
 8009866:	2b2a      	cmp	r3, #42	; 0x2a
 8009868:	d135      	bne.n	80098d6 <_vfiprintf_r+0x1ce>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	3402      	adds	r4, #2
 800986e:	1d1a      	adds	r2, r3, #4
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	9203      	str	r2, [sp, #12]
 8009876:	bfb8      	it	lt
 8009878:	f04f 33ff 	movlt.w	r3, #4294967295
 800987c:	9305      	str	r3, [sp, #20]
 800987e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009964 <_vfiprintf_r+0x25c>
 8009882:	2203      	movs	r2, #3
 8009884:	7821      	ldrb	r1, [r4, #0]
 8009886:	4650      	mov	r0, sl
 8009888:	f000 faae 	bl	8009de8 <memchr>
 800988c:	b140      	cbz	r0, 80098a0 <_vfiprintf_r+0x198>
 800988e:	2340      	movs	r3, #64	; 0x40
 8009890:	eba0 000a 	sub.w	r0, r0, sl
 8009894:	3401      	adds	r4, #1
 8009896:	fa03 f000 	lsl.w	r0, r3, r0
 800989a:	9b04      	ldr	r3, [sp, #16]
 800989c:	4303      	orrs	r3, r0
 800989e:	9304      	str	r3, [sp, #16]
 80098a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a4:	2206      	movs	r2, #6
 80098a6:	482c      	ldr	r0, [pc, #176]	; (8009958 <_vfiprintf_r+0x250>)
 80098a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ac:	f000 fa9c 	bl	8009de8 <memchr>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d03f      	beq.n	8009934 <_vfiprintf_r+0x22c>
 80098b4:	4b29      	ldr	r3, [pc, #164]	; (800995c <_vfiprintf_r+0x254>)
 80098b6:	bb1b      	cbnz	r3, 8009900 <_vfiprintf_r+0x1f8>
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	3307      	adds	r3, #7
 80098bc:	f023 0307 	bic.w	r3, r3, #7
 80098c0:	3308      	adds	r3, #8
 80098c2:	9303      	str	r3, [sp, #12]
 80098c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c6:	443b      	add	r3, r7
 80098c8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ca:	e767      	b.n	800979c <_vfiprintf_r+0x94>
 80098cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80098d0:	460c      	mov	r4, r1
 80098d2:	2001      	movs	r0, #1
 80098d4:	e7a5      	b.n	8009822 <_vfiprintf_r+0x11a>
 80098d6:	2300      	movs	r3, #0
 80098d8:	3401      	adds	r4, #1
 80098da:	f04f 0c0a 	mov.w	ip, #10
 80098de:	4619      	mov	r1, r3
 80098e0:	9305      	str	r3, [sp, #20]
 80098e2:	4620      	mov	r0, r4
 80098e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098e8:	3a30      	subs	r2, #48	; 0x30
 80098ea:	2a09      	cmp	r2, #9
 80098ec:	d903      	bls.n	80098f6 <_vfiprintf_r+0x1ee>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0c5      	beq.n	800987e <_vfiprintf_r+0x176>
 80098f2:	9105      	str	r1, [sp, #20]
 80098f4:	e7c3      	b.n	800987e <_vfiprintf_r+0x176>
 80098f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80098fa:	4604      	mov	r4, r0
 80098fc:	2301      	movs	r3, #1
 80098fe:	e7f0      	b.n	80098e2 <_vfiprintf_r+0x1da>
 8009900:	ab03      	add	r3, sp, #12
 8009902:	462a      	mov	r2, r5
 8009904:	a904      	add	r1, sp, #16
 8009906:	4630      	mov	r0, r6
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	4b15      	ldr	r3, [pc, #84]	; (8009960 <_vfiprintf_r+0x258>)
 800990c:	e000      	b.n	8009910 <_vfiprintf_r+0x208>
 800990e:	bf00      	nop
 8009910:	4607      	mov	r7, r0
 8009912:	1c78      	adds	r0, r7, #1
 8009914:	d1d6      	bne.n	80098c4 <_vfiprintf_r+0x1bc>
 8009916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009918:	07d9      	lsls	r1, r3, #31
 800991a:	d405      	bmi.n	8009928 <_vfiprintf_r+0x220>
 800991c:	89ab      	ldrh	r3, [r5, #12]
 800991e:	059a      	lsls	r2, r3, #22
 8009920:	d402      	bmi.n	8009928 <_vfiprintf_r+0x220>
 8009922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009924:	f7ff fd7f 	bl	8009426 <__retarget_lock_release_recursive>
 8009928:	89ab      	ldrh	r3, [r5, #12]
 800992a:	065b      	lsls	r3, r3, #25
 800992c:	f53f af12 	bmi.w	8009754 <_vfiprintf_r+0x4c>
 8009930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009932:	e711      	b.n	8009758 <_vfiprintf_r+0x50>
 8009934:	ab03      	add	r3, sp, #12
 8009936:	462a      	mov	r2, r5
 8009938:	a904      	add	r1, sp, #16
 800993a:	4630      	mov	r0, r6
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4b08      	ldr	r3, [pc, #32]	; (8009960 <_vfiprintf_r+0x258>)
 8009940:	f000 f882 	bl	8009a48 <_printf_i>
 8009944:	e7e4      	b.n	8009910 <_vfiprintf_r+0x208>
 8009946:	bf00      	nop
 8009948:	08009eec 	.word	0x08009eec
 800994c:	08009f0c 	.word	0x08009f0c
 8009950:	08009ecc 	.word	0x08009ecc
 8009954:	08009f2c 	.word	0x08009f2c
 8009958:	08009f36 	.word	0x08009f36
 800995c:	00000000 	.word	0x00000000
 8009960:	080096e3 	.word	0x080096e3
 8009964:	08009f32 	.word	0x08009f32

08009968 <_printf_common>:
 8009968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	4616      	mov	r6, r2
 800996e:	4699      	mov	r9, r3
 8009970:	688a      	ldr	r2, [r1, #8]
 8009972:	4607      	mov	r7, r0
 8009974:	690b      	ldr	r3, [r1, #16]
 8009976:	460c      	mov	r4, r1
 8009978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800997c:	4293      	cmp	r3, r2
 800997e:	bfb8      	it	lt
 8009980:	4613      	movlt	r3, r2
 8009982:	6033      	str	r3, [r6, #0]
 8009984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009988:	b10a      	cbz	r2, 800998e <_printf_common+0x26>
 800998a:	3301      	adds	r3, #1
 800998c:	6033      	str	r3, [r6, #0]
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	0699      	lsls	r1, r3, #26
 8009992:	bf42      	ittt	mi
 8009994:	6833      	ldrmi	r3, [r6, #0]
 8009996:	3302      	addmi	r3, #2
 8009998:	6033      	strmi	r3, [r6, #0]
 800999a:	6825      	ldr	r5, [r4, #0]
 800999c:	f015 0506 	ands.w	r5, r5, #6
 80099a0:	d106      	bne.n	80099b0 <_printf_common+0x48>
 80099a2:	f104 0a19 	add.w	sl, r4, #25
 80099a6:	68e3      	ldr	r3, [r4, #12]
 80099a8:	6832      	ldr	r2, [r6, #0]
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	42ab      	cmp	r3, r5
 80099ae:	dc29      	bgt.n	8009a04 <_printf_common+0x9c>
 80099b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099b4:	1e13      	subs	r3, r2, #0
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	bf18      	it	ne
 80099ba:	2301      	movne	r3, #1
 80099bc:	0692      	lsls	r2, r2, #26
 80099be:	d42e      	bmi.n	8009a1e <_printf_common+0xb6>
 80099c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099c4:	4649      	mov	r1, r9
 80099c6:	4638      	mov	r0, r7
 80099c8:	47c0      	blx	r8
 80099ca:	3001      	adds	r0, #1
 80099cc:	d021      	beq.n	8009a12 <_printf_common+0xaa>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	341a      	adds	r4, #26
 80099d2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80099d6:	f003 0306 	and.w	r3, r3, #6
 80099da:	6832      	ldr	r2, [r6, #0]
 80099dc:	2600      	movs	r6, #0
 80099de:	2b04      	cmp	r3, #4
 80099e0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80099e4:	bf08      	it	eq
 80099e6:	1aad      	subeq	r5, r5, r2
 80099e8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80099ec:	bf14      	ite	ne
 80099ee:	2500      	movne	r5, #0
 80099f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099f4:	4293      	cmp	r3, r2
 80099f6:	bfc4      	itt	gt
 80099f8:	1a9b      	subgt	r3, r3, r2
 80099fa:	18ed      	addgt	r5, r5, r3
 80099fc:	42b5      	cmp	r5, r6
 80099fe:	d11a      	bne.n	8009a36 <_printf_common+0xce>
 8009a00:	2000      	movs	r0, #0
 8009a02:	e008      	b.n	8009a16 <_printf_common+0xae>
 8009a04:	2301      	movs	r3, #1
 8009a06:	4652      	mov	r2, sl
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	47c0      	blx	r8
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d103      	bne.n	8009a1a <_printf_common+0xb2>
 8009a12:	f04f 30ff 	mov.w	r0, #4294967295
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	3501      	adds	r5, #1
 8009a1c:	e7c3      	b.n	80099a6 <_printf_common+0x3e>
 8009a1e:	18e1      	adds	r1, r4, r3
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	2030      	movs	r0, #48	; 0x30
 8009a24:	3302      	adds	r3, #2
 8009a26:	4422      	add	r2, r4
 8009a28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a34:	e7c4      	b.n	80099c0 <_printf_common+0x58>
 8009a36:	2301      	movs	r3, #1
 8009a38:	4622      	mov	r2, r4
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	47c0      	blx	r8
 8009a40:	3001      	adds	r0, #1
 8009a42:	d0e6      	beq.n	8009a12 <_printf_common+0xaa>
 8009a44:	3601      	adds	r6, #1
 8009a46:	e7d9      	b.n	80099fc <_printf_common+0x94>

08009a48 <_printf_i>:
 8009a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	7e0f      	ldrb	r7, [r1, #24]
 8009a4e:	4691      	mov	r9, r2
 8009a50:	4680      	mov	r8, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	2f78      	cmp	r7, #120	; 0x78
 8009a56:	469a      	mov	sl, r3
 8009a58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a5e:	d807      	bhi.n	8009a70 <_printf_i+0x28>
 8009a60:	2f62      	cmp	r7, #98	; 0x62
 8009a62:	d80a      	bhi.n	8009a7a <_printf_i+0x32>
 8009a64:	2f00      	cmp	r7, #0
 8009a66:	f000 80d8 	beq.w	8009c1a <_printf_i+0x1d2>
 8009a6a:	2f58      	cmp	r7, #88	; 0x58
 8009a6c:	f000 80a3 	beq.w	8009bb6 <_printf_i+0x16e>
 8009a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a78:	e03a      	b.n	8009af0 <_printf_i+0xa8>
 8009a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a7e:	2b15      	cmp	r3, #21
 8009a80:	d8f6      	bhi.n	8009a70 <_printf_i+0x28>
 8009a82:	a101      	add	r1, pc, #4	; (adr r1, 8009a88 <_printf_i+0x40>)
 8009a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a88:	08009ae1 	.word	0x08009ae1
 8009a8c:	08009af5 	.word	0x08009af5
 8009a90:	08009a71 	.word	0x08009a71
 8009a94:	08009a71 	.word	0x08009a71
 8009a98:	08009a71 	.word	0x08009a71
 8009a9c:	08009a71 	.word	0x08009a71
 8009aa0:	08009af5 	.word	0x08009af5
 8009aa4:	08009a71 	.word	0x08009a71
 8009aa8:	08009a71 	.word	0x08009a71
 8009aac:	08009a71 	.word	0x08009a71
 8009ab0:	08009a71 	.word	0x08009a71
 8009ab4:	08009c01 	.word	0x08009c01
 8009ab8:	08009b25 	.word	0x08009b25
 8009abc:	08009be3 	.word	0x08009be3
 8009ac0:	08009a71 	.word	0x08009a71
 8009ac4:	08009a71 	.word	0x08009a71
 8009ac8:	08009c23 	.word	0x08009c23
 8009acc:	08009a71 	.word	0x08009a71
 8009ad0:	08009b25 	.word	0x08009b25
 8009ad4:	08009a71 	.word	0x08009a71
 8009ad8:	08009a71 	.word	0x08009a71
 8009adc:	08009beb 	.word	0x08009beb
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	1d1a      	adds	r2, r3, #4
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	602a      	str	r2, [r5, #0]
 8009ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009af0:	2301      	movs	r3, #1
 8009af2:	e0a3      	b.n	8009c3c <_printf_i+0x1f4>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	6829      	ldr	r1, [r5, #0]
 8009af8:	0606      	lsls	r6, r0, #24
 8009afa:	f101 0304 	add.w	r3, r1, #4
 8009afe:	d50a      	bpl.n	8009b16 <_printf_i+0xce>
 8009b00:	680e      	ldr	r6, [r1, #0]
 8009b02:	602b      	str	r3, [r5, #0]
 8009b04:	2e00      	cmp	r6, #0
 8009b06:	da03      	bge.n	8009b10 <_printf_i+0xc8>
 8009b08:	232d      	movs	r3, #45	; 0x2d
 8009b0a:	4276      	negs	r6, r6
 8009b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b10:	485e      	ldr	r0, [pc, #376]	; (8009c8c <_printf_i+0x244>)
 8009b12:	230a      	movs	r3, #10
 8009b14:	e019      	b.n	8009b4a <_printf_i+0x102>
 8009b16:	680e      	ldr	r6, [r1, #0]
 8009b18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	bf18      	it	ne
 8009b20:	b236      	sxthne	r6, r6
 8009b22:	e7ef      	b.n	8009b04 <_printf_i+0xbc>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	6820      	ldr	r0, [r4, #0]
 8009b28:	1d19      	adds	r1, r3, #4
 8009b2a:	6029      	str	r1, [r5, #0]
 8009b2c:	0601      	lsls	r1, r0, #24
 8009b2e:	d501      	bpl.n	8009b34 <_printf_i+0xec>
 8009b30:	681e      	ldr	r6, [r3, #0]
 8009b32:	e002      	b.n	8009b3a <_printf_i+0xf2>
 8009b34:	0646      	lsls	r6, r0, #25
 8009b36:	d5fb      	bpl.n	8009b30 <_printf_i+0xe8>
 8009b38:	881e      	ldrh	r6, [r3, #0]
 8009b3a:	2f6f      	cmp	r7, #111	; 0x6f
 8009b3c:	4853      	ldr	r0, [pc, #332]	; (8009c8c <_printf_i+0x244>)
 8009b3e:	bf0c      	ite	eq
 8009b40:	2308      	moveq	r3, #8
 8009b42:	230a      	movne	r3, #10
 8009b44:	2100      	movs	r1, #0
 8009b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b4a:	6865      	ldr	r5, [r4, #4]
 8009b4c:	2d00      	cmp	r5, #0
 8009b4e:	60a5      	str	r5, [r4, #8]
 8009b50:	bfa2      	ittt	ge
 8009b52:	6821      	ldrge	r1, [r4, #0]
 8009b54:	f021 0104 	bicge.w	r1, r1, #4
 8009b58:	6021      	strge	r1, [r4, #0]
 8009b5a:	b90e      	cbnz	r6, 8009b60 <_printf_i+0x118>
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	d04d      	beq.n	8009bfc <_printf_i+0x1b4>
 8009b60:	4615      	mov	r5, r2
 8009b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b66:	fb03 6711 	mls	r7, r3, r1, r6
 8009b6a:	5dc7      	ldrb	r7, [r0, r7]
 8009b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b70:	4637      	mov	r7, r6
 8009b72:	460e      	mov	r6, r1
 8009b74:	42bb      	cmp	r3, r7
 8009b76:	d9f4      	bls.n	8009b62 <_printf_i+0x11a>
 8009b78:	2b08      	cmp	r3, #8
 8009b7a:	d10b      	bne.n	8009b94 <_printf_i+0x14c>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	07de      	lsls	r6, r3, #31
 8009b80:	d508      	bpl.n	8009b94 <_printf_i+0x14c>
 8009b82:	6923      	ldr	r3, [r4, #16]
 8009b84:	6861      	ldr	r1, [r4, #4]
 8009b86:	4299      	cmp	r1, r3
 8009b88:	bfde      	ittt	le
 8009b8a:	2330      	movle	r3, #48	; 0x30
 8009b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b94:	1b52      	subs	r2, r2, r5
 8009b96:	6122      	str	r2, [r4, #16]
 8009b98:	464b      	mov	r3, r9
 8009b9a:	aa03      	add	r2, sp, #12
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	f8cd a000 	str.w	sl, [sp]
 8009ba4:	f7ff fee0 	bl	8009968 <_printf_common>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d14c      	bne.n	8009c46 <_printf_i+0x1fe>
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb0:	b004      	add	sp, #16
 8009bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb6:	4835      	ldr	r0, [pc, #212]	; (8009c8c <_printf_i+0x244>)
 8009bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009bbc:	6829      	ldr	r1, [r5, #0]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bc4:	6029      	str	r1, [r5, #0]
 8009bc6:	061d      	lsls	r5, r3, #24
 8009bc8:	d514      	bpl.n	8009bf4 <_printf_i+0x1ac>
 8009bca:	07df      	lsls	r7, r3, #31
 8009bcc:	bf44      	itt	mi
 8009bce:	f043 0320 	orrmi.w	r3, r3, #32
 8009bd2:	6023      	strmi	r3, [r4, #0]
 8009bd4:	b91e      	cbnz	r6, 8009bde <_printf_i+0x196>
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	f023 0320 	bic.w	r3, r3, #32
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	2310      	movs	r3, #16
 8009be0:	e7b0      	b.n	8009b44 <_printf_i+0xfc>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	f043 0320 	orr.w	r3, r3, #32
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	2378      	movs	r3, #120	; 0x78
 8009bec:	4828      	ldr	r0, [pc, #160]	; (8009c90 <_printf_i+0x248>)
 8009bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bf2:	e7e3      	b.n	8009bbc <_printf_i+0x174>
 8009bf4:	0659      	lsls	r1, r3, #25
 8009bf6:	bf48      	it	mi
 8009bf8:	b2b6      	uxthmi	r6, r6
 8009bfa:	e7e6      	b.n	8009bca <_printf_i+0x182>
 8009bfc:	4615      	mov	r5, r2
 8009bfe:	e7bb      	b.n	8009b78 <_printf_i+0x130>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	6826      	ldr	r6, [r4, #0]
 8009c04:	1d18      	adds	r0, r3, #4
 8009c06:	6961      	ldr	r1, [r4, #20]
 8009c08:	6028      	str	r0, [r5, #0]
 8009c0a:	0635      	lsls	r5, r6, #24
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	d501      	bpl.n	8009c14 <_printf_i+0x1cc>
 8009c10:	6019      	str	r1, [r3, #0]
 8009c12:	e002      	b.n	8009c1a <_printf_i+0x1d2>
 8009c14:	0670      	lsls	r0, r6, #25
 8009c16:	d5fb      	bpl.n	8009c10 <_printf_i+0x1c8>
 8009c18:	8019      	strh	r1, [r3, #0]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	4615      	mov	r5, r2
 8009c1e:	6123      	str	r3, [r4, #16]
 8009c20:	e7ba      	b.n	8009b98 <_printf_i+0x150>
 8009c22:	682b      	ldr	r3, [r5, #0]
 8009c24:	2100      	movs	r1, #0
 8009c26:	1d1a      	adds	r2, r3, #4
 8009c28:	602a      	str	r2, [r5, #0]
 8009c2a:	681d      	ldr	r5, [r3, #0]
 8009c2c:	6862      	ldr	r2, [r4, #4]
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 f8da 	bl	8009de8 <memchr>
 8009c34:	b108      	cbz	r0, 8009c3a <_printf_i+0x1f2>
 8009c36:	1b40      	subs	r0, r0, r5
 8009c38:	6060      	str	r0, [r4, #4]
 8009c3a:	6863      	ldr	r3, [r4, #4]
 8009c3c:	6123      	str	r3, [r4, #16]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c44:	e7a8      	b.n	8009b98 <_printf_i+0x150>
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	462a      	mov	r2, r5
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	47d0      	blx	sl
 8009c50:	3001      	adds	r0, #1
 8009c52:	d0ab      	beq.n	8009bac <_printf_i+0x164>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	079b      	lsls	r3, r3, #30
 8009c58:	d413      	bmi.n	8009c82 <_printf_i+0x23a>
 8009c5a:	68e0      	ldr	r0, [r4, #12]
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	4298      	cmp	r0, r3
 8009c60:	bfb8      	it	lt
 8009c62:	4618      	movlt	r0, r3
 8009c64:	e7a4      	b.n	8009bb0 <_printf_i+0x168>
 8009c66:	2301      	movs	r3, #1
 8009c68:	4632      	mov	r2, r6
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	47d0      	blx	sl
 8009c70:	3001      	adds	r0, #1
 8009c72:	d09b      	beq.n	8009bac <_printf_i+0x164>
 8009c74:	3501      	adds	r5, #1
 8009c76:	68e3      	ldr	r3, [r4, #12]
 8009c78:	9903      	ldr	r1, [sp, #12]
 8009c7a:	1a5b      	subs	r3, r3, r1
 8009c7c:	42ab      	cmp	r3, r5
 8009c7e:	dcf2      	bgt.n	8009c66 <_printf_i+0x21e>
 8009c80:	e7eb      	b.n	8009c5a <_printf_i+0x212>
 8009c82:	2500      	movs	r5, #0
 8009c84:	f104 0619 	add.w	r6, r4, #25
 8009c88:	e7f5      	b.n	8009c76 <_printf_i+0x22e>
 8009c8a:	bf00      	nop
 8009c8c:	08009f3d 	.word	0x08009f3d
 8009c90:	08009f4e 	.word	0x08009f4e

08009c94 <_sbrk_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	2300      	movs	r3, #0
 8009c98:	4d05      	ldr	r5, [pc, #20]	; (8009cb0 <_sbrk_r+0x1c>)
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	602b      	str	r3, [r5, #0]
 8009ca0:	f7f7 fa5c 	bl	800115c <_sbrk>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_sbrk_r+0x1a>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_sbrk_r+0x1a>
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	200001c8 	.word	0x200001c8

08009cb4 <__sread>:
 8009cb4:	b510      	push	{r4, lr}
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbc:	f000 f8ae 	bl	8009e1c <_read_r>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	bfab      	itete	ge
 8009cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8009cc8:	181b      	addge	r3, r3, r0
 8009cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cce:	bfac      	ite	ge
 8009cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cd2:	81a3      	strhlt	r3, [r4, #12]
 8009cd4:	bd10      	pop	{r4, pc}

08009cd6 <__swrite>:
 8009cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cda:	461f      	mov	r7, r3
 8009cdc:	898b      	ldrh	r3, [r1, #12]
 8009cde:	4605      	mov	r5, r0
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	05db      	lsls	r3, r3, #23
 8009ce4:	4616      	mov	r6, r2
 8009ce6:	d505      	bpl.n	8009cf4 <__swrite+0x1e>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	2200      	movs	r2, #0
 8009cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf0:	f000 f868 	bl	8009dc4 <_lseek_r>
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	4632      	mov	r2, r6
 8009cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	463b      	mov	r3, r7
 8009d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0a:	f000 b817 	b.w	8009d3c <_write_r>

08009d0e <__sseek>:
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	460c      	mov	r4, r1
 8009d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d16:	f000 f855 	bl	8009dc4 <_lseek_r>
 8009d1a:	1c43      	adds	r3, r0, #1
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	bf15      	itete	ne
 8009d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d2a:	81a3      	strheq	r3, [r4, #12]
 8009d2c:	bf18      	it	ne
 8009d2e:	81a3      	strhne	r3, [r4, #12]
 8009d30:	bd10      	pop	{r4, pc}

08009d32 <__sclose>:
 8009d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d36:	f000 b813 	b.w	8009d60 <_close_r>
	...

08009d3c <_write_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4604      	mov	r4, r0
 8009d40:	4d06      	ldr	r5, [pc, #24]	; (8009d5c <_write_r+0x20>)
 8009d42:	4608      	mov	r0, r1
 8009d44:	4611      	mov	r1, r2
 8009d46:	2200      	movs	r2, #0
 8009d48:	602a      	str	r2, [r5, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f7f7 f9b5 	bl	80010ba <_write>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_write_r+0x1e>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_write_r+0x1e>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	200001c8 	.word	0x200001c8

08009d60 <_close_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	2300      	movs	r3, #0
 8009d64:	4d05      	ldr	r5, [pc, #20]	; (8009d7c <_close_r+0x1c>)
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f7 f9c1 	bl	80010f2 <_close>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_close_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_close_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	200001c8 	.word	0x200001c8

08009d80 <_fstat_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	2300      	movs	r3, #0
 8009d84:	4d06      	ldr	r5, [pc, #24]	; (8009da0 <_fstat_r+0x20>)
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	602b      	str	r3, [r5, #0]
 8009d8e:	f7f7 f9bc 	bl	800110a <_fstat>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d102      	bne.n	8009d9c <_fstat_r+0x1c>
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	b103      	cbz	r3, 8009d9c <_fstat_r+0x1c>
 8009d9a:	6023      	str	r3, [r4, #0]
 8009d9c:	bd38      	pop	{r3, r4, r5, pc}
 8009d9e:	bf00      	nop
 8009da0:	200001c8 	.word	0x200001c8

08009da4 <_isatty_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	2300      	movs	r3, #0
 8009da8:	4d05      	ldr	r5, [pc, #20]	; (8009dc0 <_isatty_r+0x1c>)
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	602b      	str	r3, [r5, #0]
 8009db0:	f7f7 f9bb 	bl	800112a <_isatty>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_isatty_r+0x1a>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_isatty_r+0x1a>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	200001c8 	.word	0x200001c8

08009dc4 <_lseek_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4d06      	ldr	r5, [pc, #24]	; (8009de4 <_lseek_r+0x20>)
 8009dca:	4608      	mov	r0, r1
 8009dcc:	4611      	mov	r1, r2
 8009dce:	2200      	movs	r2, #0
 8009dd0:	602a      	str	r2, [r5, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f7f7 f9b4 	bl	8001140 <_lseek>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d102      	bne.n	8009de2 <_lseek_r+0x1e>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	b103      	cbz	r3, 8009de2 <_lseek_r+0x1e>
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	200001c8 	.word	0x200001c8

08009de8 <memchr>:
 8009de8:	b2c9      	uxtb	r1, r1
 8009dea:	4402      	add	r2, r0
 8009dec:	b510      	push	{r4, lr}
 8009dee:	4290      	cmp	r0, r2
 8009df0:	4603      	mov	r3, r0
 8009df2:	d101      	bne.n	8009df8 <memchr+0x10>
 8009df4:	2300      	movs	r3, #0
 8009df6:	e003      	b.n	8009e00 <memchr+0x18>
 8009df8:	781c      	ldrb	r4, [r3, #0]
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	428c      	cmp	r4, r1
 8009dfe:	d1f6      	bne.n	8009dee <memchr+0x6>
 8009e00:	4618      	mov	r0, r3
 8009e02:	bd10      	pop	{r4, pc}

08009e04 <__malloc_lock>:
 8009e04:	4801      	ldr	r0, [pc, #4]	; (8009e0c <__malloc_lock+0x8>)
 8009e06:	f7ff bb0d 	b.w	8009424 <__retarget_lock_acquire_recursive>
 8009e0a:	bf00      	nop
 8009e0c:	200001bc 	.word	0x200001bc

08009e10 <__malloc_unlock>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__malloc_unlock+0x8>)
 8009e12:	f7ff bb08 	b.w	8009426 <__retarget_lock_release_recursive>
 8009e16:	bf00      	nop
 8009e18:	200001bc 	.word	0x200001bc

08009e1c <_read_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4d06      	ldr	r5, [pc, #24]	; (8009e3c <_read_r+0x20>)
 8009e22:	4608      	mov	r0, r1
 8009e24:	4611      	mov	r1, r2
 8009e26:	2200      	movs	r2, #0
 8009e28:	602a      	str	r2, [r5, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f7f7 f928 	bl	8001080 <_read>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_read_r+0x1e>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_read_r+0x1e>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	200001c8 	.word	0x200001c8

08009e40 <_init>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	bf00      	nop
 8009e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e46:	bc08      	pop	{r3}
 8009e48:	469e      	mov	lr, r3
 8009e4a:	4770      	bx	lr

08009e4c <_fini>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr
