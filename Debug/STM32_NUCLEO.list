
STM32_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c8c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ff8  08009ff8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009ff8  08009ff8  00019ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a000  0800a000  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a000  0800a000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  0800a078  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800a078  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011954  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002060  00000000  00000000  000319fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00033a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  000346c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003106c  00000000  00000000  00035258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011139  00000000  00000000  000662c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00131117  00000000  00000000  000773fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b68  00000000  00000000  001a8564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	e000      	b.n	800025e <__do_global_dtors_aux+0x12>
 800025c:	bf00      	nop
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000070 	.word	0x20000070
 8000268:	00000000 	.word	0x00000000
 800026c:	08009ec0 	.word	0x08009ec0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	e000      	b.n	800027e <frame_dummy+0xe>
 800027c:	bf00      	nop
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000074 	.word	0x20000074
 8000288:	08009ec0 	.word	0x08009ec0

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002c2:	4604      	mov	r4, r0
 80002c4:	460f      	mov	r7, r1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0xa0>
 80002ca:	428a      	cmp	r2, r1
 80002cc:	4694      	mov	ip, r2
 80002ce:	d961      	bls.n	8000394 <__udivmoddi4+0xd8>
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	b143      	cbz	r3, 80002e8 <__udivmoddi4+0x2c>
 80002d6:	f1c3 0120 	rsb	r1, r3, #32
 80002da:	409f      	lsls	r7, r3
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	409c      	lsls	r4, r3
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	430f      	orrs	r7, r1
 80002e8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002ec:	fa1f fe8c 	uxth.w	lr, ip
 80002f0:	0c22      	lsrs	r2, r4, #16
 80002f2:	fbb7 f6f1 	udiv	r6, r7, r1
 80002f6:	fb01 7716 	mls	r7, r1, r6, r7
 80002fa:	fb06 f00e 	mul.w	r0, r6, lr
 80002fe:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000302:	4290      	cmp	r0, r2
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x5c>
 8000306:	eb1c 0202 	adds.w	r2, ip, r2
 800030a:	f106 37ff 	add.w	r7, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x5a>
 8000310:	4290      	cmp	r0, r2
 8000312:	f200 8137 	bhi.w	8000584 <__udivmoddi4+0x2c8>
 8000316:	463e      	mov	r6, r7
 8000318:	1a12      	subs	r2, r2, r0
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb2 f0f1 	udiv	r0, r2, r1
 8000320:	fb01 2210 	mls	r2, r1, r0, r2
 8000324:	fb00 fe0e 	mul.w	lr, r0, lr
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	45a6      	cmp	lr, r4
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x86>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 32ff 	add.w	r2, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x84>
 800033a:	45a6      	cmp	lr, r4
 800033c:	f200 811c 	bhi.w	8000578 <__udivmoddi4+0x2bc>
 8000340:	4610      	mov	r0, r2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	2600      	movs	r6, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c5 4300 	strd	r4, r3, [r5]
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	428b      	cmp	r3, r1
 800035e:	d909      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000360:	2d00      	cmp	r5, #0
 8000362:	f000 80fd 	beq.w	8000560 <__udivmoddi4+0x2a4>
 8000366:	2600      	movs	r6, #0
 8000368:	e9c5 0100 	strd	r0, r1, [r5]
 800036c:	4630      	mov	r0, r6
 800036e:	4631      	mov	r1, r6
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f683 	clz	r6, r3
 8000378:	2e00      	cmp	r6, #0
 800037a:	d14b      	bne.n	8000414 <__udivmoddi4+0x158>
 800037c:	428b      	cmp	r3, r1
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4630      	mov	r0, r6
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0e3      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038e:	e9c5 4700 	strd	r4, r7, [r5]
 8000392:	e7e0      	b.n	8000356 <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xdc>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809d 	bne.w	80004dc <__udivmoddi4+0x220>
 80003a2:	1a89      	subs	r1, r1, r2
 80003a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a8:	b297      	uxth	r7, r2
 80003aa:	2601      	movs	r6, #1
 80003ac:	0c20      	lsrs	r0, r4, #16
 80003ae:	fbb1 f2fe 	udiv	r2, r1, lr
 80003b2:	fb0e 1112 	mls	r1, lr, r2, r1
 80003b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ba:	fb07 f002 	mul.w	r0, r7, r2
 80003be:	4288      	cmp	r0, r1
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1c 0101 	adds.w	r1, ip, r1
 80003c6:	f102 38ff 	add.w	r8, r2, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4288      	cmp	r0, r1
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80cf 	beq.w	800057e <__udivmoddi4+0x2c2>
 80003e0:	4642      	mov	r2, r8
 80003e2:	1a09      	subs	r1, r1, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x150>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14e>
 8000404:	42a7      	cmp	r7, r4
 8000406:	f200 80b4 	bhi.w	8000572 <__udivmoddi4+0x2b6>
 800040a:	4608      	mov	r0, r1
 800040c:	1be4      	subs	r4, r4, r7
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	e79b      	b.n	800034c <__udivmoddi4+0x90>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa01 f406 	lsl.w	r4, r1, r6
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	40f9      	lsrs	r1, r7
 8000424:	40b2      	lsls	r2, r6
 8000426:	ea4c 0c03 	orr.w	ip, ip, r3
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	431c      	orrs	r4, r3
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	0c20      	lsrs	r0, r4, #16
 800043e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000442:	fb09 1118 	mls	r1, r9, r8, r1
 8000446:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044a:	fb08 f00e 	mul.w	r0, r8, lr
 800044e:	4288      	cmp	r0, r1
 8000450:	d90f      	bls.n	8000472 <__udivmoddi4+0x1b6>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f108 3aff 	add.w	sl, r8, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	4288      	cmp	r0, r1
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b4>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ce>
 8000470:	46d0      	mov	r8, sl
 8000472:	1a09      	subs	r1, r1, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb1 f0f9 	udiv	r0, r1, r9
 800047a:	fb09 1110 	mls	r1, r9, r0, r1
 800047e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000482:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000486:	458e      	cmp	lr, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x1de>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000492:	d201      	bcs.n	8000498 <__udivmoddi4+0x1dc>
 8000494:	458e      	cmp	lr, r1
 8000496:	d87f      	bhi.n	8000598 <__udivmoddi4+0x2dc>
 8000498:	4620      	mov	r0, r4
 800049a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	fba0 9802 	umull	r9, r8, r0, r2
 80004a6:	4541      	cmp	r1, r8
 80004a8:	464c      	mov	r4, r9
 80004aa:	46c6      	mov	lr, r8
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0x1f8>
 80004ae:	d106      	bne.n	80004be <__udivmoddi4+0x202>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d204      	bcs.n	80004be <__udivmoddi4+0x202>
 80004b4:	3801      	subs	r0, #1
 80004b6:	ebb9 0402 	subs.w	r4, r9, r2
 80004ba:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d070      	beq.n	80005a4 <__udivmoddi4+0x2e8>
 80004c2:	1b1a      	subs	r2, r3, r4
 80004c4:	eb61 010e 	sbc.w	r1, r1, lr
 80004c8:	fa22 f306 	lsr.w	r3, r2, r6
 80004cc:	fa01 f707 	lsl.w	r7, r1, r7
 80004d0:	40f1      	lsrs	r1, r6
 80004d2:	2600      	movs	r6, #0
 80004d4:	431f      	orrs	r7, r3
 80004d6:	e9c5 7100 	strd	r7, r1, [r5]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0020 	rsb	r0, r3, #32
 80004e4:	fa01 f203 	lsl.w	r2, r1, r3
 80004e8:	fa21 f600 	lsr.w	r6, r1, r0
 80004ec:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f0:	fa24 f100 	lsr.w	r1, r4, r0
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	409c      	lsls	r4, r3
 80004fa:	4311      	orrs	r1, r2
 80004fc:	fbb6 f0fe 	udiv	r0, r6, lr
 8000500:	0c0a      	lsrs	r2, r1, #16
 8000502:	fb0e 6610 	mls	r6, lr, r0, r6
 8000506:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800050a:	fb00 f607 	mul.w	r6, r0, r7
 800050e:	4296      	cmp	r6, r2
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x274>
 8000512:	eb1c 0202 	adds.w	r2, ip, r2
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	4296      	cmp	r6, r2
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x272>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d6>
 800052e:	4640      	mov	r0, r8
 8000530:	1b92      	subs	r2, r2, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb2 f6fe 	udiv	r6, r2, lr
 8000538:	fb0e 2216 	mls	r2, lr, r6, r2
 800053c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000540:	fb06 f207 	mul.w	r2, r6, r7
 8000544:	428a      	cmp	r2, r1
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x29c>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x29a>
 8000552:	428a      	cmp	r2, r1
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2e2>
 8000556:	4646      	mov	r6, r8
 8000558:	1a89      	subs	r1, r1, r2
 800055a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800055e:	e725      	b.n	80003ac <__udivmoddi4+0xf0>
 8000560:	462e      	mov	r6, r5
 8000562:	4628      	mov	r0, r5
 8000564:	e6f7      	b.n	8000356 <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb61 0303 	sbc.w	r3, r1, r3
 800056c:	2001      	movs	r0, #1
 800056e:	461f      	mov	r7, r3
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xce>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e749      	b.n	800040c <__udivmoddi4+0x150>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e1      	b.n	8000342 <__udivmoddi4+0x86>
 800057e:	3a02      	subs	r2, #2
 8000580:	4461      	add	r1, ip
 8000582:	e72e      	b.n	80003e2 <__udivmoddi4+0x126>
 8000584:	3e02      	subs	r6, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c6      	b.n	8000318 <__udivmoddi4+0x5c>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4461      	add	r1, ip
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b6>
 8000592:	3802      	subs	r0, #2
 8000594:	4462      	add	r2, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x274>
 8000598:	3802      	subs	r0, #2
 800059a:	4461      	add	r1, ip
 800059c:	e77d      	b.n	800049a <__udivmoddi4+0x1de>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x29c>
 80005a4:	462e      	mov	r6, r5
 80005a6:	e6d6      	b.n	8000356 <__udivmoddi4+0x9a>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 80005b6:	f107 020f 	add.w	r2, r7, #15
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <RC522_SPI_Transfer+0x28>)
 80005c4:	f007 fb10 	bl	8007be8 <HAL_SPI_TransmitReceive>

	return rx_data;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000008c 	.word	0x2000008c

080005d8 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <Write_MFRC522+0x4c>)
 80005f0:	f001 f97a 	bl	80018e8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffd3 	bl	80005ac <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffcf 	bl	80005ac <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <Write_MFRC522+0x4c>)
 8000616:	f001 f967 	bl	80018e8 <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	42020800 	.word	0x42020800

08000628 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	480f      	ldr	r0, [pc, #60]	; (8000678 <Read_MFRC522+0x50>)
 800063a:	f001 f955 	bl	80018e8 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	b25b      	sxtb	r3, r3
 8000644:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000648:	b25b      	sxtb	r3, r3
 800064a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800064e:	b25b      	sxtb	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffaa 	bl	80005ac <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff ffa7 	bl	80005ac <RC522_SPI_Transfer>
 800065e:	4603      	mov	r3, r0
 8000660:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <Read_MFRC522+0x50>)
 800066a:	f001 f93d 	bl	80018e8 <HAL_GPIO_WritePin>

	return val;
 800066e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	42020800 	.word	0x42020800

0800067c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	460a      	mov	r2, r1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	4613      	mov	r3, r2
 800068a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ffca 	bl	8000628 <Read_MFRC522>
 8000694:	4603      	mov	r3, r0
 8000696:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000698:	7bfa      	ldrb	r2, [r7, #15]
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	4313      	orrs	r3, r2
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4611      	mov	r1, r2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff97 	bl	80005d8 <Write_MFRC522>
}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	460a      	mov	r2, r1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	4613      	mov	r3, r2
 80006c0:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffaf 	bl	8000628 <Read_MFRC522>
 80006ca:	4603      	mov	r3, r0
 80006cc:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80006ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006d2:	43db      	mvns	r3, r3
 80006d4:	b25a      	sxtb	r2, r3
 80006d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006da:	4013      	ands	r3, r2
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff77 	bl	80005d8 <Write_MFRC522>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80006f6:	2014      	movs	r0, #20
 80006f8:	f7ff ff96 	bl	8000628 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80006fc:	2103      	movs	r1, #3
 80006fe:	2014      	movs	r0, #20
 8000700:	f7ff ffbc 	bl	800067c <SetBitMask>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800070c:	210f      	movs	r1, #15
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff ff62 	bl	80005d8 <Write_MFRC522>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	4813      	ldr	r0, [pc, #76]	; (8000770 <MFRC522_Init+0x58>)
 8000724:	f001 f8e0 	bl	80018e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	4810      	ldr	r0, [pc, #64]	; (8000770 <MFRC522_Init+0x58>)
 8000730:	f001 f8da 	bl	80018e8 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000734:	f7ff ffe8 	bl	8000708 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
//	Write_MFRC522(CommandReg, 0x0F);
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000738:	218d      	movs	r1, #141	; 0x8d
 800073a:	202a      	movs	r0, #42	; 0x2a
 800073c:	f7ff ff4c 	bl	80005d8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000740:	213e      	movs	r1, #62	; 0x3e
 8000742:	202b      	movs	r0, #43	; 0x2b
 8000744:	f7ff ff48 	bl	80005d8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 0x1E);
 8000748:	211e      	movs	r1, #30
 800074a:	202d      	movs	r0, #45	; 0x2d
 800074c:	f7ff ff44 	bl	80005d8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0x00);
 8000750:	2100      	movs	r1, #0
 8000752:	202c      	movs	r0, #44	; 0x2c
 8000754:	f7ff ff40 	bl	80005d8 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000758:	2140      	movs	r1, #64	; 0x40
 800075a:	2015      	movs	r0, #21
 800075c:	f7ff ff3c 	bl	80005d8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000760:	213d      	movs	r1, #61	; 0x3d
 8000762:	2011      	movs	r0, #17
 8000764:	f7ff ff38 	bl	80005d8 <Write_MFRC522>

	AntennaOn();
 8000768:	f7ff ffc3 	bl	80006f2 <AntennaOn>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	42020800 	.word	0x42020800

08000774 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4603      	mov	r3, r0
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	4613      	mov	r3, r2
 8000784:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000786:	2302      	movs	r3, #2
 8000788:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b0c      	cmp	r3, #12
 8000796:	d006      	beq.n	80007a6 <MFRC522_ToCard+0x32>
 8000798:	2b0e      	cmp	r3, #14
 800079a:	d109      	bne.n	80007b0 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 800079c:	2312      	movs	r3, #18
 800079e:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80007a0:	2310      	movs	r3, #16
 80007a2:	777b      	strb	r3, [r7, #29]
			break;
 80007a4:	e005      	b.n	80007b2 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 80007a6:	2377      	movs	r3, #119	; 0x77
 80007a8:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80007aa:	2330      	movs	r3, #48	; 0x30
 80007ac:	777b      	strb	r3, [r7, #29]
			break;
 80007ae:	e000      	b.n	80007b2 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80007b0:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80007b2:	7fbb      	ldrb	r3, [r7, #30]
 80007b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ff0b 	bl	80005d8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	2004      	movs	r0, #4
 80007c6:	f7ff ff74 	bl	80006b2 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	200a      	movs	r0, #10
 80007ce:	f7ff ff55 	bl	800067c <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80007d2:	2100      	movs	r1, #0
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff feff 	bl	80005d8 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	e00a      	b.n	80007f6 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	2009      	movs	r0, #9
 80007ec:	f7ff fef4 	bl	80005d8 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	3301      	adds	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3f0      	bcc.n	80007e0 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	4619      	mov	r1, r3
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff fee8 	bl	80005d8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2b0c      	cmp	r3, #12
 800080c:	d103      	bne.n	8000816 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	200d      	movs	r0, #13
 8000812:	f7ff ff33 	bl	800067c <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000816:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800081a:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 800081c:	2004      	movs	r0, #4
 800081e:	f7ff ff03 	bl	8000628 <Read_MFRC522>
 8000822:	4603      	mov	r3, r0
 8000824:	773b      	strb	r3, [r7, #28]
        i--;
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	3b01      	subs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00a      	beq.n	8000848 <MFRC522_ToCard+0xd4>
 8000832:	7f3b      	ldrb	r3, [r7, #28]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d105      	bne.n	8000848 <MFRC522_ToCard+0xd4>
 800083c:	7f3a      	ldrb	r2, [r7, #28]
 800083e:	7f7b      	ldrb	r3, [r7, #29]
 8000840:	4013      	ands	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0e9      	beq.n	800081c <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	200d      	movs	r0, #13
 800084c:	f7ff ff31 	bl	80006b2 <ClearBitMask>

    if (i != 0)
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d052      	beq.n	80008fc <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000856:	2006      	movs	r0, #6
 8000858:	f7ff fee6 	bl	8000628 <Read_MFRC522>
 800085c:	4603      	mov	r3, r0
 800085e:	f003 031b 	and.w	r3, r3, #27
 8000862:	2b00      	cmp	r3, #0
 8000864:	d148      	bne.n	80008f8 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800086a:	7f3a      	ldrb	r2, [r7, #28]
 800086c:	7fbb      	ldrb	r3, [r7, #30]
 800086e:	4013      	ands	r3, r2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800087a:	2301      	movs	r3, #1
 800087c:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d13b      	bne.n	80008fc <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000884:	200a      	movs	r0, #10
 8000886:	f7ff fecf 	bl	8000628 <Read_MFRC522>
 800088a:	4603      	mov	r3, r0
 800088c:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800088e:	200c      	movs	r0, #12
 8000890:	f7ff feca 	bl	8000628 <Read_MFRC522>
 8000894:	4603      	mov	r3, r0
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d008      	beq.n	80008b4 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80008a2:	7f3b      	ldrb	r3, [r7, #28]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	00da      	lsls	r2, r3, #3
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	4413      	add	r3, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	e004      	b.n	80008be <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80008b4:	7f3b      	ldrb	r3, [r7, #28]
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	461a      	mov	r2, r3
 80008ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008bc:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80008be:	7f3b      	ldrb	r3, [r7, #28]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <MFRC522_ToCard+0x154>
                {
					n = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80008c8:	7f3b      	ldrb	r3, [r7, #28]
 80008ca:	2b10      	cmp	r3, #16
 80008cc:	d901      	bls.n	80008d2 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80008ce:	2310      	movs	r3, #16
 80008d0:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	e00a      	b.n	80008ee <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	18d4      	adds	r4, r2, r3
 80008de:	2009      	movs	r0, #9
 80008e0:	f7ff fea2 	bl	8000628 <Read_MFRC522>
 80008e4:	4603      	mov	r3, r0
 80008e6:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	7f3b      	ldrb	r3, [r7, #28]
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3f0      	bcc.n	80008d8 <MFRC522_ToCard+0x164>
 80008f6:	e001      	b.n	80008fc <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80008f8:	2302      	movs	r3, #2
 80008fa:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80008fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	; 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd90      	pop	{r4, r7, pc}

08000906 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af02      	add	r7, sp, #8
 800090c:	4603      	mov	r3, r0
 800090e:	6039      	str	r1, [r7, #0]
 8000910:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000912:	2107      	movs	r1, #7
 8000914:	200d      	movs	r0, #13
 8000916:	f7ff fe5f 	bl	80005d8 <Write_MFRC522>

	TagType[0] = reqMode;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	79fa      	ldrb	r2, [r7, #7]
 800091e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2201      	movs	r2, #1
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	200c      	movs	r0, #12
 800092e:	f7ff ff21 	bl	8000774 <MFRC522_ToCard>
 8000932:	4603      	mov	r3, r0
 8000934:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <MFRC522_Request+0x3c>
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2b10      	cmp	r3, #16
 8000940:	d001      	beq.n	8000946 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000942:	2302      	movs	r3, #2
 8000944:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af02      	add	r7, sp, #8
 8000956:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000958:	2300      	movs	r3, #0
 800095a:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800095c:	2100      	movs	r1, #0
 800095e:	200d      	movs	r0, #13
 8000960:	f7ff fe3a 	bl	80005d8 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2293      	movs	r2, #147	; 0x93
 8000968:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3301      	adds	r3, #1
 800096e:	2220      	movs	r2, #32
 8000970:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2202      	movs	r2, #2
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	200c      	movs	r0, #12
 8000980:	f7ff fef8 	bl	8000774 <MFRC522_ToCard>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d118      	bne.n	80009c0 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	73bb      	strb	r3, [r7, #14]
 8000992:	e009      	b.n	80009a8 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000994:	7bbb      	ldrb	r3, [r7, #14]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	7b7b      	ldrb	r3, [r7, #13]
 800099e:	4053      	eors	r3, r2
 80009a0:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	3301      	adds	r3, #1
 80009a6:	73bb      	strb	r3, [r7, #14]
 80009a8:	7bbb      	ldrb	r3, [r7, #14]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d9f2      	bls.n	8000994 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	4413      	add	r3, r2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	7b7a      	ldrb	r2, [r7, #13]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d001      	beq.n	80009c0 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80009bc:	2302      	movs	r3, #2
 80009be:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009d4:	1d39      	adds	r1, r7, #4
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	2201      	movs	r2, #1
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <__io_putchar+0x20>)
 80009de:	f007 fc82 	bl	80082e6 <HAL_UART_Transmit>
    return ch;
 80009e2:	687b      	ldr	r3, [r7, #4]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000011c 	.word	0x2000011c

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fcc5 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f84b 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 f953 	bl	8000ca8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a02:	f000 f8af 	bl	8000b64 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000a06:	f000 f903 	bl	8000c10 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  RC522_Init();
  MFRC522_Init();
 8000a0a:	f7ff fe85 	bl	8000718 <MFRC522_Init>
//  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
  printf("Welcome STM32 Development\r\n");
 8000a0e:	481a      	ldr	r0, [pc, #104]	; (8000a78 <main+0x88>)
 8000a10:	f008 faca 	bl	8008fa8 <puts>
//	              HAL_Delay(500);
//	          }
//	  HAL_Delay(1000);

#if 1
	  status = MFRC522_Request(PICC_REQIDL, str);
 8000a14:	4919      	ldr	r1, [pc, #100]	; (8000a7c <main+0x8c>)
 8000a16:	2026      	movs	r0, #38	; 0x26
 8000a18:	f7ff ff75 	bl	8000906 <MFRC522_Request>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <main+0x90>)
 8000a22:	701a      	strb	r2, [r3, #0]
	      if (status == MI_OK) {
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <main+0x90>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <main+0x42>
	          printf("Card detected\n");
 8000a2c:	4815      	ldr	r0, [pc, #84]	; (8000a84 <main+0x94>)
 8000a2e:	f008 fabb 	bl	8008fa8 <puts>
	      }

	      status = MFRC522_Anticoll(str);
 8000a32:	4812      	ldr	r0, [pc, #72]	; (8000a7c <main+0x8c>)
 8000a34:	f7ff ff8c 	bl	8000950 <MFRC522_Anticoll>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <main+0x90>)
 8000a3e:	701a      	strb	r2, [r3, #0]
	      if (status == MI_OK) {
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <main+0x90>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1e5      	bne.n	8000a14 <main+0x24>
	          printf("Card's UID: ");
 8000a48:	480f      	ldr	r0, [pc, #60]	; (8000a88 <main+0x98>)
 8000a4a:	f008 fa27 	bl	8008e9c <iprintf>
	          for (int i = 0; i < 5; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e00a      	b.n	8000a6a <main+0x7a>
	              printf("%02X ", str[i]);
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <main+0x8c>)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	4413      	add	r3, r2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <main+0x9c>)
 8000a60:	f008 fa1c 	bl	8008e9c <iprintf>
	          for (int i = 0; i < 5; i++) {
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3301      	adds	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	ddf1      	ble.n	8000a54 <main+0x64>
	          }
	          printf("\r\n");
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <main+0xa0>)
 8000a72:	f008 fa99 	bl	8008fa8 <puts>
	  status = MFRC522_Request(PICC_REQIDL, str);
 8000a76:	e7cd      	b.n	8000a14 <main+0x24>
 8000a78:	08009ed8 	.word	0x08009ed8
 8000a7c:	200001b4 	.word	0x200001b4
 8000a80:	200001b0 	.word	0x200001b0
 8000a84:	08009ef4 	.word	0x08009ef4
 8000a88:	08009f04 	.word	0x08009f04
 8000a8c:	08009f14 	.word	0x08009f14
 8000a90:	08009f1c 	.word	0x08009f1c

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	; 0x70
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	2250      	movs	r2, #80	; 0x50
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 f9f2 	bl	8008e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <SystemClock_Config+0xcc>)
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <SystemClock_Config+0xcc>)
 8000ac0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ac4:	6113      	str	r3, [r2, #16]
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <SystemClock_Config+0xcc>)
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad2:	bf00      	nop
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <SystemClock_Config+0xcc>)
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	2b08      	cmp	r3, #8
 8000ade:	d1f9      	bne.n	8000ad4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000aee:	2303      	movs	r3, #3
 8000af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000af6:	2328      	movs	r3, #40	; 0x28
 8000af8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000b06:	230c      	movs	r3, #12
 8000b08:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fefe 	bl	8001918 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b22:	f000 f991 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	231f      	movs	r3, #31
 8000b28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	2105      	movs	r1, #5
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fb1f 	bl	8002188 <HAL_RCC_ClockConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b50:	f000 f97a 	bl	8000e48 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000b54:	f001 fe5a 	bl	800280c <HAL_RCC_EnableCSS>
}
 8000b58:	bf00      	nop
 8000b5a:	3770      	adds	r7, #112	; 0x70
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	44020800 	.word	0x44020800

08000b64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b68:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b6a:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <MX_SPI1_Init+0xa8>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b7e:	2207      	movs	r2, #7
 8000b80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bb2:	2207      	movs	r2, #7
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_SPI1_Init+0xa4>)
 8000bf6:	f006 fe87 	bl	8007908 <HAL_SPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c00:	f000 f922 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000008c 	.word	0x2000008c
 8000c0c:	40013000 	.word	0x40013000

08000c10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <MX_USART3_UART_Init+0x94>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b1f      	ldr	r3, [pc, #124]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c5a:	f007 faf4 	bl	8008246 <HAL_UART_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c64:	f000 f8f0 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c6c:	f008 f81a 	bl	8008ca4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c76:	f000 f8e7 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c7e:	f008 f84f 	bl	8008d20 <HAL_UARTEx_SetRxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c88:	f000 f8de 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_USART3_UART_Init+0x90>)
 8000c8e:	f007 ffd0 	bl	8008c32 <HAL_UARTEx_DisableFifoMode>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 f8d6 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000011c 	.word	0x2000011c
 8000ca4:	40004800 	.word	0x40004800

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b5d      	ldr	r3, [pc, #372]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cc4:	4a5b      	ldr	r2, [pc, #364]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000cc6:	f043 0320 	orr.w	r3, r3, #32
 8000cca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cce:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cdc:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ce2:	4a54      	ldr	r2, [pc, #336]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cec:	4b51      	ldr	r3, [pc, #324]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b4e      	ldr	r3, [pc, #312]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d00:	4a4c      	ldr	r2, [pc, #304]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d0a:	4b4a      	ldr	r3, [pc, #296]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d1e:	4a45      	ldr	r2, [pc, #276]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d3c:	4a3d      	ldr	r2, [pc, #244]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d54:	4b37      	ldr	r3, [pc, #220]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d5a:	4a36      	ldr	r2, [pc, #216]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d64:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d78:	4a2e      	ldr	r2, [pc, #184]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_GPIO_Init+0x18c>)
 8000d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2110      	movs	r1, #16
 8000d94:	4828      	ldr	r0, [pc, #160]	; (8000e38 <MX_GPIO_Init+0x190>)
 8000d96:	f000 fda7 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4827      	ldr	r0, [pc, #156]	; (8000e3c <MX_GPIO_Init+0x194>)
 8000da0:	f000 fda2 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2110      	movs	r1, #16
 8000da8:	4825      	ldr	r0, [pc, #148]	; (8000e40 <MX_GPIO_Init+0x198>)
 8000daa:	f000 fd9d 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000db4:	4823      	ldr	r0, [pc, #140]	; (8000e44 <MX_GPIO_Init+0x19c>)
 8000db6:	f000 fd97 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4819      	ldr	r0, [pc, #100]	; (8000e38 <MX_GPIO_Init+0x190>)
 8000dd2:	f000 fc37 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_GPIO_Init+0x194>)
 8000dee:	f000 fc29 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000df2:	2310      	movs	r3, #16
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_GPIO_Init+0x198>)
 8000e0a:	f000 fc1b 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <MX_GPIO_Init+0x19c>)
 8000e28:	f000 fc0c 	bl	8001644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	44020c00 	.word	0x44020c00
 8000e38:	42021400 	.word	0x42021400
 8000e3c:	42020400 	.word	0x42020400
 8000e40:	42021800 	.word	0x42021800
 8000e44:	42020800 	.word	0x42020800

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <Error_Handler+0x8>

08000e52 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0cc      	sub	sp, #304	; 0x130
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e6e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	f007 fffb 	bl	8008e8c <memset>
  if(hspi->Instance==SPI1)
 8000e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a33      	ldr	r2, [pc, #204]	; (8000f70 <HAL_SPI_MspInit+0x110>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d15d      	bne.n	8000f64 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000eac:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000eb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ec0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fcc8 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 8000eda:	f7ff ffb5 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_SPI_MspInit+0x114>)
 8000ee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <HAL_SPI_MspInit+0x114>)
 8000ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eea:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_SPI_MspInit+0x114>)
 8000ef0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000ef4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8000ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000efc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f06:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f0a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_SPI_MspInit+0x114>)
 8000f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <HAL_SPI_MspInit+0x114>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_SPI_MspInit+0x114>)
 8000f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f38:	681b      	ldr	r3, [r3, #0]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	23f0      	movs	r3, #240	; 0xf0
 8000f3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f52:	2305      	movs	r3, #5
 8000f54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <HAL_SPI_MspInit+0x118>)
 8000f60:	f000 fb70 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40013000 	.word	0x40013000
 8000f74:	44020c00 	.word	0x44020c00
 8000f78:	42020000 	.word	0x42020000

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0cc      	sub	sp, #304	; 0x130
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f8a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fa0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000faa:	461a      	mov	r2, r3
 8000fac:	2100      	movs	r1, #0
 8000fae:	f007 ff6d 	bl	8008e8c <memset>
  if(huart->Instance==USART3)
 8000fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <HAL_UART_MspInit+0x110>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d15d      	bne.n	8001080 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fc8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000fcc:	f04f 0204 	mov.w	r2, #4
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fdc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 fc3b 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000ff4:	f7ff ff28 	bl	8000e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <HAL_UART_MspInit+0x114>)
 8000ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <HAL_UART_MspInit+0x114>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_UART_MspInit+0x114>)
 800100a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800100e:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8001012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001016:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001020:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001024:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_UART_MspInit+0x114>)
 8001028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <HAL_UART_MspInit+0x114>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_UART_MspInit+0x114>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800103c:	f003 0208 	and.w	r2, r3, #8
 8001040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001044:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800104e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001052:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001054:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001058:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800106e:	2307      	movs	r3, #7
 8001070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <HAL_UART_MspInit+0x118>)
 800107c:	f000 fae2 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40004800 	.word	0x40004800
 8001090:	44020c00 	.word	0x44020c00
 8001094:	42020c00 	.word	0x42020c00

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800109c:	f001 fbc6 	bl	800282c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x8>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 f9a8 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_read>:
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e00a      	b.n	8001118 <_read+0x28>
 8001102:	e000      	b.n	8001106 <_read+0x16>
 8001104:	bf00      	nop
 8001106:	4601      	mov	r1, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf0      	blt.n	8001102 <_read+0x12>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_write>:
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e009      	b.n	8001150 <_write+0x26>
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fc41 	bl	80009cc <__io_putchar>
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf1      	blt.n	800113c <_write+0x12>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_close>:
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_fstat>:
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	2300      	movs	r3, #0
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <_isatty>:
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	2301      	movs	r3, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_lseek>:
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	2300      	movs	r3, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <_sbrk>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
 80011fc:	f007 fe1c 	bl	8008e38 <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200a0000 	.word	0x200a0000
 800122c:	00000400 	.word	0x00000400
 8001230:	200001c4 	.word	0x200001c4
 8001234:	200001e0 	.word	0x200001e0

08001238 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800123e:	4b35      	ldr	r3, [pc, #212]	; (8001314 <SystemInit+0xdc>)
 8001240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001244:	4a33      	ldr	r2, [pc, #204]	; (8001314 <SystemInit+0xdc>)
 8001246:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800124e:	4b32      	ldr	r3, [pc, #200]	; (8001318 <SystemInit+0xe0>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <SystemInit+0xe0>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <SystemInit+0xe0>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <SystemInit+0xe0>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	492c      	ldr	r1, [pc, #176]	; (8001318 <SystemInit+0xe0>)
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <SystemInit+0xe4>)
 8001268:	4013      	ands	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <SystemInit+0xe0>)
 800126e:	2200      	movs	r2, #0
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001272:	4b29      	ldr	r3, [pc, #164]	; (8001318 <SystemInit+0xe0>)
 8001274:	2200      	movs	r2, #0
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <SystemInit+0xe0>)
 800127a:	2200      	movs	r2, #0
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <SystemInit+0xe0>)
 8001280:	4a27      	ldr	r2, [pc, #156]	; (8001320 <SystemInit+0xe8>)
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <SystemInit+0xe0>)
 8001286:	2200      	movs	r2, #0
 8001288:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <SystemInit+0xe0>)
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <SystemInit+0xe8>)
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <SystemInit+0xe0>)
 8001292:	2200      	movs	r2, #0
 8001294:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <SystemInit+0xe0>)
 8001298:	4a21      	ldr	r2, [pc, #132]	; (8001320 <SystemInit+0xe8>)
 800129a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <SystemInit+0xe0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <SystemInit+0xe0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <SystemInit+0xe0>)
 80012a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <SystemInit+0xe0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <SystemInit+0xdc>)
 80012b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ba:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <SystemInit+0xec>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80012c4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80012cc:	d003      	beq.n	80012d6 <SystemInit+0x9e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80012d4:	d117      	bne.n	8001306 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <SystemInit+0xec>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <SystemInit+0xec>)
 80012e4:	4a10      	ldr	r2, [pc, #64]	; (8001328 <SystemInit+0xf0>)
 80012e6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <SystemInit+0xec>)
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <SystemInit+0xf4>)
 80012ec:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <SystemInit+0xec>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <SystemInit+0xec>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <SystemInit+0xec>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <SystemInit+0xec>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	61d3      	str	r3, [r2, #28]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	44020c00 	.word	0x44020c00
 800131c:	eae2eae3 	.word	0xeae2eae3
 8001320:	01010280 	.word	0x01010280
 8001324:	40022000 	.word	0x40022000
 8001328:	08192a3b 	.word	0x08192a3b
 800132c:	4c5d6e7f 	.word	0x4c5d6e7f

08001330 <Reset_Handler>:
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopForever+0x2>)
 8001332:	4685      	mov	sp, r0
 8001334:	f7ff ff80 	bl	8001238 <SystemInit>
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <LoopForever+0x6>)
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <LoopForever+0xa>)
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <LoopForever+0xe>)
 800133e:	2300      	movs	r3, #0
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:
 8001342:	58d4      	ldr	r4, [r2, r3]
 8001344:	50c4      	str	r4, [r0, r3]
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:
 8001348:	18c4      	adds	r4, r0, r3
 800134a:	428c      	cmp	r4, r1
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LoopForever+0x12>)
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <LoopForever+0x16>)
 8001352:	2300      	movs	r3, #0
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:
 800135a:	42a2      	cmp	r2, r4
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>
 800135e:	f007 fd71 	bl	8008e44 <__libc_init_array>
 8001362:	f7ff fb45 	bl	80009f0 <main>

08001366 <LoopForever>:
 8001366:	e7fe      	b.n	8001366 <LoopForever>
 8001368:	200a0000 	.word	0x200a0000
 800136c:	20000000 	.word	0x20000000
 8001370:	20000070 	.word	0x20000070
 8001374:	0800a008 	.word	0x0800a008
 8001378:	20000070 	.word	0x20000070
 800137c:	200001dc 	.word	0x200001dc

08001380 <ADC1_IRQHandler>:
 8001380:	e7fe      	b.n	8001380 <ADC1_IRQHandler>
	...

08001384 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f929 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800138e:	f001 f8b3 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8001392:	4602      	mov	r2, r0
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x40>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	490a      	ldr	r1, [pc, #40]	; (80013c8 <HAL_Init+0x44>)
 800139e:	5ccb      	ldrb	r3, [r1, r3]
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_Init+0x48>)
 80013a6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a8:	200f      	movs	r0, #15
 80013aa:	f000 f811 	bl	80013d0 <HAL_InitTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e002      	b.n	80013be <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fd4b 	bl	8000e52 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	44020c00 	.word	0x44020c00
 80013c8:	08009f20 	.word	0x08009f20
 80013cc:	20000000 	.word	0x20000000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_InitTick+0x60>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e021      	b.n	8001428 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_InitTick+0x64>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_InitTick+0x60>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f915 	bl	800162a <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 f8ed 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_InitTick+0x68>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000008 	.word	0x20000008
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	200001c8 	.word	0x200001c8

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	200001c8 	.word	0x200001c8

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff47 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff5e 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff90 	bl	8001534 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5f 	bl	80014e0 <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffb2 	bl	800159c <SysTick_Config>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001652:	e136      	b.n	80018c2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8128 	beq.w	80018bc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x38>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b12      	cmp	r3, #18
 800167a:	d125      	bne.n	80016c8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001688:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4013      	ands	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	f003 020f 	and.w	r2, r3, #15
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	6979      	ldr	r1, [r7, #20]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4013      	ands	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d00b      	beq.n	800171c <HAL_GPIO_Init+0xd8>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d007      	beq.n	800171c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001710:	2b11      	cmp	r3, #17
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b12      	cmp	r3, #18
 800171a:	d130      	bne.n	800177e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4013      	ands	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001752:	2201      	movs	r2, #1
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4013      	ands	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 0201 	and.w	r2, r3, #1
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d017      	beq.n	80017b6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	4013      	ands	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d07c      	beq.n	80018bc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80017c2:	4a47      	ldr	r2, [pc, #284]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3318      	adds	r3, #24
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4013      	ands	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0a9a      	lsrs	r2, r3, #10
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_GPIO_Init+0x2a0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	00d2      	lsls	r2, r2, #3
 80017f6:	4093      	lsls	r3, r2
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017fe:	4938      	ldr	r1, [pc, #224]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3318      	adds	r3, #24
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800180c:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001830:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	4013      	ands	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 8001862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001866:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4013      	ands	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001886:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 8001890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001894:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	3301      	adds	r3, #1
 80018c0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f47f aec1 	bne.w	8001654 <HAL_GPIO_Init+0x10>
  }
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	44022000 	.word	0x44022000
 80018e4:	002f7f7f 	.word	0x002f7f7f

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001904:	e002      	b.n	800190c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	f000 bc28 	b.w	800217c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192c:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f003 0318 	and.w	r3, r3, #24
 8001934:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001936:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d05b      	beq.n	8001a04 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x46>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2b18      	cmp	r3, #24
 8001956:	d114      	bne.n	8001982 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d111      	bne.n	8001982 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f000 bc08 	b.w	800217c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	4981      	ldr	r1, [pc, #516]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 800197c:	4313      	orrs	r3, r2
 800197e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001980:	e040      	b.n	8001a04 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d023      	beq.n	80019d2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800198a:	4b7d      	ldr	r3, [pc, #500]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7c      	ldr	r2, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff fd65 	bl	8001464 <HAL_GetTick>
 800199a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800199e:	f7ff fd61 	bl	8001464 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e3e5      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80019b0:	4b73      	ldr	r3, [pc, #460]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80019bc:	4b70      	ldr	r3, [pc, #448]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	496d      	ldr	r1, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	618b      	str	r3, [r1, #24]
 80019d0:	e018      	b.n	8001a04 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019d2:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6a      	ldr	r2, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 80019d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fd41 	bl	8001464 <HAL_GetTick>
 80019e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80019e6:	f7ff fd3d 	bl	8001464 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e3c1      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80019f8:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a0 	beq.w	8001b52 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_OscConfig+0x10c>
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b18      	cmp	r3, #24
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 8092 	bne.w	8001b52 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e3a4      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x132>
 8001a3c:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a4f      	ldr	r2, [pc, #316]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e058      	b.n	8001afc <HAL_RCC_OscConfig+0x1e4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d112      	bne.n	8001a78 <HAL_RCC_OscConfig+0x160>
 8001a52:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a47      	ldr	r2, [pc, #284]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b45      	ldr	r3, [pc, #276]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a44      	ldr	r2, [pc, #272]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e041      	b.n	8001afc <HAL_RCC_OscConfig+0x1e4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x190>
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a3e      	ldr	r2, [pc, #248]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a3b      	ldr	r2, [pc, #236]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a38      	ldr	r2, [pc, #224]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e029      	b.n	8001afc <HAL_RCC_OscConfig+0x1e4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001ab0:	d112      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x1c0>
 8001ab2:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a2c      	ldr	r2, [pc, #176]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e011      	b.n	8001afc <HAL_RCC_OscConfig+0x1e4>
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a28      	ldr	r2, [pc, #160]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001af6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fcae 	bl	8001464 <HAL_GetTick>
 8001b08:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fcaa 	bl	8001464 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e32e      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1f4>
 8001b2a:	e012      	b.n	8001b52 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fc9a 	bl	8001464 <HAL_GetTick>
 8001b30:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fc96 	bl	8001464 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e31a      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_RCC_OscConfig+0x268>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 809a 	beq.w	8001c94 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x25a>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	2b18      	cmp	r3, #24
 8001b6a:	d149      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d146      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d104      	bne.n	8001b84 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e2fe      	b.n	800217c <HAL_RCC_OscConfig+0x864>
 8001b7e:	bf00      	nop
 8001b80:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001b8a:	4b9a      	ldr	r3, [pc, #616]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0218 	and.w	r2, r3, #24
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d014      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001b9a:	4b96      	ldr	r3, [pc, #600]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0218 	bic.w	r2, r3, #24
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	4993      	ldr	r1, [pc, #588]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001bac:	f000 fdd0 	bl	8002750 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bb0:	4b91      	ldr	r3, [pc, #580]	; (8001df8 <HAL_RCC_OscConfig+0x4e0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fc0b 	bl	80013d0 <HAL_InitTick>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e2db      	b.n	800217c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fc4e 	bl	8001464 <HAL_GetTick>
 8001bc8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fc4a 	bl	8001464 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e2ce      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bde:	4b85      	ldr	r3, [pc, #532]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001bea:	4b82      	ldr	r3, [pc, #520]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	497e      	ldr	r1, [pc, #504]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001bfe:	e049      	b.n	8001c94 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d02c      	beq.n	8001c62 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001c08:	4b7a      	ldr	r3, [pc, #488]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 0218 	bic.w	r2, r3, #24
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4977      	ldr	r1, [pc, #476]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001c1a:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a75      	ldr	r2, [pc, #468]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff fc1d 	bl	8001464 <HAL_GetTick>
 8001c2a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fc19 	bl	8001464 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e29d      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c40:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001c4c:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	4966      	ldr	r1, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	610b      	str	r3, [r1, #16]
 8001c60:	e018      	b.n	8001c94 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fbf9 	bl	8001464 <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fbf5 	bl	8001464 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e279      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c88:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca8:	4b52      	ldr	r3, [pc, #328]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cae:	4a51      	ldr	r2, [pc, #324]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fbd4 	bl	8001464 <HAL_GetTick>
 8001cbc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fbd0 	bl	8001464 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e254      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0ef      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x3a8>
 8001ce0:	e01b      	b.n	8001d1a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce8:	4a42      	ldr	r2, [pc, #264]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001cee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fbb7 	bl	8001464 <HAL_GetTick>
 8001cf6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fbb3 	bl	8001464 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e237      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ef      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80d2 	beq.w	8001ecc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d28:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <HAL_RCC_OscConfig+0x4e4>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d118      	bne.n	8001d66 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_OscConfig+0x4e4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	4a30      	ldr	r2, [pc, #192]	; (8001dfc <HAL_RCC_OscConfig+0x4e4>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d40:	f7ff fb90 	bl	8001464 <HAL_GetTick>
 8001d44:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d48:	f7ff fb8c 	bl	8001464 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e210      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_RCC_OscConfig+0x4e4>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d108      	bne.n	8001d80 <HAL_RCC_OscConfig+0x468>
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d74:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d7e:	e074      	b.n	8001e6a <HAL_RCC_OscConfig+0x552>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d118      	bne.n	8001dba <HAL_RCC_OscConfig+0x4a2>
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d8e:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d9e:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001da4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dae:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001db8:	e057      	b.n	8001e6a <HAL_RCC_OscConfig+0x552>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d11e      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4e8>
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001de8:	4a02      	ldr	r2, [pc, #8]	; (8001df4 <HAL_RCC_OscConfig+0x4dc>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x552>
 8001df4:	44020c00 	.word	0x44020c00
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	44020800 	.word	0x44020800
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b85      	cmp	r3, #133	; 0x85
 8001e06:	d118      	bne.n	8001e3a <HAL_RCC_OscConfig+0x522>
 8001e08:	4ba2      	ldr	r3, [pc, #648]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e0e:	4aa1      	ldr	r2, [pc, #644]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e18:	4b9e      	ldr	r3, [pc, #632]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e1e:	4a9d      	ldr	r2, [pc, #628]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e28:	4b9a      	ldr	r3, [pc, #616]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e2e:	4a99      	ldr	r2, [pc, #612]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e38:	e017      	b.n	8001e6a <HAL_RCC_OscConfig+0x552>
 8001e3a:	4b96      	ldr	r3, [pc, #600]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e40:	4a94      	ldr	r2, [pc, #592]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e4a:	4b92      	ldr	r3, [pc, #584]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e50:	4a90      	ldr	r2, [pc, #576]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e52:	f023 0304 	bic.w	r3, r3, #4
 8001e56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e5a:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e60:	4a8c      	ldr	r2, [pc, #560]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d016      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7ff faf7 	bl	8001464 <HAL_GetTick>
 8001e76:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff faf3 	bl	8001464 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e175      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e90:	4b80      	ldr	r3, [pc, #512]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0ed      	beq.n	8001e7a <HAL_RCC_OscConfig+0x562>
 8001e9e:	e015      	b.n	8001ecc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fae0 	bl	8001464 <HAL_GetTick>
 8001ea4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fadc 	bl	8001464 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e15e      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ebe:	4b75      	ldr	r3, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ed      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d036      	beq.n	8001f46 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d019      	beq.n	8001f14 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee0:	4b6c      	ldr	r3, [pc, #432]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a6b      	ldr	r2, [pc, #428]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff faba 	bl	8001464 <HAL_GetTick>
 8001ef0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001ef4:	f7ff fab6 	bl	8001464 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e13a      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x5dc>
 8001f12:	e018      	b.n	8001f46 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f14:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5e      	ldr	r2, [pc, #376]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001f1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7ff faa0 	bl	8001464 <HAL_GetTick>
 8001f24:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001f28:	f7ff fa9c 	bl	8001464 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e120      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f3a:	4b56      	ldr	r3, [pc, #344]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8115 	beq.w	800217a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b18      	cmp	r3, #24
 8001f54:	f000 80af 	beq.w	80020b6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	f040 8086 	bne.w	800206e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001f62:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a4b      	ldr	r2, [pc, #300]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fa79 	bl	8001464 <HAL_GetTick>
 8001f72:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001f76:	f7ff fa75 	bl	8001464 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0f9      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f9c:	f023 0303 	bic.w	r3, r3, #3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fa8:	0212      	lsls	r2, r2, #8
 8001faa:	430a      	orrs	r2, r1
 8001fac:	4939      	ldr	r1, [pc, #228]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	628b      	str	r3, [r1, #40]	; 0x28
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	025b      	lsls	r3, r3, #9
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	061b      	lsls	r3, r3, #24
 8001fde:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fe2:	492c      	ldr	r1, [pc, #176]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001fee:	f023 0310 	bic.w	r3, r3, #16
 8001ff2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f023 020c 	bic.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	491f      	ldr	r1, [pc, #124]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002018:	4313      	orrs	r3, r2
 800201a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f023 0220 	bic.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002028:	491a      	ldr	r1, [pc, #104]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 800202a:	4313      	orrs	r3, r2
 800202c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a15      	ldr	r2, [pc, #84]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff fa0d 	bl	8001464 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800204e:	f7ff fa09 	bl	8001464 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e08d      	b.n	800217c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x736>
 800206c:	e085      	b.n	800217a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207a:	f7ff f9f3 	bl	8001464 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002082:	f7ff f9ef 	bl	8001464 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d903      	bls.n	8002098 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e073      	b.n	800217c <HAL_RCC_OscConfig+0x864>
 8002094:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002098:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ee      	bne.n	8002082 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	4a36      	ldr	r2, [pc, #216]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 80020aa:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	6293      	str	r3, [r2, #40]	; 0x28
 80020b4:	e061      	b.n	800217a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d031      	beq.n	800212e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d12a      	bne.n	800212e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d122      	bne.n	800212e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d11a      	bne.n	800212e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	0a5b      	lsrs	r3, r3, #9
 80020fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d111      	bne.n	800212e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d108      	bne.n	800212e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	0e1b      	lsrs	r3, r3, #24
 8002120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e024      	b.n	800217c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	08db      	lsrs	r3, r3, #3
 8002138:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002140:	429a      	cmp	r2, r3
 8002142:	d01a      	beq.n	800217a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 800214a:	f023 0310 	bic.w	r3, r3, #16
 800214e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f988 	bl	8001464 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002156:	bf00      	nop
 8002158:	f7ff f984 	bl	8001464 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	4293      	cmp	r3, r2
 8002162:	d0f9      	beq.n	8002158 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_RCC_OscConfig+0x86c>)
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	44020c00 	.word	0x44020c00

08002188 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e19e      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b83      	ldr	r3, [pc, #524]	; (80023ac <HAL_RCC_ClockConfig+0x224>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b80      	ldr	r3, [pc, #512]	; (80023ac <HAL_RCC_ClockConfig+0x224>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 020f 	bic.w	r2, r3, #15
 80021b2:	497e      	ldr	r1, [pc, #504]	; (80023ac <HAL_RCC_ClockConfig+0x224>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <HAL_RCC_ClockConfig+0x224>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e186      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d012      	beq.n	80021fe <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	4b74      	ldr	r3, [pc, #464]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d909      	bls.n	80021fe <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80021ea:	4b71      	ldr	r3, [pc, #452]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	496d      	ldr	r1, [pc, #436]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d012      	beq.n	8002230 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002218:	429a      	cmp	r2, r3
 800221a:	d909      	bls.n	8002230 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800221c:	4b64      	ldr	r3, [pc, #400]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4961      	ldr	r1, [pc, #388]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 800222c:	4313      	orrs	r3, r2
 800222e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	4b5b      	ldr	r3, [pc, #364]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002248:	429a      	cmp	r2, r3
 800224a:	d908      	bls.n	800225e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800224c:	4b58      	ldr	r3, [pc, #352]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4955      	ldr	r1, [pc, #340]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 800225a:	4313      	orrs	r3, r2
 800225c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d010      	beq.n	800228c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	429a      	cmp	r2, r3
 8002278:	d908      	bls.n	800228c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800227a:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f023 020f 	bic.w	r2, r3, #15
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	494a      	ldr	r1, [pc, #296]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 8002288:	4313      	orrs	r3, r2
 800228a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8093 	beq.w	80023c0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80022a2:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d121      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e113      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d115      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e107      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0fb      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0f3      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80022f2:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	492c      	ldr	r1, [pc, #176]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 8002300:	4313      	orrs	r3, r2
 8002302:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002304:	f7ff f8ae 	bl	8001464 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d112      	bne.n	8002338 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7ff f8a6 	bl	8001464 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0d7      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0318 	and.w	r3, r3, #24
 8002332:	2b18      	cmp	r3, #24
 8002334:	d1ee      	bne.n	8002314 <HAL_RCC_ClockConfig+0x18c>
 8002336:	e043      	b.n	80023c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d112      	bne.n	8002366 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002342:	f7ff f88f 	bl	8001464 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0c0      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 0318 	and.w	r3, r3, #24
 8002360:	2b10      	cmp	r3, #16
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_ClockConfig+0x1ba>
 8002364:	e02c      	b.n	80023c0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d122      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7ff f878 	bl	8001464 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0a9      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x228>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 0318 	and.w	r3, r3, #24
 800238e:	2b08      	cmp	r3, #8
 8002390:	d1ee      	bne.n	8002370 <HAL_RCC_ClockConfig+0x1e8>
 8002392:	e015      	b.n	80023c0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7ff f866 	bl	8001464 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d906      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e097      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
 80023aa:	bf00      	nop
 80023ac:	40022000 	.word	0x40022000
 80023b0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	f003 0318 	and.w	r3, r3, #24
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e9      	bne.n	8002394 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d010      	beq.n	80023ee <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	429a      	cmp	r2, r3
 80023da:	d208      	bcs.n	80023ee <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80023dc:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f023 020f 	bic.w	r2, r3, #15
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	493e      	ldr	r1, [pc, #248]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ee:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <HAL_RCC_ClockConfig+0x360>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d210      	bcs.n	800241e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fc:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCC_ClockConfig+0x360>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 020f 	bic.w	r2, r3, #15
 8002404:	4938      	ldr	r1, [pc, #224]	; (80024e8 <HAL_RCC_ClockConfig+0x360>)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240c:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_ClockConfig+0x360>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e05d      	b.n	80024da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d010      	beq.n	800244c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002436:	429a      	cmp	r2, r3
 8002438:	d208      	bcs.n	800244c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4927      	ldr	r1, [pc, #156]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002466:	429a      	cmp	r2, r3
 8002468:	d209      	bcs.n	800247e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	491a      	ldr	r1, [pc, #104]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 800247a:	4313      	orrs	r3, r2
 800247c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002498:	429a      	cmp	r2, r3
 800249a:	d209      	bcs.n	80024b0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	490e      	ldr	r1, [pc, #56]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024b0:	f000 f822 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x35c>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490b      	ldr	r1, [pc, #44]	; (80024ec <HAL_RCC_ClockConfig+0x364>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_RCC_ClockConfig+0x368>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x36c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ff7e 	bl	80013d0 <HAL_InitTick>
 80024d4:	4603      	mov	r3, r0
 80024d6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80024d8:	7afb      	ldrb	r3, [r7, #11]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	44020c00 	.word	0x44020c00
 80024e8:	40022000 	.word	0x40022000
 80024ec:	08009f20 	.word	0x08009f20
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80024fe:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 0318 	and.w	r3, r3, #24
 8002506:	2b08      	cmp	r3, #8
 8002508:	d102      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800250a:	4b8a      	ldr	r3, [pc, #552]	; (8002734 <HAL_RCC_GetSysClockFreq+0x23c>)
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e107      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002510:	4b87      	ldr	r3, [pc, #540]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 0318 	and.w	r3, r3, #24
 8002518:	2b00      	cmp	r3, #0
 800251a:	d112      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800251c:	4b84      	ldr	r3, [pc, #528]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002528:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	4a81      	ldr	r2, [pc, #516]	; (8002738 <HAL_RCC_GetSysClockFreq+0x240>)
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e0f1      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <HAL_RCC_GetSysClockFreq+0x240>)
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	e0ee      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002542:	4b7b      	ldr	r3, [pc, #492]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 0318 	and.w	r3, r3, #24
 800254a:	2b10      	cmp	r3, #16
 800254c:	d102      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800254e:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_RCC_GetSysClockFreq+0x244>)
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e0e5      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002554:	4b76      	ldr	r3, [pc, #472]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 0318 	and.w	r3, r3, #24
 800255c:	2b18      	cmp	r3, #24
 800255e:	f040 80dd 	bne.w	800271c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002562:	4b73      	ldr	r3, [pc, #460]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800256c:	4b70      	ldr	r3, [pc, #448]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002576:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002578:	4b6d      	ldr	r3, [pc, #436]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002588:	08db      	lsrs	r3, r3, #3
 800258a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80b7 	beq.w	8002716 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0xbe>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d056      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x16a>
 80025b4:	e077      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80025b6:	4b5e      	ldr	r3, [pc, #376]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d02d      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80025c2:	4b5b      	ldr	r3, [pc, #364]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	4a5a      	ldr	r2, [pc, #360]	; (8002738 <HAL_RCC_GetSysClockFreq+0x240>)
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80025fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002600:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002740 <HAL_RCC_GetSysClockFreq+0x248>
 8002604:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002608:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800260c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002610:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002618:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800261c:	e065      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002628:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002744 <HAL_RCC_GetSysClockFreq+0x24c>
 800262c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002630:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 8002632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002640:	ed97 6a02 	vldr	s12, [r7, #8]
 8002644:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002740 <HAL_RCC_GetSysClockFreq+0x248>
 8002648:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800264c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002654:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002660:	e043      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002748 <HAL_RCC_GetSysClockFreq+0x250>
 8002670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002684:	ed97 6a02 	vldr	s12, [r7, #8]
 8002688:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002740 <HAL_RCC_GetSysClockFreq+0x248>
 800268c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002690:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002698:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800269c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80026a4:	e021      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026b0:	eddf 6a26 	vldr	s13, [pc, #152]	; 800274c <HAL_RCC_GetSysClockFreq+0x254>
 80026b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 80026ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80026c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80026cc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002740 <HAL_RCC_GetSysClockFreq+0x248>
 80026d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80026d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80026e8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_GetSysClockFreq+0x238>)
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	0a5b      	lsrs	r3, r3, #9
 80026f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f4:	3301      	adds	r3, #1
 80026f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002702:	edd7 6a06 	vldr	s13, [r7, #24]
 8002706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800270a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800270e:	ee17 3a90 	vmov	r3, s15
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	e004      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e001      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetSysClockFreq+0x240>)
 800271e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002720:	69fb      	ldr	r3, [r7, #28]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	44020c00 	.word	0x44020c00
 8002734:	003d0900 	.word	0x003d0900
 8002738:	03d09000 	.word	0x03d09000
 800273c:	017d7840 	.word	0x017d7840
 8002740:	46000000 	.word	0x46000000
 8002744:	4c742400 	.word	0x4c742400
 8002748:	4bbebc20 	.word	0x4bbebc20
 800274c:	4a742400 	.word	0x4a742400

08002750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002754:	f7ff fed0 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_RCC_GetHCLKFreq+0x2c>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800275e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002762:	4907      	ldr	r1, [pc, #28]	; (8002780 <HAL_RCC_GetHCLKFreq+0x30>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002766:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <HAL_RCC_GetHCLKFreq+0x34>)
 8002770:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_RCC_GetHCLKFreq+0x34>)
 8002774:	681b      	ldr	r3, [r3, #0]
}
 8002776:	4618      	mov	r0, r3
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	44020c00 	.word	0x44020c00
 8002780:	08009f20 	.word	0x08009f20
 8002784:	20000000 	.word	0x20000000

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800278c:	f7ff ffe0 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4904      	ldr	r1, [pc, #16]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	44020c00 	.word	0x44020c00
 80027b0:	08009f30 	.word	0x08009f30

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80027b8:	f7ff ffca 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4904      	ldr	r1, [pc, #16]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	44020c00 	.word	0x44020c00
 80027dc:	08009f30 	.word	0x08009f30

080027e0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80027e4:	f7ff ffb4 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_GetPCLK3Freq+0x24>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	0b1b      	lsrs	r3, r3, #12
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4904      	ldr	r1, [pc, #16]	; (8002808 <HAL_RCC_GetPCLK3Freq+0x28>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	44020c00 	.word	0x44020c00
 8002808:	08009f30 	.word	0x08009f30

0800280c <HAL_RCC_EnableCSS>:
  *         the Cortex-M NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSECSSON);
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_EnableCSS+0x1c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_RCC_EnableCSS+0x1c>)
 8002816:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	44020c00 	.word	0x44020c00

0800282c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_HSECSS))
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d105      	bne.n	800284a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800283e:	f000 f809 	bl	8002854 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_HSECSS);
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002848:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	44020c00 	.word	0x44020c00

08002854 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b0d8      	sub	sp, #352	; 0x160
 800286a:	af00      	add	r7, sp, #0
 800286c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002870:	2300      	movs	r3, #0
 8002872:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002876:	2300      	movs	r3, #0
 8002878:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800287c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002888:	2500      	movs	r5, #0
 800288a:	ea54 0305 	orrs.w	r3, r4, r5
 800288e:	d00b      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002890:	4bcd      	ldr	r3, [pc, #820]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002896:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800289a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	4ac9      	ldr	r2, [pc, #804]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028a2:	430b      	orrs	r3, r1
 80028a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f002 0801 	and.w	r8, r2, #1
 80028b4:	f04f 0900 	mov.w	r9, #0
 80028b8:	ea58 0309 	orrs.w	r3, r8, r9
 80028bc:	d042      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80028be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d823      	bhi.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	08002919 	.word	0x08002919
 80028d4:	080028e9 	.word	0x080028e9
 80028d8:	080028fd 	.word	0x080028fd
 80028dc:	08002919 	.word	0x08002919
 80028e0:	08002919 	.word	0x08002919
 80028e4:	08002919 	.word	0x08002919
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028ec:	3308      	adds	r3, #8
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 feda 	bl	80076a8 <RCCEx_PLL2_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80028fa:	e00e      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002900:	3330      	adds	r3, #48	; 0x30
 8002902:	4618      	mov	r0, r3
 8002904:	f004 ff68 	bl	80077d8 <RCCEx_PLL3_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800290e:	e004      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002916:	e000      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800291a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002922:	4ba9      	ldr	r3, [pc, #676]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002928:	f023 0107 	bic.w	r1, r3, #7
 800292c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002932:	4aa5      	ldr	r2, [pc, #660]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002934:	430b      	orrs	r3, r1
 8002936:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800293a:	e003      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002940:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002944:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f002 0a02 	and.w	sl, r2, #2
 8002950:	f04f 0b00 	mov.w	fp, #0
 8002954:	ea5a 030b 	orrs.w	r3, sl, fp
 8002958:	f000 8088 	beq.w	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800295c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	2b28      	cmp	r3, #40	; 0x28
 8002964:	d868      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002966:	a201      	add	r2, pc, #4	; (adr r2, 800296c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	08002a41 	.word	0x08002a41
 8002970:	08002a39 	.word	0x08002a39
 8002974:	08002a39 	.word	0x08002a39
 8002978:	08002a39 	.word	0x08002a39
 800297c:	08002a39 	.word	0x08002a39
 8002980:	08002a39 	.word	0x08002a39
 8002984:	08002a39 	.word	0x08002a39
 8002988:	08002a39 	.word	0x08002a39
 800298c:	08002a11 	.word	0x08002a11
 8002990:	08002a39 	.word	0x08002a39
 8002994:	08002a39 	.word	0x08002a39
 8002998:	08002a39 	.word	0x08002a39
 800299c:	08002a39 	.word	0x08002a39
 80029a0:	08002a39 	.word	0x08002a39
 80029a4:	08002a39 	.word	0x08002a39
 80029a8:	08002a39 	.word	0x08002a39
 80029ac:	08002a25 	.word	0x08002a25
 80029b0:	08002a39 	.word	0x08002a39
 80029b4:	08002a39 	.word	0x08002a39
 80029b8:	08002a39 	.word	0x08002a39
 80029bc:	08002a39 	.word	0x08002a39
 80029c0:	08002a39 	.word	0x08002a39
 80029c4:	08002a39 	.word	0x08002a39
 80029c8:	08002a39 	.word	0x08002a39
 80029cc:	08002a41 	.word	0x08002a41
 80029d0:	08002a39 	.word	0x08002a39
 80029d4:	08002a39 	.word	0x08002a39
 80029d8:	08002a39 	.word	0x08002a39
 80029dc:	08002a39 	.word	0x08002a39
 80029e0:	08002a39 	.word	0x08002a39
 80029e4:	08002a39 	.word	0x08002a39
 80029e8:	08002a39 	.word	0x08002a39
 80029ec:	08002a41 	.word	0x08002a41
 80029f0:	08002a39 	.word	0x08002a39
 80029f4:	08002a39 	.word	0x08002a39
 80029f8:	08002a39 	.word	0x08002a39
 80029fc:	08002a39 	.word	0x08002a39
 8002a00:	08002a39 	.word	0x08002a39
 8002a04:	08002a39 	.word	0x08002a39
 8002a08:	08002a39 	.word	0x08002a39
 8002a0c:	08002a41 	.word	0x08002a41
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a14:	3308      	adds	r3, #8
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 fe46 	bl	80076a8 <RCCEx_PLL2_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002a22:	e00e      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a28:	3330      	adds	r3, #48	; 0x30
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fed4 	bl	80077d8 <RCCEx_PLL3_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002a36:	e004      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002a3e:	e000      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a50:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5a:	4a5b      	ldr	r2, [pc, #364]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a62:	e003      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f002 0304 	and.w	r3, r2, #4
 8002a78:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a82:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002a86:	460b      	mov	r3, r1
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	d04e      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a92:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a96:	d02c      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002a98:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a9c:	d825      	bhi.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa2:	d028      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa8:	d81f      	bhi.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8002aac:	d025      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002aae:	2bc0      	cmp	r3, #192	; 0xc0
 8002ab0:	d81b      	bhi.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002ab2:	2b80      	cmp	r3, #128	; 0x80
 8002ab4:	d00f      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d817      	bhi.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01f      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d113      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 fded 	bl	80076a8 <RCCEx_PLL2_Config>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002ad4:	e014      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ada:	3330      	adds	r3, #48	; 0x30
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 fe7b 	bl	80077d8 <RCCEx_PLL3_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002af0:	e006      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002af2:	bf00      	nop
 8002af4:	e004      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002af6:	bf00      	nop
 8002af8:	e002      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002b08:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b0e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b18:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b20:	e003      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f002 0308 	and.w	r3, r2, #8
 8002b36:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002b40:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002b44:	460b      	mov	r3, r1
 8002b46:	4313      	orrs	r3, r2
 8002b48:	d056      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b50:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b54:	d031      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002b56:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b5a:	d82a      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b60:	d02d      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b66:	d824      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b6c:	d029      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002b6e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b72:	d81e      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b78:	d011      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7e:	d818      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d023      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b88:	d113      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b8e:	3308      	adds	r3, #8
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 fd89 	bl	80076a8 <RCCEx_PLL2_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002b9c:	e017      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ba2:	3330      	adds	r3, #48	; 0x30
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 fe17 	bl	80077d8 <RCCEx_PLL3_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002bb0:	e00d      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002bb8:	e009      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002bba:	bf00      	nop
 8002bbc:	e007      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002bbe:	bf00      	nop
 8002bc0:	e005      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002bc2:	bf00      	nop
 8002bc4:	e003      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002bc6:	bf00      	nop
 8002bc8:	44020c00 	.word	0x44020c00
        break;
 8002bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002bd6:	4bbb      	ldr	r3, [pc, #748]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bdc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002be6:	4ab7      	ldr	r2, [pc, #732]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002be8:	430b      	orrs	r3, r1
 8002bea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bee:	e003      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bf4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f002 0310 	and.w	r3, r2, #16
 8002c04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002c0e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002c12:	460b      	mov	r3, r1
 8002c14:	4313      	orrs	r3, r2
 8002c16:	d053      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002c22:	d031      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002c24:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002c28:	d82a      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c2e:	d02d      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c34:	d824      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c3a:	d029      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002c3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c40:	d81e      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c46:	d011      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4c:	d818      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d020      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	d113      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fd22 	bl	80076a8 <RCCEx_PLL2_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002c6a:	e014      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c70:	3330      	adds	r3, #48	; 0x30
 8002c72:	4618      	mov	r0, r3
 8002c74:	f004 fdb0 	bl	80077d8 <RCCEx_PLL3_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c86:	e006      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c88:	bf00      	nop
 8002c8a:	e004      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c8c:	bf00      	nop
 8002c8e:	e002      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002c9e:	4b89      	ldr	r3, [pc, #548]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ca4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002ca8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cae:	4a85      	ldr	r2, [pc, #532]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cb6:	e003      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002cbc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f002 0320 	and.w	r3, r2, #32
 8002ccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002cd6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	d053      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002cea:	d031      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002cec:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002cf0:	d82a      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf6:	d02d      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cfc:	d824      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002cfe:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002d02:	d029      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002d04:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002d08:	d81e      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d011      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d14:	d818      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d020      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1e:	d113      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d24:	3308      	adds	r3, #8
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fcbe 	bl	80076a8 <RCCEx_PLL2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002d32:	e014      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d38:	3330      	adds	r3, #48	; 0x30
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 fd4c 	bl	80077d8 <RCCEx_PLL3_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002d46:	e00a      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d4e:	e006      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002d50:	bf00      	nop
 8002d52:	e004      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002d54:	bf00      	nop
 8002d56:	e002      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002d58:	bf00      	nop
 8002d5a:	e000      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002d68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d6c:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8002d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a53      	ldr	r2, [pc, #332]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d7e:	e003      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d84:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002d94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d9e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8002da2:	460b      	mov	r3, r1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	d053      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002db2:	d031      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002db4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002db8:	d82a      	bhi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dbe:	d02d      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc4:	d824      	bhi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002dc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dca:	d029      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002dcc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dd0:	d81e      	bhi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002dd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd6:	d011      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002dd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ddc:	d818      	bhi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d020      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002de6:	d113      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dec:	3308      	adds	r3, #8
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 fc5a 	bl	80076a8 <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002dfa:	e014      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e00:	3330      	adds	r3, #48	; 0x30
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 fce8 	bl	80077d8 <RCCEx_PLL3_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e16:	e006      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002e18:	bf00      	nop
 8002e1a:	e004      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002e1c:	bf00      	nop
 8002e1e:	e002      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002e20:	bf00      	nop
 8002e22:	e000      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e34:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002e40:	430b      	orrs	r3, r1
 8002e42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e46:	e003      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002e5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e66:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	d055      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e76:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002e7a:	d033      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002e7c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002e80:	d82c      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e86:	d02f      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002e88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e8c:	d826      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002e8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e92:	d02b      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002e94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e98:	d820      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea4:	d81a      	bhi.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d022      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eae:	d115      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f004 fbf6 	bl	80076a8 <RCCEx_PLL2_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002ec2:	e016      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002ec4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ecc:	3330      	adds	r3, #48	; 0x30
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fc82 	bl	80077d8 <RCCEx_PLL3_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002ee2:	e006      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e004      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002ee8:	bf00      	nop
 8002eea:	e002      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002efa:	4bbb      	ldr	r3, [pc, #748]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f00:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002f04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f0a:	4ab7      	ldr	r2, [pc, #732]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f12:	e003      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002f28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002f32:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002f36:	460b      	mov	r3, r1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	d053      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8002f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f42:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002f46:	d031      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002f48:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002f4c:	d82a      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f52:	d02d      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f58:	d824      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002f5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f5e:	d029      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002f60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f64:	d81e      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f6a:	d011      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f70:	d818      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d020      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002f76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f7a:	d113      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f80:	3308      	adds	r3, #8
 8002f82:	4618      	mov	r0, r3
 8002f84:	f004 fb90 	bl	80076a8 <RCCEx_PLL2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002f8e:	e014      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f94:	3330      	adds	r3, #48	; 0x30
 8002f96:	4618      	mov	r0, r3
 8002f98:	f004 fc1e 	bl	80077d8 <RCCEx_PLL3_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002fa2:	e00a      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002faa:	e006      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002fac:	bf00      	nop
 8002fae:	e004      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002fb0:	bf00      	nop
 8002fb2:	e002      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8002fc2:	4b89      	ldr	r3, [pc, #548]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fc8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd2:	4a85      	ldr	r2, [pc, #532]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fda:	e003      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fdc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002fe0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002ff0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002ffa:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002ffe:	460b      	mov	r3, r1
 8003000:	4313      	orrs	r3, r2
 8003002:	d055      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003010:	d031      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003012:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003016:	d82a      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301c:	d02d      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800301e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003022:	d824      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003024:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003028:	d029      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800302a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800302e:	d81e      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003034:	d011      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800303a:	d818      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003044:	d113      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003046:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800304a:	3308      	adds	r3, #8
 800304c:	4618      	mov	r0, r3
 800304e:	f004 fb2b 	bl	80076a8 <RCCEx_PLL2_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003058:	e014      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800305a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800305e:	3330      	adds	r3, #48	; 0x30
 8003060:	4618      	mov	r0, r3
 8003062:	f004 fbb9 	bl	80077d8 <RCCEx_PLL3_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800306c:	e00a      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003076:	bf00      	nop
 8003078:	e004      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800307a:	bf00      	nop
 800307c:	e002      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003084:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800308c:	4b56      	ldr	r3, [pc, #344]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800308e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003092:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8003096:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800309a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800309e:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030a6:	e003      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80030b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80030bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030c6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80030ca:	460b      	mov	r3, r1
 80030cc:	4313      	orrs	r3, r2
 80030ce:	d044      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80030d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d823      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	0800312d 	.word	0x0800312d
 80030e8:	080030fd 	.word	0x080030fd
 80030ec:	08003111 	.word	0x08003111
 80030f0:	0800312d 	.word	0x0800312d
 80030f4:	0800312d 	.word	0x0800312d
 80030f8:	0800312d 	.word	0x0800312d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003100:	3308      	adds	r3, #8
 8003102:	4618      	mov	r0, r3
 8003104:	f004 fad0 	bl	80076a8 <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800310e:	e00e      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003110:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003114:	3330      	adds	r3, #48	; 0x30
 8003116:	4618      	mov	r0, r3
 8003118:	f004 fb5e 	bl	80077d8 <RCCEx_PLL3_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003122:	e004      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800312a:	e000      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800312c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003138:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800313c:	f023 0107 	bic.w	r1, r3, #7
 8003140:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800314a:	430b      	orrs	r3, r1
 800314c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003150:	e003      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003156:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800315a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003166:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003170:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003174:	460b      	mov	r3, r1
 8003176:	4313      	orrs	r3, r2
 8003178:	d04f      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800317a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	2b50      	cmp	r3, #80	; 0x50
 8003184:	d029      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003186:	2b50      	cmp	r3, #80	; 0x50
 8003188:	d823      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d027      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d81f      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003192:	2b30      	cmp	r3, #48	; 0x30
 8003194:	d025      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003196:	2b30      	cmp	r3, #48	; 0x30
 8003198:	d81b      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800319a:	2b20      	cmp	r3, #32
 800319c:	d00f      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d817      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d022      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x988>
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d113      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031ae:	3308      	adds	r3, #8
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 fa79 	bl	80076a8 <RCCEx_PLL2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80031bc:	e017      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031c2:	3330      	adds	r3, #48	; 0x30
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 fb07 	bl	80077d8 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80031d0:	e00d      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031d8:	e009      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80031da:	bf00      	nop
 80031dc:	e007      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80031de:	bf00      	nop
 80031e0:	e005      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80031e2:	bf00      	nop
 80031e4:	e003      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80031e6:	bf00      	nop
 80031e8:	44020c00 	.word	0x44020c00
        break;
 80031ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80031f6:	4baf      	ldr	r3, [pc, #700]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80031f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80031fc:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	4aaa      	ldr	r2, [pc, #680]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800320a:	430b      	orrs	r3, r1
 800320c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003212:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003216:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800321a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003226:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003230:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003234:	460b      	mov	r3, r1
 8003236:	4313      	orrs	r3, r2
 8003238:	d055      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800323a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800323e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003242:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003246:	d031      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003248:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800324c:	d82a      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800324e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003252:	d02d      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003258:	d824      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800325a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800325e:	d029      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003260:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003264:	d81e      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326a:	d011      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800326c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003270:	d818      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d020      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003276:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327a:	d113      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800327c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003280:	3308      	adds	r3, #8
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fa10 	bl	80076a8 <RCCEx_PLL2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800328e:	e014      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003294:	3330      	adds	r3, #48	; 0x30
 8003296:	4618      	mov	r0, r3
 8003298:	f004 fa9e 	bl	80077d8 <RCCEx_PLL3_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80032a2:	e00a      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032aa:	e006      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80032ac:	bf00      	nop
 80032ae:	e004      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80032b0:	bf00      	nop
 80032b2:	e002      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80032b4:	bf00      	nop
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80032b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10d      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80032c2:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80032c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80032cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d4:	4a77      	ldr	r2, [pc, #476]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80032d6:	430b      	orrs	r3, r1
 80032d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032dc:	e003      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80032f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80032fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003300:	460b      	mov	r3, r1
 8003302:	4313      	orrs	r3, r2
 8003304:	d03d      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003306:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003312:	d01b      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003314:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003318:	d814      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800331a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331e:	d017      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003324:	d80e      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d014      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d109      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003330:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003334:	3330      	adds	r3, #48	; 0x30
 8003336:	4618      	mov	r0, r3
 8003338:	f004 fa4e 	bl	80077d8 <RCCEx_PLL3_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003342:	e008      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800334a:	e004      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800334c:	bf00      	nop
 800334e:	e002      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003350:	bf00      	nop
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003356:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10d      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800335e:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003360:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003364:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003368:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	4a50      	ldr	r2, [pc, #320]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003372:	430b      	orrs	r3, r1
 8003374:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003378:	e003      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800337e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003382:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800338e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003392:	2300      	movs	r3, #0
 8003394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003398:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800339c:	460b      	mov	r3, r1
 800339e:	4313      	orrs	r3, r2
 80033a0:	d03d      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80033a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033ae:	d01b      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80033b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033b4:	d814      	bhi.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80033b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ba:	d017      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80033bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033c0:	d80e      	bhi.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d014      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80033c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ca:	d109      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033d0:	3330      	adds	r3, #48	; 0x30
 80033d2:	4618      	mov	r0, r3
 80033d4:	f004 fa00 	bl	80077d8 <RCCEx_PLL3_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80033de:	e008      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80033e6:	e004      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80033e8:	bf00      	nop
 80033ea:	e002      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80033ec:	bf00      	nop
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80033f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10d      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80033fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003400:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003404:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800340e:	430b      	orrs	r3, r1
 8003410:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800341a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800341e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800342a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003434:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003438:	460b      	mov	r3, r1
 800343a:	4313      	orrs	r3, r2
 800343c:	d040      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800343e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800344a:	d01b      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800344c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003450:	d814      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003456:	d017      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345c:	d80e      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d014      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003466:	d109      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003468:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800346c:	3330      	adds	r3, #48	; 0x30
 800346e:	4618      	mov	r0, r3
 8003470:	f004 f9b2 	bl	80077d8 <RCCEx_PLL3_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800347a:	e008      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003482:	e004      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003484:	bf00      	nop
 8003486:	e002      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003488:	bf00      	nop
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800348c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003492:	2b00      	cmp	r3, #0
 8003494:	d110      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800349c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80034a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034a8:	4a02      	ldr	r2, [pc, #8]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80034aa:	430b      	orrs	r3, r1
 80034ac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80034b2:	bf00      	nop
 80034b4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	2100      	movs	r1, #0
 80034ca:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80034d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d03d      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80034e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ec:	d01b      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80034ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034f2:	d814      	bhi.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80034f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f8:	d017      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80034fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fe:	d80e      	bhi.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d014      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003508:	d109      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800350a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800350e:	3330      	adds	r3, #48	; 0x30
 8003510:	4618      	mov	r0, r3
 8003512:	f004 f961 	bl	80077d8 <RCCEx_PLL3_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800351c:	e008      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003524:	e004      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003526:	bf00      	nop
 8003528:	e002      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800352e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003530:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003538:	4bbe      	ldr	r3, [pc, #760]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800353a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800353e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003542:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800354a:	4aba      	ldr	r2, [pc, #744]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800354c:	430b      	orrs	r3, r1
 800354e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003552:	e003      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003558:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800355c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003572:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003576:	460b      	mov	r3, r1
 8003578:	4313      	orrs	r3, r2
 800357a:	d035      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800357c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003580:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003588:	d015      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800358a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800358e:	d80e      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d012      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003598:	d109      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800359a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800359e:	3330      	adds	r3, #48	; 0x30
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 f919 	bl	80077d8 <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035b4:	e002      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80035ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10d      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80035c4:	4b9b      	ldr	r3, [pc, #620]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80035c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035ca:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80035ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035d6:	4a97      	ldr	r2, [pc, #604]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80035d8:	430b      	orrs	r3, r1
 80035da:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80035de:	e003      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035e4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	2100      	movs	r1, #0
 80035f2:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80035f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003602:	460b      	mov	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003608:	4b8a      	ldr	r3, [pc, #552]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a89      	ldr	r2, [pc, #548]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800360e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003612:	61d3      	str	r3, [r2, #28]
 8003614:	4b87      	ldr	r3, [pc, #540]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003616:	69d9      	ldr	r1, [r3, #28]
 8003618:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800361c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003620:	4a84      	ldr	r2, [pc, #528]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003622:	430b      	orrs	r3, r1
 8003624:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003626:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003632:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800363c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003640:	460b      	mov	r3, r1
 8003642:	4313      	orrs	r3, r2
 8003644:	d055      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003646:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800364a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800364e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003652:	d031      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003654:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003658:	d82a      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365e:	d02d      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d824      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800366a:	d029      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800366c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003670:	d81e      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003676:	d011      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367c:	d818      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d020      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003686:	d113      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003688:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800368c:	3308      	adds	r3, #8
 800368e:	4618      	mov	r0, r3
 8003690:	f004 f80a 	bl	80076a8 <RCCEx_PLL2_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800369a:	e014      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800369c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036a0:	3330      	adds	r3, #48	; 0x30
 80036a2:	4618      	mov	r0, r3
 80036a4:	f004 f898 	bl	80077d8 <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80036ae:	e00a      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80036b6:	e006      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80036b8:	bf00      	nop
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80036bc:	bf00      	nop
 80036be:	e002      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80036c0:	bf00      	nop
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80036ce:	4b59      	ldr	r3, [pc, #356]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80036d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80036d4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80036d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036e0:	4a54      	ldr	r2, [pc, #336]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80036e2:	430b      	orrs	r3, r1
 80036e4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80036fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003708:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800370c:	460b      	mov	r3, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	d055      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003712:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800371a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800371e:	d031      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003720:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003724:	d82a      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372a:	d02d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800372c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003730:	d824      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003732:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003736:	d029      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003738:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800373c:	d81e      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003742:	d011      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003748:	d818      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d020      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800374e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003752:	d113      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003754:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003758:	3308      	adds	r3, #8
 800375a:	4618      	mov	r0, r3
 800375c:	f003 ffa4 	bl	80076a8 <RCCEx_PLL2_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003766:	e014      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003768:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800376c:	3330      	adds	r3, #48	; 0x30
 800376e:	4618      	mov	r0, r3
 8003770:	f004 f832 	bl	80077d8 <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800377a:	e00a      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003782:	e006      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003784:	bf00      	nop
 8003786:	e004      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003788:	bf00      	nop
 800378a:	e002      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003792:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800379a:	4b26      	ldr	r3, [pc, #152]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800379c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80037a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037ac:	4a21      	ldr	r2, [pc, #132]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037ba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80037be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	2100      	movs	r1, #0
 80037c8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d057      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80037de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ea:	d033      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80037ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f0:	d82c      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80037f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f6:	d02f      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80037f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037fc:	d826      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80037fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003802:	d02b      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003804:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003808:	d820      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800380a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800380e:	d013      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003814:	d81a      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d022      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d115      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003820:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003824:	3308      	adds	r3, #8
 8003826:	4618      	mov	r0, r3
 8003828:	f003 ff3e 	bl	80076a8 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003832:	e016      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003834:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800383c:	3330      	adds	r3, #48	; 0x30
 800383e:	4618      	mov	r0, r3
 8003840:	f003 ffca 	bl	80077d8 <RCCEx_PLL3_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800384a:	e00a      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003852:	e006      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003854:	bf00      	nop
 8003856:	e004      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003858:	bf00      	nop
 800385a:	e002      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003862:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800386a:	4bbb      	ldr	r3, [pc, #748]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800386c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003870:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003874:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800387c:	4ab6      	ldr	r2, [pc, #728]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800387e:	430b      	orrs	r3, r1
 8003880:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003884:	e003      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800388a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800388e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	2100      	movs	r1, #0
 8003898:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80038a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d055      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80038ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038b6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80038ba:	d031      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80038bc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80038c0:	d82a      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80038c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c6:	d02d      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038cc:	d824      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80038ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038d2:	d029      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80038d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038d8:	d81e      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80038da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038de:	d011      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80038e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038e4:	d818      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d020      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80038ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ee:	d113      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f4:	3308      	adds	r3, #8
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 fed6 	bl	80076a8 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003902:	e014      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003904:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003908:	3330      	adds	r3, #48	; 0x30
 800390a:	4618      	mov	r0, r3
 800390c:	f003 ff64 	bl	80077d8 <RCCEx_PLL3_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003916:	e00a      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800391e:	e006      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003920:	bf00      	nop
 8003922:	e004      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003924:	bf00      	nop
 8003926:	e002      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003928:	bf00      	nop
 800392a:	e000      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800392c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003938:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800393c:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003940:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003948:	4a83      	ldr	r2, [pc, #524]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800394a:	430b      	orrs	r3, r1
 800394c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003950:	e003      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003952:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003956:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800395a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	2100      	movs	r1, #0
 8003964:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003970:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	d055      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800397a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800397e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003982:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003986:	d031      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003988:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800398c:	d82a      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800398e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003992:	d02d      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003998:	d824      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800399a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800399e:	d029      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80039a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a4:	d81e      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80039a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039aa:	d011      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80039ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b0:	d818      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d020      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80039b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039ba:	d113      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039c0:	3308      	adds	r3, #8
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 fe70 	bl	80076a8 <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80039ce:	e014      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039d4:	3330      	adds	r3, #48	; 0x30
 80039d6:	4618      	mov	r0, r3
 80039d8:	f003 fefe 	bl	80077d8 <RCCEx_PLL3_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80039e2:	e00a      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039ea:	e006      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80039ec:	bf00      	nop
 80039ee:	e004      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80039f0:	bf00      	nop
 80039f2:	e002      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80039f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10d      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003a02:	4b55      	ldr	r3, [pc, #340]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003a08:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a14:	4a50      	ldr	r2, [pc, #320]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003a16:	430b      	orrs	r3, r1
 8003a18:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a22:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a3c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003a40:	460b      	mov	r3, r1
 8003a42:	4313      	orrs	r3, r2
 8003a44:	d055      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a52:	d031      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a58:	d82a      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5e:	d02d      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d824      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a6a:	d029      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003a6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a70:	d81e      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a76:	d011      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7c:	d818      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d020      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a86:	d113      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 fe0a 	bl	80076a8 <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aa0:	3330      	adds	r3, #48	; 0x30
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fe98 	bl	80077d8 <RCCEx_PLL3_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ab6:	e006      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003ab8:	bf00      	nop
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003abc:	bf00      	nop
 8003abe:	e002      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003ad0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ad4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003ae8:	e003      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003aee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003af2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003afe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d055      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b1e:	d035      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003b20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b24:	d82e      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003b26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b2a:	d031      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003b2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b30:	d828      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b36:	d01b      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b3c:	d822      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b46:	d009      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003b48:	e01c      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4a:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	4a02      	ldr	r2, [pc, #8]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b56:	e01c      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003b58:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b60:	3308      	adds	r3, #8
 8003b62:	4618      	mov	r0, r3
 8003b64:	f003 fda0 	bl	80076a8 <RCCEx_PLL2_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b6e:	e010      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b74:	3330      	adds	r3, #48	; 0x30
 8003b76:	4618      	mov	r0, r3
 8003b78:	f003 fe2e 	bl	80077d8 <RCCEx_PLL3_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b82:	e006      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003b9a:	4bc3      	ldr	r3, [pc, #780]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ba0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ba8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bac:	4abe      	ldr	r2, [pc, #760]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bb4:	e003      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003bca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bd4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	d051      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003be2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bea:	d033      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf0:	d82c      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003bf2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003bf6:	d02d      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003bf8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003bfc:	d826      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c02:	d019      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c08:	d820      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8003c0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c12:	d007      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003c14:	e01a      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c16:	4ba4      	ldr	r3, [pc, #656]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	4aa3      	ldr	r2, [pc, #652]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c20:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c22:	e018      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c28:	3308      	adds	r3, #8
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 fd3c 	bl	80076a8 <RCCEx_PLL2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c36:	e00e      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c3c:	3330      	adds	r3, #48	; 0x30
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f003 fdca 	bl	80077d8 <RCCEx_PLL3_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10d      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003c5e:	4b92      	ldr	r3, [pc, #584]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c64:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8003c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c70:	4a8d      	ldr	r2, [pc, #564]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c78:	e003      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c7e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003c8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c90:	2300      	movs	r3, #0
 8003c92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d032      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ca2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d80f      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d211      	bcs.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d911      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d109      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cba:	3308      	adds	r3, #8
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f003 fcf3 	bl	80076a8 <RCCEx_PLL2_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cd0:	e002      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10d      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003ce0:	4b71      	ldr	r3, [pc, #452]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ce6:	f023 0107 	bic.w	r1, r3, #7
 8003cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003cf2:	4a6d      	ldr	r2, [pc, #436]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cfa:	e003      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d00:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	6739      	str	r1, [r7, #112]	; 0x70
 8003d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d14:	677b      	str	r3, [r7, #116]	; 0x74
 8003d16:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d024      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d36:	e002      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003d46:	4b58      	ldr	r3, [pc, #352]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d4c:	f023 0108 	bic.w	r1, r3, #8
 8003d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d58:	4a53      	ldr	r2, [pc, #332]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d66:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d78:	2300      	movs	r3, #0
 8003d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d7c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f000 80b9 	beq.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003d88:	4b48      	ldr	r3, [pc, #288]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	4a47      	ldr	r2, [pc, #284]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d94:	f7fd fb66 	bl	8001464 <HAL_GetTick>
 8003d98:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d9c:	e00b      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9e:	f7fd fb61 	bl	8001464 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d903      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003db4:	e005      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0ed      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003dc2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 8093 	bne.w	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dcc:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003dda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d023      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003de6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003dea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01b      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003df2:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e06:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e20:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d019      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fd fb15 	bl	8001464 <HAL_GetTick>
 8003e3a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3e:	e00d      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e40:	f7fd fb10 	bl	8001464 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d903      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8003e5a:	e006      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0ea      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003e6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d13a      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e76:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e82:	d115      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e90:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e9e:	4a02      	ldr	r2, [pc, #8]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	61d3      	str	r3, [r2, #28]
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003ea6:	bf00      	nop
 8003ea8:	44020c00 	.word	0x44020c00
 8003eac:	44020800 	.word	0x44020800
 8003eb0:	4b9f      	ldr	r3, [pc, #636]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	4a9e      	ldr	r2, [pc, #632]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003eb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eba:	61d3      	str	r3, [r2, #28]
 8003ebc:	4b9c      	ldr	r3, [pc, #624]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ec2:	4a9b      	ldr	r2, [pc, #620]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ecc:	4b98      	ldr	r3, [pc, #608]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ece:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ed6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	4a94      	ldr	r2, [pc, #592]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ee6:	e008      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ee8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003eec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ef6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003efa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003f06:	663b      	str	r3, [r7, #96]	; 0x60
 8003f08:	2300      	movs	r3, #0
 8003f0a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f0c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003f10:	460b      	mov	r3, r1
 8003f12:	4313      	orrs	r3, r2
 8003f14:	d035      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f1e:	2b30      	cmp	r3, #48	; 0x30
 8003f20:	d014      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003f22:	2b30      	cmp	r3, #48	; 0x30
 8003f24:	d80e      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d012      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d80a      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d010      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d106      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f36:	4b7e      	ldr	r3, [pc, #504]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	4a7d      	ldr	r2, [pc, #500]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f40:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f42:	e008      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003f5e:	4b74      	ldr	r3, [pc, #464]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f64:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f6c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003f70:	4a6f      	ldr	r2, [pc, #444]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003f72:	430b      	orrs	r3, r1
 8003f74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f78:	e003      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f7e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003f8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f90:	2300      	movs	r3, #0
 8003f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f94:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	d033      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fa2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d007      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8003fae:	e010      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb0:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	4a5e      	ldr	r2, [pc, #376]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003fbc:	e00d      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f003 fb6f 	bl	80076a8 <RCCEx_PLL2_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003fe2:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003fe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fe8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ff0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003ff4:	4a4e      	ldr	r2, [pc, #312]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004002:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004006:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004012:	653b      	str	r3, [r7, #80]	; 0x50
 8004014:	2300      	movs	r3, #0
 8004016:	657b      	str	r3, [r7, #84]	; 0x54
 8004018:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d033      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004022:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004026:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800402e:	2b80      	cmp	r3, #128	; 0x80
 8004030:	d007      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004032:	e010      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004034:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	4a3d      	ldr	r2, [pc, #244]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800403a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004040:	e00d      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004042:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004046:	3308      	adds	r3, #8
 8004048:	4618      	mov	r0, r3
 800404a:	f003 fb2d 	bl	80076a8 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004054:	e003      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10d      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004066:	4b32      	ldr	r3, [pc, #200]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004068:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800406c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004070:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004074:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004078:	4a2d      	ldr	r2, [pc, #180]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800407a:	430b      	orrs	r3, r1
 800407c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004086:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800408a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004096:	64bb      	str	r3, [r7, #72]	; 0x48
 8004098:	2300      	movs	r3, #0
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80040a0:	460b      	mov	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	d04a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80040a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d827      	bhi.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80040b2:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b8:	080040cd 	.word	0x080040cd
 80040bc:	080040db 	.word	0x080040db
 80040c0:	080040ef 	.word	0x080040ef
 80040c4:	0800410b 	.word	0x0800410b
 80040c8:	0800410b 	.word	0x0800410b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80040d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80040d8:	e018      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040de:	3308      	adds	r3, #8
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 fae1 	bl	80076a8 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80040ec:	e00e      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040f2:	3330      	adds	r3, #48	; 0x30
 80040f4:	4618      	mov	r0, r3
 80040f6:	f003 fb6f 	bl	80077d8 <RCCEx_PLL3_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004100:	e004      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004108:	e000      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800410a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800411a:	f023 0107 	bic.w	r1, r3, #7
 800411e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004126:	4a02      	ldr	r2, [pc, #8]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004128:	430b      	orrs	r3, r1
 800412a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800412e:	e005      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004130:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004138:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800413c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004148:	643b      	str	r3, [r7, #64]	; 0x40
 800414a:	2300      	movs	r3, #0
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
 800414e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004152:	460b      	mov	r3, r1
 8004154:	4313      	orrs	r3, r2
 8004156:	f000 8081 	beq.w	800425c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800415a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800415e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004162:	2b20      	cmp	r3, #32
 8004164:	d85f      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	080041f1 	.word	0x080041f1
 8004170:	08004227 	.word	0x08004227
 8004174:	08004227 	.word	0x08004227
 8004178:	08004227 	.word	0x08004227
 800417c:	08004227 	.word	0x08004227
 8004180:	08004227 	.word	0x08004227
 8004184:	08004227 	.word	0x08004227
 8004188:	08004227 	.word	0x08004227
 800418c:	080041ff 	.word	0x080041ff
 8004190:	08004227 	.word	0x08004227
 8004194:	08004227 	.word	0x08004227
 8004198:	08004227 	.word	0x08004227
 800419c:	08004227 	.word	0x08004227
 80041a0:	08004227 	.word	0x08004227
 80041a4:	08004227 	.word	0x08004227
 80041a8:	08004227 	.word	0x08004227
 80041ac:	08004213 	.word	0x08004213
 80041b0:	08004227 	.word	0x08004227
 80041b4:	08004227 	.word	0x08004227
 80041b8:	08004227 	.word	0x08004227
 80041bc:	08004227 	.word	0x08004227
 80041c0:	08004227 	.word	0x08004227
 80041c4:	08004227 	.word	0x08004227
 80041c8:	08004227 	.word	0x08004227
 80041cc:	0800422f 	.word	0x0800422f
 80041d0:	08004227 	.word	0x08004227
 80041d4:	08004227 	.word	0x08004227
 80041d8:	08004227 	.word	0x08004227
 80041dc:	08004227 	.word	0x08004227
 80041e0:	08004227 	.word	0x08004227
 80041e4:	08004227 	.word	0x08004227
 80041e8:	08004227 	.word	0x08004227
 80041ec:	0800422f 	.word	0x0800422f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f0:	4bab      	ldr	r3, [pc, #684]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	4aaa      	ldr	r2, [pc, #680]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80041fc:	e018      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004202:	3308      	adds	r3, #8
 8004204:	4618      	mov	r0, r3
 8004206:	f003 fa4f 	bl	80076a8 <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004210:	e00e      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004212:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004216:	3330      	adds	r3, #48	; 0x30
 8004218:	4618      	mov	r0, r3
 800421a:	f003 fadd 	bl	80077d8 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004224:	e004      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004230:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004238:	4b99      	ldr	r3, [pc, #612]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800423a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800423e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004242:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004246:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800424a:	4a95      	ldr	r2, [pc, #596]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800424c:	430b      	orrs	r3, r1
 800424e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004252:	e003      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004258:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800425c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
 800426a:	2300      	movs	r3, #0
 800426c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d04e      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004278:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800427c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004284:	d02e      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d827      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800428c:	2bc0      	cmp	r3, #192	; 0xc0
 800428e:	d02b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004290:	2bc0      	cmp	r3, #192	; 0xc0
 8004292:	d823      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	d017      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004298:	2b80      	cmp	r3, #128	; 0x80
 800429a:	d81f      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d007      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80042a4:	e01a      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a6:	4b7e      	ldr	r3, [pc, #504]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	4a7d      	ldr	r2, [pc, #500]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80042ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b0:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80042b2:	e01a      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042b8:	3308      	adds	r3, #8
 80042ba:	4618      	mov	r0, r3
 80042bc:	f003 f9f4 	bl	80076a8 <RCCEx_PLL2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80042c6:	e010      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042cc:	3330      	adds	r3, #48	; 0x30
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 fa82 	bl	80077d8 <RCCEx_PLL3_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80042da:	e006      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80042f2:	4b6b      	ldr	r3, [pc, #428]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80042f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80042fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004304:	4a66      	ldr	r2, [pc, #408]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004306:	430b      	orrs	r3, r1
 8004308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800430c:	e003      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004312:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004316:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
 8004324:	2300      	movs	r3, #0
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
 8004328:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800432c:	460b      	mov	r3, r1
 800432e:	4313      	orrs	r3, r2
 8004330:	d055      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004332:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004336:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800433a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800433e:	d031      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004340:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004344:	d82a      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434a:	d02d      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800434c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004350:	d824      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004352:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004356:	d029      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004358:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800435c:	d81e      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004362:	d011      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004368:	d818      	bhi.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d020      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800436e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004372:	d113      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004378:	3308      	adds	r3, #8
 800437a:	4618      	mov	r0, r3
 800437c:	f003 f994 	bl	80076a8 <RCCEx_PLL2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004386:	e014      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800438c:	3330      	adds	r3, #48	; 0x30
 800438e:	4618      	mov	r0, r3
 8004390:	f003 fa22 	bl	80077d8 <RCCEx_PLL3_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800439a:	e00a      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043a2:	e006      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80043a4:	bf00      	nop
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80043b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80043ba:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80043bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043c0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80043c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80043cc:	4a34      	ldr	r2, [pc, #208]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80043ce:	430b      	orrs	r3, r1
 80043d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043d4:	e003      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80043de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ec:	2300      	movs	r3, #0
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d058      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80043fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004402:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004406:	d031      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004408:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800440c:	d82a      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800440e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004412:	d02d      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004418:	d824      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800441a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800441e:	d029      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004420:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004424:	d81e      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442a:	d011      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800442c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004430:	d818      	bhi.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443a:	d113      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800443c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004440:	3308      	adds	r3, #8
 8004442:	4618      	mov	r0, r3
 8004444:	f003 f930 	bl	80076a8 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800444e:	e014      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004454:	3330      	adds	r3, #48	; 0x30
 8004456:	4618      	mov	r0, r3
 8004458:	f003 f9be 	bl	80077d8 <RCCEx_PLL3_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004462:	e00a      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800446a:	e006      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800446c:	bf00      	nop
 800446e:	e004      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004470:	bf00      	nop
 8004472:	e002      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800447e:	2b00      	cmp	r3, #0
 8004480:	d110      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004488:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800448c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004494:	4902      	ldr	r1, [pc, #8]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800449c:	e006      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800449e:	bf00      	nop
 80044a0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	2100      	movs	r1, #0
 80044b6:	6239      	str	r1, [r7, #32]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
 80044be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	d055      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80044c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044d0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80044d4:	d031      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80044d6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80044da:	d82a      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80044dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e0:	d02d      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80044e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e6:	d824      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80044e8:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80044ec:	d029      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80044ee:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80044f2:	d81e      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f8:	d011      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d818      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004508:	d113      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800450a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800450e:	3308      	adds	r3, #8
 8004510:	4618      	mov	r0, r3
 8004512:	f003 f8c9 	bl	80076a8 <RCCEx_PLL2_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800451c:	e014      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800451e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004522:	3330      	adds	r3, #48	; 0x30
 8004524:	4618      	mov	r0, r3
 8004526:	f003 f957 	bl	80077d8 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004530:	e00a      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004538:	e006      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800453a:	bf00      	nop
 800453c:	e004      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004548:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10d      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004550:	4b88      	ldr	r3, [pc, #544]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004556:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800455a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800455e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004562:	4984      	ldr	r1, [pc, #528]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800456a:	e003      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004570:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	2100      	movs	r1, #0
 800457e:	61b9      	str	r1, [r7, #24]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800458a:	460b      	mov	r3, r1
 800458c:	4313      	orrs	r3, r2
 800458e:	d03d      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004590:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004594:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004598:	2b03      	cmp	r3, #3
 800459a:	d81c      	bhi.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045df 	.word	0x080045df
 80045a8:	080045b5 	.word	0x080045b5
 80045ac:	080045c3 	.word	0x080045c3
 80045b0:	080045df 	.word	0x080045df
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b4:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	4a6e      	ldr	r2, [pc, #440]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045be:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80045c0:	e00e      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045c6:	3308      	adds	r3, #8
 80045c8:	4618      	mov	r0, r3
 80045ca:	f003 f86d 	bl	80076a8 <RCCEx_PLL2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80045d4:	e004      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80045de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80045e8:	4b62      	ldr	r3, [pc, #392]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045ee:	f023 0203 	bic.w	r2, r3, #3
 80045f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80045fa:	495e      	ldr	r1, [pc, #376]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004608:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800460c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	2100      	movs	r1, #0
 8004616:	6139      	str	r1, [r7, #16]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	d03a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800462c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004634:	d00e      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463a:	d815      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004644:	d110      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004646:	4b4b      	ldr	r3, [pc, #300]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	4a4a      	ldr	r2, [pc, #296]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800464c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004650:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004652:	e00e      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004654:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004658:	3308      	adds	r3, #8
 800465a:	4618      	mov	r0, r3
 800465c:	f003 f824 	bl	80076a8 <RCCEx_PLL2_Config>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004666:	e004      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800466e:	e000      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004672:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10d      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800467a:	4b3e      	ldr	r3, [pc, #248]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800467c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004684:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004688:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800468c:	4939      	ldr	r1, [pc, #228]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004694:	e003      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800469a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800469e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	2100      	movs	r1, #0
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d038      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80046ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046c2:	2b30      	cmp	r3, #48	; 0x30
 80046c4:	d01b      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80046c6:	2b30      	cmp	r3, #48	; 0x30
 80046c8:	d815      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d002      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d007      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80046d2:	e010      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d4:	4b27      	ldr	r3, [pc, #156]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	4a26      	ldr	r2, [pc, #152]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80046da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046de:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80046e0:	e00e      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046e6:	3330      	adds	r3, #48	; 0x30
 80046e8:	4618      	mov	r0, r3
 80046ea:	f003 f875 	bl	80077d8 <RCCEx_PLL3_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80046f4:	e004      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80046fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004700:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10d      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004708:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800470a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800470e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004712:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004716:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800471a:	4916      	ldr	r1, [pc, #88]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004722:	e003      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004728:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800472c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	2100      	movs	r1, #0
 8004736:	6039      	str	r1, [r7, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004742:	460b      	mov	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	d00c      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800474a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800474e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004752:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004756:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800475a:	4906      	ldr	r1, [pc, #24]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8004762:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8004766:	4618      	mov	r0, r3
 8004768:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	44020c00 	.word	0x44020c00

08004778 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004778:	b480      	push	{r7}
 800477a:	b08b      	sub	sp, #44	; 0x2c
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004780:	4bad      	ldr	r3, [pc, #692]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800478a:	4bab      	ldr	r3, [pc, #684]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004794:	4ba8      	ldr	r3, [pc, #672]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80047a0:	4ba5      	ldr	r3, [pc, #660]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80047aa:	4ba3      	ldr	r3, [pc, #652]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	08db      	lsrs	r3, r3, #3
 80047b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8126 	beq.w	8004a1a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d053      	beq.n	800487c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d86f      	bhi.n	80048ba <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d003      	beq.n	80047e8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d02b      	beq.n	800483e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80047e6:	e068      	b.n	80048ba <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047e8:	4b93      	ldr	r3, [pc, #588]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	08db      	lsrs	r3, r3, #3
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	4a92      	ldr	r2, [pc, #584]	; (8004a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
 80047f8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004820:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004838:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800483c:	e068      	b.n	8004910 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004848:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004a44 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800484c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a04 	vldr	s12, [r7, #16]
 800485e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800487a:	e049      	b.n	8004910 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004898:	ed97 6a04 	vldr	s12, [r7, #16]
 800489c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80048a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80048b8:	e02a      	b.n	8004910 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048ba:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	08db      	lsrs	r3, r3, #3
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	4a5d      	ldr	r2, [pc, #372]	; (8004a3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80048c6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ca:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80048f2:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004a40 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80048f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800490e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004910:	4b49      	ldr	r3, [pc, #292]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800491c:	d121      	bne.n	8004962 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800491e:	4b46      	ldr	r3, [pc, #280]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d017      	beq.n	800495a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800492a:	4b43      	ldr	r3, [pc, #268]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	0a5b      	lsrs	r3, r3, #9
 8004930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800493c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004940:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004944:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800494c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004950:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e006      	b.n	8004968 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e002      	b.n	8004968 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004968:	4b33      	ldr	r3, [pc, #204]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004974:	d121      	bne.n	80049ba <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d017      	beq.n	80049b2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004982:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	0c1b      	lsrs	r3, r3, #16
 8004988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004998:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800499c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80049a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	e006      	b.n	80049c0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	e002      	b.n	80049c0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049cc:	d121      	bne.n	8004a12 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80049ce:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d017      	beq.n	8004a0a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049da:	4b17      	ldr	r3, [pc, #92]	; (8004a38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	0e1b      	lsrs	r3, r3, #24
 80049e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80049ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80049f4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80049f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a00:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004a08:	e010      	b.n	8004a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	e00c      	b.n	8004a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	e008      	b.n	8004a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	372c      	adds	r7, #44	; 0x2c
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	44020c00 	.word	0x44020c00
 8004a3c:	03d09000 	.word	0x03d09000
 8004a40:	46000000 	.word	0x46000000
 8004a44:	4a742400 	.word	0x4a742400
 8004a48:	4bbebc20 	.word	0x4bbebc20

08004a4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b08b      	sub	sp, #44	; 0x2c
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004a54:	4bad      	ldr	r3, [pc, #692]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004a5e:	4bab      	ldr	r3, [pc, #684]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004a68:	4ba8      	ldr	r3, [pc, #672]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a72:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004a74:	4ba5      	ldr	r3, [pc, #660]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004a7e:	4ba3      	ldr	r3, [pc, #652]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8126 	beq.w	8004cee <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d053      	beq.n	8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d86f      	bhi.n	8004b8e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d003      	beq.n	8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d02b      	beq.n	8004b12 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004aba:	e068      	b.n	8004b8e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004abc:	4b93      	ldr	r3, [pc, #588]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	08db      	lsrs	r3, r3, #3
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	4a92      	ldr	r2, [pc, #584]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af0:	ed97 6a04 	vldr	s12, [r7, #16]
 8004af4:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004b10:	e068      	b.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004b4e:	e049      	b.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b70:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004b8c:	e02a      	b.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b8e:	4b5f      	ldr	r3, [pc, #380]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	08db      	lsrs	r3, r3, #3
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a04 	vldr	s12, [r7, #16]
 8004bc6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004be2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004be4:	4b49      	ldr	r3, [pc, #292]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf0:	d121      	bne.n	8004c36 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004bf2:	4b46      	ldr	r3, [pc, #280]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d017      	beq.n	8004c2e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004bfe:	4b43      	ldr	r3, [pc, #268]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	0a5b      	lsrs	r3, r3, #9
 8004c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c14:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004c18:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c24:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e006      	b.n	8004c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e002      	b.n	8004c3c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c3c:	4b33      	ldr	r3, [pc, #204]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c48:	d121      	bne.n	8004c8e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004c4a:	4b30      	ldr	r3, [pc, #192]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c56:	4b2d      	ldr	r3, [pc, #180]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004c70:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca0:	d121      	bne.n	8004ce6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d017      	beq.n	8004cde <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004cae:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	0e1b      	lsrs	r3, r3, #24
 8004cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cc4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004cc8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cdc:	e010      	b.n	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
}
 8004ce4:	e00c      	b.n	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	609a      	str	r2, [r3, #8]
}
 8004cec:	e008      	b.n	8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
}
 8004d00:	bf00      	nop
 8004d02:	372c      	adds	r7, #44	; 0x2c
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	44020c00 	.word	0x44020c00
 8004d10:	03d09000 	.word	0x03d09000
 8004d14:	46000000 	.word	0x46000000
 8004d18:	4a742400 	.word	0x4a742400
 8004d1c:	4bbebc20 	.word	0x4bbebc20

08004d20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b08b      	sub	sp, #44	; 0x2c
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004d28:	4bad      	ldr	r3, [pc, #692]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d30:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004d32:	4bab      	ldr	r3, [pc, #684]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8004d3c:	4ba8      	ldr	r3, [pc, #672]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d46:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8004d48:	4ba5      	ldr	r3, [pc, #660]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004d52:	4ba3      	ldr	r3, [pc, #652]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d56:	08db      	lsrs	r3, r3, #3
 8004d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8126 	beq.w	8004fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d053      	beq.n	8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d86f      	bhi.n	8004e62 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d003      	beq.n	8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d02b      	beq.n	8004de6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8004d8e:	e068      	b.n	8004e62 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d90:	4b93      	ldr	r3, [pc, #588]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	08db      	lsrs	r3, r3, #3
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	4a92      	ldr	r2, [pc, #584]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	ee07 3a90 	vmov	s15, r3
 8004dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004dc8:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004de4:	e068      	b.n	8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004e22:	e049      	b.n	8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8004e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	ee07 3a90 	vmov	s15, r3
 8004e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e40:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e44:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004e60:	e02a      	b.n	8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e62:	4b5f      	ldr	r3, [pc, #380]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	08db      	lsrs	r3, r3, #3
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	4a5d      	ldr	r2, [pc, #372]	; (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e72:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e9a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004eb6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eb8:	4b49      	ldr	r3, [pc, #292]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec4:	d121      	bne.n	8004f0a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004ec6:	4b46      	ldr	r3, [pc, #280]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d017      	beq.n	8004f02 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ed2:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	0a5b      	lsrs	r3, r3, #9
 8004ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8004ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004eec:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e002      	b.n	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1c:	d121      	bne.n	8004f62 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004f1e:	4b30      	ldr	r3, [pc, #192]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d017      	beq.n	8004f5a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f2a:	4b2d      	ldr	r3, [pc, #180]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	0c1b      	lsrs	r3, r3, #16
 8004f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f34:	ee07 3a90 	vmov	s15, r3
 8004f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f40:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004f44:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f50:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	e006      	b.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	605a      	str	r2, [r3, #4]
 8004f60:	e002      	b.n	8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f74:	d121      	bne.n	8004fba <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d017      	beq.n	8004fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	0e1b      	lsrs	r3, r3, #24
 8004f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8004f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f98:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004f9c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004fb0:	e010      	b.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	609a      	str	r2, [r3, #8]
}
 8004fb8:	e00c      	b.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	609a      	str	r2, [r3, #8]
}
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	372c      	adds	r7, #44	; 0x2c
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	44020c00 	.word	0x44020c00
 8004fe4:	03d09000 	.word	0x03d09000
 8004fe8:	46000000 	.word	0x46000000
 8004fec:	4a742400 	.word	0x4a742400
 8004ff0:	4bbebc20 	.word	0x4bbebc20

08004ff4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b08f      	sub	sp, #60	; 0x3c
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005002:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8005006:	4321      	orrs	r1, r4
 8005008:	d150      	bne.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800500c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005014:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005016:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d108      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800502a:	d104      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800502c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
 8005032:	f002 bb2a 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005036:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800503c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005044:	d108      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504c:	d104      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800504e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005052:	637b      	str	r3, [r7, #52]	; 0x34
 8005054:	f002 bb19 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005058:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005064:	d119      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800506c:	d115      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507a:	d30a      	bcc.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005086:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800508e:	f002 bafc 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005096:	f002 baf8 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
 800509e:	f002 baf4 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80050a2:	bf00      	nop
 80050a4:	44020c00 	.word	0x44020c00
 80050a8:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80050ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050b0:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80050b4:	ea50 0104 	orrs.w	r1, r0, r4
 80050b8:	f001 8275 	beq.w	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80050bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050c0:	2801      	cmp	r0, #1
 80050c2:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80050c6:	f082 82dd 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ce:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80050d2:	ea50 0104 	orrs.w	r1, r0, r4
 80050d6:	f001 816c 	beq.w	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80050da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050de:	2801      	cmp	r0, #1
 80050e0:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80050e4:	f082 82ce 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80050e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ec:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80050f0:	ea50 0104 	orrs.w	r1, r0, r4
 80050f4:	f001 8602 	beq.w	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80050f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050fc:	2801      	cmp	r0, #1
 80050fe:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8005102:	f082 82bf 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800510a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800510e:	ea50 0104 	orrs.w	r1, r0, r4
 8005112:	f001 854c 	beq.w	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800511a:	2801      	cmp	r0, #1
 800511c:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8005120:	f082 82b0 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005124:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005128:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800512c:	ea50 0104 	orrs.w	r1, r0, r4
 8005130:	f001 849e 	beq.w	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005134:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005138:	2801      	cmp	r0, #1
 800513a:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800513e:	f082 82a1 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005146:	f1a1 0420 	sub.w	r4, r1, #32
 800514a:	ea50 0104 	orrs.w	r1, r0, r4
 800514e:	f001 83e8 	beq.w	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005156:	2801      	cmp	r0, #1
 8005158:	f171 0120 	sbcs.w	r1, r1, #32
 800515c:	f082 8292 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005164:	f1a1 0410 	sub.w	r4, r1, #16
 8005168:	ea50 0104 	orrs.w	r1, r0, r4
 800516c:	f002 8256 	beq.w	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005174:	2801      	cmp	r0, #1
 8005176:	f171 0110 	sbcs.w	r1, r1, #16
 800517a:	f082 8283 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800517e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005182:	f1a1 0408 	sub.w	r4, r1, #8
 8005186:	ea50 0104 	orrs.w	r1, r0, r4
 800518a:	f002 81cc 	beq.w	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800518e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005192:	2801      	cmp	r0, #1
 8005194:	f171 0108 	sbcs.w	r1, r1, #8
 8005198:	f082 8274 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800519c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051a0:	1f0c      	subs	r4, r1, #4
 80051a2:	ea50 0104 	orrs.w	r1, r0, r4
 80051a6:	f001 8648 	beq.w	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80051aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ae:	2801      	cmp	r0, #1
 80051b0:	f171 0104 	sbcs.w	r1, r1, #4
 80051b4:	f082 8266 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051bc:	1e8c      	subs	r4, r1, #2
 80051be:	ea50 0104 	orrs.w	r1, r0, r4
 80051c2:	f002 8143 	beq.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80051c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ca:	2801      	cmp	r0, #1
 80051cc:	f171 0102 	sbcs.w	r1, r1, #2
 80051d0:	f082 8258 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051d8:	1e4c      	subs	r4, r1, #1
 80051da:	ea50 0104 	orrs.w	r1, r0, r4
 80051de:	f002 80ce 	beq.w	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80051e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051e6:	2801      	cmp	r0, #1
 80051e8:	f171 0101 	sbcs.w	r1, r1, #1
 80051ec:	f082 824a 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80051f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051f4:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80051f8:	4321      	orrs	r1, r4
 80051fa:	f002 8059 	beq.w	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80051fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005202:	4cb6      	ldr	r4, [pc, #728]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005204:	42a0      	cmp	r0, r4
 8005206:	f171 0100 	sbcs.w	r1, r1, #0
 800520a:	f082 823b 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800520e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005212:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005216:	4321      	orrs	r1, r4
 8005218:	f001 87d9 	beq.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800521c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005220:	4caf      	ldr	r4, [pc, #700]	; (80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005222:	42a0      	cmp	r0, r4
 8005224:	f171 0100 	sbcs.w	r1, r1, #0
 8005228:	f082 822c 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800522c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005230:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005234:	4321      	orrs	r1, r4
 8005236:	f001 8751 	beq.w	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800523a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800523e:	4ca9      	ldr	r4, [pc, #676]	; (80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005240:	42a0      	cmp	r0, r4
 8005242:	f171 0100 	sbcs.w	r1, r1, #0
 8005246:	f082 821d 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800524a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800524e:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8005252:	4321      	orrs	r1, r4
 8005254:	f001 869a 	beq.w	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005258:	e9d7 0100 	ldrd	r0, r1, [r7]
 800525c:	4ca2      	ldr	r4, [pc, #648]	; (80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800525e:	42a0      	cmp	r0, r4
 8005260:	f171 0100 	sbcs.w	r1, r1, #0
 8005264:	f082 820e 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800526c:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8005270:	4321      	orrs	r1, r4
 8005272:	f001 8612 	beq.w	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800527a:	4c9c      	ldr	r4, [pc, #624]	; (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800527c:	42a0      	cmp	r0, r4
 800527e:	f171 0100 	sbcs.w	r1, r1, #0
 8005282:	f082 81ff 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800528a:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800528e:	4321      	orrs	r1, r4
 8005290:	f002 817e 	beq.w	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005294:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005298:	4c95      	ldr	r4, [pc, #596]	; (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800529a:	42a0      	cmp	r0, r4
 800529c:	f171 0100 	sbcs.w	r1, r1, #0
 80052a0:	f082 81f0 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052a8:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80052ac:	4321      	orrs	r1, r4
 80052ae:	f000 829e 	beq.w	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80052b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b6:	4c8f      	ldr	r4, [pc, #572]	; (80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80052b8:	42a0      	cmp	r0, r4
 80052ba:	f171 0100 	sbcs.w	r1, r1, #0
 80052be:	f082 81e1 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052c6:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80052ca:	4321      	orrs	r1, r4
 80052cc:	f000 826d 	beq.w	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80052d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052d4:	4c88      	ldr	r4, [pc, #544]	; (80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80052d6:	42a0      	cmp	r0, r4
 80052d8:	f171 0100 	sbcs.w	r1, r1, #0
 80052dc:	f082 81d2 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052e4:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 80052e8:	4321      	orrs	r1, r4
 80052ea:	f001 800d 	beq.w	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80052ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052f2:	4c82      	ldr	r4, [pc, #520]	; (80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80052f4:	42a0      	cmp	r0, r4
 80052f6:	f171 0100 	sbcs.w	r1, r1, #0
 80052fa:	f082 81c3 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80052fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005302:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005306:	4321      	orrs	r1, r4
 8005308:	f000 81d0 	beq.w	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800530c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005310:	4c7b      	ldr	r4, [pc, #492]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005312:	42a0      	cmp	r0, r4
 8005314:	f171 0100 	sbcs.w	r1, r1, #0
 8005318:	f082 81b4 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800531c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005320:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005324:	4321      	orrs	r1, r4
 8005326:	f000 8142 	beq.w	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800532a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800532e:	4c75      	ldr	r4, [pc, #468]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005330:	42a0      	cmp	r0, r4
 8005332:	f171 0100 	sbcs.w	r1, r1, #0
 8005336:	f082 81a5 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800533a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800533e:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8005342:	4321      	orrs	r1, r4
 8005344:	f001 824e 	beq.w	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800534c:	4c6e      	ldr	r4, [pc, #440]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800534e:	42a0      	cmp	r0, r4
 8005350:	f171 0100 	sbcs.w	r1, r1, #0
 8005354:	f082 8196 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800535c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8005360:	4321      	orrs	r1, r4
 8005362:	f001 8197 	beq.w	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800536a:	4c68      	ldr	r4, [pc, #416]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800536c:	42a0      	cmp	r0, r4
 800536e:	f171 0100 	sbcs.w	r1, r1, #0
 8005372:	f082 8187 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005376:	e9d7 0100 	ldrd	r0, r1, [r7]
 800537a:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800537e:	4321      	orrs	r1, r4
 8005380:	f001 8154 	beq.w	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005388:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800538c:	f171 0100 	sbcs.w	r1, r1, #0
 8005390:	f082 8178 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005394:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005398:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800539c:	4321      	orrs	r1, r4
 800539e:	f001 80b7 	beq.w	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80053a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053a6:	f248 0401 	movw	r4, #32769	; 0x8001
 80053aa:	42a0      	cmp	r0, r4
 80053ac:	f171 0100 	sbcs.w	r1, r1, #0
 80053b0:	f082 8168 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053b8:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 80053bc:	4321      	orrs	r1, r4
 80053be:	f001 8064 	beq.w	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80053c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053c6:	f244 0401 	movw	r4, #16385	; 0x4001
 80053ca:	42a0      	cmp	r0, r4
 80053cc:	f171 0100 	sbcs.w	r1, r1, #0
 80053d0:	f082 8158 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053d8:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 80053dc:	4321      	orrs	r1, r4
 80053de:	f001 8011 	beq.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80053e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053e6:	f242 0401 	movw	r4, #8193	; 0x2001
 80053ea:	42a0      	cmp	r0, r4
 80053ec:	f171 0100 	sbcs.w	r1, r1, #0
 80053f0:	f082 8148 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053f8:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 80053fc:	4321      	orrs	r1, r4
 80053fe:	f000 871e 	beq.w	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005406:	f241 0401 	movw	r4, #4097	; 0x1001
 800540a:	42a0      	cmp	r0, r4
 800540c:	f171 0100 	sbcs.w	r1, r1, #0
 8005410:	f082 8138 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005418:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800541c:	4321      	orrs	r1, r4
 800541e:	f000 86a8 	beq.w	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005426:	f640 0401 	movw	r4, #2049	; 0x801
 800542a:	42a0      	cmp	r0, r4
 800542c:	f171 0100 	sbcs.w	r1, r1, #0
 8005430:	f082 8128 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005438:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800543c:	4321      	orrs	r1, r4
 800543e:	f000 8632 	beq.w	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005446:	f240 4401 	movw	r4, #1025	; 0x401
 800544a:	42a0      	cmp	r0, r4
 800544c:	f171 0100 	sbcs.w	r1, r1, #0
 8005450:	f082 8118 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005458:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800545c:	4321      	orrs	r1, r4
 800545e:	f000 85b0 	beq.w	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005466:	f240 2401 	movw	r4, #513	; 0x201
 800546a:	42a0      	cmp	r0, r4
 800546c:	f171 0100 	sbcs.w	r1, r1, #0
 8005470:	f082 8108 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005478:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800547c:	4321      	orrs	r1, r4
 800547e:	f000 8535 	beq.w	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005486:	f240 1401 	movw	r4, #257	; 0x101
 800548a:	42a0      	cmp	r0, r4
 800548c:	f171 0100 	sbcs.w	r1, r1, #0
 8005490:	f082 80f8 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005498:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800549c:	4321      	orrs	r1, r4
 800549e:	f000 84ba 	beq.w	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80054a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054a6:	2881      	cmp	r0, #129	; 0x81
 80054a8:	f171 0100 	sbcs.w	r1, r1, #0
 80054ac:	f082 80ea 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054b4:	2821      	cmp	r0, #33	; 0x21
 80054b6:	f171 0100 	sbcs.w	r1, r1, #0
 80054ba:	d26f      	bcs.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80054bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054c0:	4301      	orrs	r1, r0
 80054c2:	f002 80df 	beq.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ca:	1e42      	subs	r2, r0, #1
 80054cc:	f141 33ff 	adc.w	r3, r1, #4294967295
 80054d0:	2a20      	cmp	r2, #32
 80054d2:	f173 0100 	sbcs.w	r1, r3, #0
 80054d6:	f082 80d5 	bcs.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054da:	e019      	b.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 80054dc:	80000001 	.word	0x80000001
 80054e0:	40000001 	.word	0x40000001
 80054e4:	20000001 	.word	0x20000001
 80054e8:	10000001 	.word	0x10000001
 80054ec:	08000001 	.word	0x08000001
 80054f0:	04000001 	.word	0x04000001
 80054f4:	00800001 	.word	0x00800001
 80054f8:	00400001 	.word	0x00400001
 80054fc:	00200001 	.word	0x00200001
 8005500:	00100001 	.word	0x00100001
 8005504:	00080001 	.word	0x00080001
 8005508:	00040001 	.word	0x00040001
 800550c:	00020001 	.word	0x00020001
 8005510:	2a1f      	cmp	r2, #31
 8005512:	f202 80b7 	bhi.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005516:	a101      	add	r1, pc, #4	; (adr r1, 800551c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8005518:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800551c:	08005849 	.word	0x08005849
 8005520:	08005915 	.word	0x08005915
 8005524:	08007685 	.word	0x08007685
 8005528:	080059d5 	.word	0x080059d5
 800552c:	08007685 	.word	0x08007685
 8005530:	08007685 	.word	0x08007685
 8005534:	08007685 	.word	0x08007685
 8005538:	08005aa5 	.word	0x08005aa5
 800553c:	08007685 	.word	0x08007685
 8005540:	08007685 	.word	0x08007685
 8005544:	08007685 	.word	0x08007685
 8005548:	08007685 	.word	0x08007685
 800554c:	08007685 	.word	0x08007685
 8005550:	08007685 	.word	0x08007685
 8005554:	08007685 	.word	0x08007685
 8005558:	08005b87 	.word	0x08005b87
 800555c:	08007685 	.word	0x08007685
 8005560:	08007685 	.word	0x08007685
 8005564:	08007685 	.word	0x08007685
 8005568:	08007685 	.word	0x08007685
 800556c:	08007685 	.word	0x08007685
 8005570:	08007685 	.word	0x08007685
 8005574:	08007685 	.word	0x08007685
 8005578:	08007685 	.word	0x08007685
 800557c:	08007685 	.word	0x08007685
 8005580:	08007685 	.word	0x08007685
 8005584:	08007685 	.word	0x08007685
 8005588:	08007685 	.word	0x08007685
 800558c:	08007685 	.word	0x08007685
 8005590:	08007685 	.word	0x08007685
 8005594:	08007685 	.word	0x08007685
 8005598:	08005c5d 	.word	0x08005c5d
 800559c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80055a4:	430b      	orrs	r3, r1
 80055a6:	f000 83c4 	beq.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80055aa:	f002 b86b 	b.w	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80055ae:	4ba1      	ldr	r3, [pc, #644]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80055b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055b4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80055b8:	633b      	str	r3, [r7, #48]	; 0x30
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055c0:	d036      	beq.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055c8:	d86b      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055d0:	d02b      	beq.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055d8:	d863      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e0:	d01b      	beq.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e8:	d85b      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f6:	d008      	beq.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80055f8:	e053      	b.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055fa:	f107 0320 	add.w	r3, r7, #32
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff f8ba 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005608:	e04e      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800560a:	f107 0314 	add.w	r3, r7, #20
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fa1c 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005618:	e046      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff fb7e 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005628:	e03e      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800562a:	4b83      	ldr	r3, [pc, #524]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800562e:	e03b      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005630:	4b80      	ldr	r3, [pc, #512]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005636:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800563c:	4b7d      	ldr	r3, [pc, #500]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800564e:	4b79      	ldr	r3, [pc, #484]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	4a78      	ldr	r2, [pc, #480]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	637b      	str	r3, [r7, #52]	; 0x34
 8005660:	e01e      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005662:	4b74      	ldr	r3, [pc, #464]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800566a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566e:	d106      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d102      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005678:	4b71      	ldr	r3, [pc, #452]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
 800567c:	e010      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800567e:	4b6d      	ldr	r3, [pc, #436]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568a:	d106      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005692:	d102      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005694:	4b6b      	ldr	r3, [pc, #428]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005696:	637b      	str	r3, [r7, #52]	; 0x34
 8005698:	e002      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800569e:	e003      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80056a0:	e002      	b.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80056a6:	bf00      	nop
          }
        }
        break;
 80056a8:	f001 bfef 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80056ac:	4b61      	ldr	r3, [pc, #388]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80056ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056b2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80056b6:	633b      	str	r3, [r7, #48]	; 0x30
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056be:	d036      	beq.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056c6:	d86b      	bhi.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80056ce:	d02b      	beq.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80056d6:	d863      	bhi.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056de:	d01b      	beq.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e6:	d85b      	bhi.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056f4:	d008      	beq.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80056f6:	e053      	b.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056f8:	f107 0320 	add.w	r3, r7, #32
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff f83b 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005706:	e04e      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff f99d 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005716:	e046      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005718:	f107 0308 	add.w	r3, r7, #8
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff faff 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005726:	e03e      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005728:	4b43      	ldr	r3, [pc, #268]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800572a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800572c:	e03b      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800572e:	4b41      	ldr	r3, [pc, #260]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005734:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800573a:	4b3e      	ldr	r3, [pc, #248]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b02      	cmp	r3, #2
 8005744:	d10c      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800574c:	4b39      	ldr	r3, [pc, #228]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	4a39      	ldr	r2, [pc, #228]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
 800575e:	e01e      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005760:	4b34      	ldr	r3, [pc, #208]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576c:	d106      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d102      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005776:	4b32      	ldr	r3, [pc, #200]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
 800577a:	e010      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800577c:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005788:	d106      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005790:	d102      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005792:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
 8005796:	e002      	b.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800579c:	e003      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800579e:	e002      	b.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80057a4:	bf00      	nop
          }
        }
        break;
 80057a6:	f001 bf70 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80057aa:	4b22      	ldr	r3, [pc, #136]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80057ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d108      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057bc:	f107 0320 	add.w	r3, r7, #32
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe ffd9 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80057ca:	f001 bf5e 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d108      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff f937 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057e2:	f001 bf52 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057ea:	f001 bf4e 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80057f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d108      	bne.n	8005812 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005800:	f107 0320 	add.w	r3, r7, #32
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe ffb7 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800580e:	f001 bf3c 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	2b80      	cmp	r3, #128	; 0x80
 8005816:	d108      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005818:	f107 0314 	add.w	r3, r7, #20
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff f915 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005826:	f001 bf30 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800582e:	f001 bf2c 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005832:	bf00      	nop
 8005834:	44020c00 	.word	0x44020c00
 8005838:	00bb8000 	.word	0x00bb8000
 800583c:	03d09000 	.word	0x03d09000
 8005840:	003d0900 	.word	0x003d0900
 8005844:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005848:	4b9d      	ldr	r3, [pc, #628]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800584a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	2b00      	cmp	r3, #0
 8005858:	d104      	bne.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800585a:	f7fc ffab 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 800585e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005860:	f001 bf13 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005864:	4b96      	ldr	r3, [pc, #600]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005870:	d10a      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	2b01      	cmp	r3, #1
 8005876:	d107      	bne.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005878:	f107 0314 	add.w	r3, r7, #20
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff f8e5 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
 8005886:	e043      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005888:	4b8d      	ldr	r3, [pc, #564]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005894:	d10a      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	2b02      	cmp	r3, #2
 800589a:	d107      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800589c:	f107 0308 	add.w	r3, r7, #8
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff fa3d 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
 80058aa:	e031      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80058ac:	4b84      	ldr	r3, [pc, #528]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d10c      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d109      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058be:	4b80      	ldr	r3, [pc, #512]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	08db      	lsrs	r3, r3, #3
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	4a7e      	ldr	r2, [pc, #504]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80058ca:	fa22 f303 	lsr.w	r3, r2, r3
 80058ce:	637b      	str	r3, [r7, #52]	; 0x34
 80058d0:	e01e      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80058d2:	4b7b      	ldr	r3, [pc, #492]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d102      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80058e6:	4b78      	ldr	r3, [pc, #480]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ea:	e011      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80058ec:	4b74      	ldr	r3, [pc, #464]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80058ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d106      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d103      	bne.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
 8005906:	e003      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800590c:	f001 bebd 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005910:	f001 bebb 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005914:	4b6a      	ldr	r3, [pc, #424]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800591a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800591e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	2b00      	cmp	r3, #0
 8005924:	d104      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005926:	f7fc ff2f 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 800592a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800592c:	f001 bead 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005930:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800593c:	d10a      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2b08      	cmp	r3, #8
 8005942:	d107      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff f87f 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
 8005952:	e03d      	b.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2b10      	cmp	r3, #16
 8005958:	d108      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f9de 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005968:	f001 be8f 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800596c:	4b54      	ldr	r3, [pc, #336]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b02      	cmp	r3, #2
 8005976:	d10c      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2b18      	cmp	r3, #24
 800597c:	d109      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800597e:	4b50      	ldr	r3, [pc, #320]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	08db      	lsrs	r3, r3, #3
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	4a4e      	ldr	r2, [pc, #312]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800598a:	fa22 f303 	lsr.w	r3, r2, r3
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
 8005990:	e01e      	b.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005992:	4b4b      	ldr	r3, [pc, #300]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599e:	d105      	bne.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d102      	bne.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80059a6:	4b48      	ldr	r3, [pc, #288]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
 80059aa:	e011      	b.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80059ac:	4b44      	ldr	r3, [pc, #272]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80059ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d106      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	2b28      	cmp	r3, #40	; 0x28
 80059be:	d103      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80059c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
 80059c6:	e003      	b.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059cc:	f001 be5d 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80059d0:	f001 be5b 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80059d4:	4b3a      	ldr	r3, [pc, #232]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80059d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80059da:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80059de:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d104      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80059e6:	f7fc fecf 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80059ea:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80059ec:	f001 be4d 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80059f0:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059fc:	d10a      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d107      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a04:	f107 0314 	add.w	r3, r7, #20
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff f81f 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
 8005a12:	e045      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005a14:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a20:	d10a      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d107      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a28:	f107 0308 	add.w	r3, r7, #8
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff f977 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
 8005a36:	e033      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	2bc0      	cmp	r3, #192	; 0xc0
 8005a48:	d109      	bne.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	08db      	lsrs	r3, r3, #3
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5c:	e020      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005a5e:	4b18      	ldr	r3, [pc, #96]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a72:	d102      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8005a74:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
 8005a78:	e012      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d107      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005a8e:	d103      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8005a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a9c:	f001 bdf5 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005aa0:	f001 bdf3 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005aa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005aaa:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f7fc fe67 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8005aba:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005abc:	f001 bde5 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ac0:	44020c00 	.word	0x44020c00
 8005ac4:	03d09000 	.word	0x03d09000
 8005ac8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005acc:	4ba0      	ldr	r3, [pc, #640]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ad8:	d10b      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae0:	d107      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ae2:	f107 0314 	add.w	r3, r7, #20
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe ffb0 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
 8005af0:	e047      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005af2:	4b97      	ldr	r3, [pc, #604]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afe:	d10b      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b06:	d107      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b08:	f107 0308 	add.w	r3, r7, #8
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff f907 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
 8005b16:	e034      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005b18:	4b8d      	ldr	r3, [pc, #564]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d10d      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b2a:	d109      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b2c:	4b88      	ldr	r3, [pc, #544]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	08db      	lsrs	r3, r3, #3
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	4a87      	ldr	r2, [pc, #540]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3e:	e020      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005b40:	4b83      	ldr	r3, [pc, #524]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4c:	d106      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b54:	d102      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005b56:	4b80      	ldr	r3, [pc, #512]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5a:	e012      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005b5c:	4b7c      	ldr	r3, [pc, #496]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d107      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b70:	d103      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8005b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
 8005b78:	e003      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b7e:	f001 bd84 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b82:	f001 bd82 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005b86:	4b72      	ldr	r3, [pc, #456]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b8c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b90:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b98:	f7fc fdf6 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8005b9c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b9e:	f001 bd74 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005ba2:	4b6b      	ldr	r3, [pc, #428]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bae:	d10b      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb6:	d107      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe ff45 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc6:	e047      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005bc8:	4b61      	ldr	r3, [pc, #388]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd4:	d10b      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bdc:	d107      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff f89c 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
 8005bec:	e034      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005bee:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d10d      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c00:	d109      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c02:	4b53      	ldr	r3, [pc, #332]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	08db      	lsrs	r3, r3, #3
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	4a51      	ldr	r2, [pc, #324]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
 8005c14:	e020      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005c16:	4b4e      	ldr	r3, [pc, #312]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c22:	d106      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2a:	d102      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8005c2c:	4b4a      	ldr	r3, [pc, #296]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c30:	e012      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005c32:	4b47      	ldr	r3, [pc, #284]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c46:	d103      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8005c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4e:	e003      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c54:	f001 bd19 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c58:	f001 bd17 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005c5c:	4b3c      	ldr	r3, [pc, #240]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c62:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8005c66:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c6e:	f7fc fd8b 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8005c72:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c74:	f001 bd09 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c84:	d10b      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c8e:	f107 0314 	add.w	r3, r7, #20
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe feda 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9c:	e047      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005c9e:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005caa:	d10b      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cb4:	f107 0308 	add.w	r3, r7, #8
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff f831 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc2:	e034      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005cc4:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d10d      	bne.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005cd6:	d109      	bne.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cd8:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	08db      	lsrs	r3, r3, #3
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cea:	e020      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005cec:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf8:	d106      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d00:	d102      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005d04:	637b      	str	r3, [r7, #52]	; 0x34
 8005d06:	e012      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d107      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005d1c:	d103      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
 8005d24:	e003      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d2a:	f001 bcae 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d2e:	f001 bcac 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8005d32:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d38:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8005d3c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7fc fd20 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8005d48:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d4a:	f001 bc9e 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d4e:	bf00      	nop
 8005d50:	44020c00 	.word	0x44020c00
 8005d54:	03d09000 	.word	0x03d09000
 8005d58:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8005d5c:	4ba0      	ldr	r3, [pc, #640]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d68:	d10b      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d70:	d107      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d72:	f107 0314 	add.w	r3, r7, #20
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fe68 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d80:	e047      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8005d82:	4b97      	ldr	r3, [pc, #604]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d8e:	d10b      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d96:	d107      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d98:	f107 0308 	add.w	r3, r7, #8
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fe ffbf 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
 8005da6:	e034      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8005da8:	4b8d      	ldr	r3, [pc, #564]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d10d      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dba:	d109      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dbc:	4b88      	ldr	r3, [pc, #544]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	08db      	lsrs	r3, r3, #3
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	4a87      	ldr	r2, [pc, #540]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dce:	e020      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8005dd0:	4b83      	ldr	r3, [pc, #524]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ddc:	d106      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de4:	d102      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8005de6:	4b80      	ldr	r3, [pc, #512]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dea:	e012      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8005dec:	4b7c      	ldr	r3, [pc, #496]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d107      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e00:	d103      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8005e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e06:	637b      	str	r3, [r7, #52]	; 0x34
 8005e08:	e003      	b.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e0e:	f001 bc3c 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e12:	f001 bc3a 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8005e16:	4b72      	ldr	r3, [pc, #456]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e1c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fc fcae 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e2e:	f001 bc2c 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8005e32:	4b6b      	ldr	r3, [pc, #428]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e3e:	d10b      	bne.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e46:	d107      	bne.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e48:	f107 0314 	add.w	r3, r7, #20
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe fdfd 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
 8005e56:	e047      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005e58:	4b61      	ldr	r3, [pc, #388]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e64:	d10b      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe ff54 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7c:	e034      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8005e7e:	4b58      	ldr	r3, [pc, #352]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d10d      	bne.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e90:	d109      	bne.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e92:	4b53      	ldr	r3, [pc, #332]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	4a51      	ldr	r2, [pc, #324]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea4:	e020      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8005ea6:	4b4e      	ldr	r3, [pc, #312]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb2:	d106      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eba:	d102      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8005ebc:	4b4a      	ldr	r3, [pc, #296]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec0:	e012      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8005ec2:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ed6:	d103      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8005ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ede:	e003      	b.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ee4:	f001 bbd1 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ee8:	f001 bbcf 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8005eec:	4b3c      	ldr	r3, [pc, #240]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ef2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005ef6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005efe:	f7fc fc43 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8005f02:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f04:	f001 bbc1 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8005f08:	4b35      	ldr	r3, [pc, #212]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f14:	d10b      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1e:	f107 0314 	add.w	r3, r7, #20
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fd92 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2c:	e047      	b.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8005f2e:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f42:	d107      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f44:	f107 0308 	add.w	r3, r7, #8
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fee9 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
 8005f52:	e034      	b.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8005f54:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d10d      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f66:	d109      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f68:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	08db      	lsrs	r3, r3, #3
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	4a1c      	ldr	r2, [pc, #112]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
 8005f78:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7a:	e020      	b.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8005f7c:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f88:	d106      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f90:	d102      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
 8005f96:	e012      	b.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005fac:	d103      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8005fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb4:	e003      	b.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fba:	f001 bb66 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005fbe:	f001 bb64 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005fc8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8005fcc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fc fbd8 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8005fda:	f001 bb56 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005fde:	bf00      	nop
 8005fe0:	44020c00 	.word	0x44020c00
 8005fe4:	03d09000 	.word	0x03d09000
 8005fe8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8005fec:	4ba1      	ldr	r3, [pc, #644]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ff8:	d10b      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006000:	d107      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006002:	f107 0314 	add.w	r3, r7, #20
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe fd20 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
 8006010:	e047      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006012:	4b98      	ldr	r3, [pc, #608]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800601a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601e:	d10b      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006026:	d107      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe fe77 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
 8006036:	e034      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006038:	4b8e      	ldr	r3, [pc, #568]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b02      	cmp	r3, #2
 8006042:	d10d      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800604a:	d109      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800604c:	4b89      	ldr	r3, [pc, #548]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	08db      	lsrs	r3, r3, #3
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	4a88      	ldr	r2, [pc, #544]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
 800605e:	e020      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006060:	4b84      	ldr	r3, [pc, #528]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606c:	d106      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006074:	d102      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006076:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
 800607a:	e012      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800607c:	4b7d      	ldr	r3, [pc, #500]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800607e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b02      	cmp	r3, #2
 8006088:	d107      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8006090:	d103      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8006092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
 8006098:	e003      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800609e:	f001 baf4 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060a2:	f001 baf2 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80060a6:	4b73      	ldr	r3, [pc, #460]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060b8:	f7fc fb66 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80060bc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80060be:	f001 bae4 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80060c2:	4b6c      	ldr	r3, [pc, #432]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ce:	d10a      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d107      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d6:	f107 0314 	add.w	r3, r7, #20
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fcb6 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
 80060e4:	e043      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80060e6:	4b63      	ldr	r3, [pc, #396]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060f2:	d10a      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d107      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060fa:	f107 0308 	add.w	r3, r7, #8
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe fe0e 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
 8006108:	e031      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800610a:	4b5a      	ldr	r3, [pc, #360]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b02      	cmp	r3, #2
 8006114:	d10c      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2b03      	cmp	r3, #3
 800611a:	d109      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800611c:	4b55      	ldr	r3, [pc, #340]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	08db      	lsrs	r3, r3, #3
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	4a54      	ldr	r2, [pc, #336]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006128:	fa22 f303 	lsr.w	r3, r2, r3
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
 800612e:	e01e      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006130:	4b50      	ldr	r3, [pc, #320]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613c:	d105      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	2b04      	cmp	r3, #4
 8006142:	d102      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006144:	4b4d      	ldr	r3, [pc, #308]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
 8006148:	e011      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800614a:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800614c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d106      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	2b05      	cmp	r3, #5
 800615c:	d103      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800615e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	e003      	b.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800616a:	f001 ba8e 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800616e:	f001 ba8c 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006172:	4b40      	ldr	r3, [pc, #256]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006174:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006178:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800617c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006184:	f7fc fb00 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8006188:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800618a:	f001 ba7e 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800618e:	4b39      	ldr	r3, [pc, #228]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800619a:	d10a      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2b10      	cmp	r3, #16
 80061a0:	d107      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a2:	f107 0314 	add.w	r3, r7, #20
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fc50 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
 80061b0:	e043      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80061b2:	4b30      	ldr	r3, [pc, #192]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061be:	d10a      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d107      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061c6:	f107 0308 	add.w	r3, r7, #8
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fda8 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	637b      	str	r3, [r7, #52]	; 0x34
 80061d4:	e031      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80061d6:	4b27      	ldr	r3, [pc, #156]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d10c      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2b30      	cmp	r3, #48	; 0x30
 80061e6:	d109      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061e8:	4b22      	ldr	r3, [pc, #136]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	08db      	lsrs	r3, r3, #3
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	4a21      	ldr	r2, [pc, #132]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	e01e      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80061fc:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006208:	d105      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	d102      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
 8006214:	e011      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d106      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	2b50      	cmp	r3, #80	; 0x50
 8006228:	d103      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800622a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622e:	637b      	str	r3, [r7, #52]	; 0x34
 8006230:	e003      	b.n	800623a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006236:	f001 ba28 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800623a:	f001 ba26 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800623e:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006244:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006248:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006250:	f7fc fac6 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 8006254:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006256:	f001 ba18 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006260:	d10e      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006262:	f107 0314 	add.w	r3, r7, #20
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fbf0 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006270:	f001 ba0b 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006274:	44020c00 	.word	0x44020c00
 8006278:	03d09000 	.word	0x03d09000
 800627c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006286:	d108      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006288:	f107 0308 	add.w	r3, r7, #8
 800628c:	4618      	mov	r0, r3
 800628e:	f7fe fd47 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006296:	f001 b9f8 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800629a:	4ba4      	ldr	r3, [pc, #656]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d10d      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062ac:	d109      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062ae:	4b9f      	ldr	r3, [pc, #636]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	08db      	lsrs	r3, r3, #3
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	4a9d      	ldr	r2, [pc, #628]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80062ba:	fa22 f303 	lsr.w	r3, r2, r3
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	e020      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80062c2:	4b9a      	ldr	r3, [pc, #616]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ce:	d106      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062d6:	d102      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80062d8:	4b96      	ldr	r3, [pc, #600]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
 80062dc:	e012      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80062de:	4b93      	ldr	r3, [pc, #588]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80062e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d107      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80062f2:	d103      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80062f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
 80062fa:	e003      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006300:	f001 b9c3 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006304:	f001 b9c1 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006308:	4b88      	ldr	r3, [pc, #544]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800630a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800631a:	f7fc fa19 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 800631e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006320:	f001 b9b3 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	2b01      	cmp	r3, #1
 8006328:	d104      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800632a:	f7fc f8e5 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 800632e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006330:	f001 b9ab 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	2b02      	cmp	r3, #2
 8006338:	d108      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800633a:	f107 0314 	add.w	r3, r7, #20
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fb84 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006348:	f001 b99f 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800634c:	4b77      	ldr	r3, [pc, #476]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006358:	d105      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2b03      	cmp	r3, #3
 800635e:	d102      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006360:	4b75      	ldr	r3, [pc, #468]	; (8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
 8006364:	e023      	b.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006366:	4b71      	ldr	r3, [pc, #452]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d10c      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b04      	cmp	r3, #4
 8006376:	d109      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006378:	4b6c      	ldr	r3, [pc, #432]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	08db      	lsrs	r3, r3, #3
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	4a6b      	ldr	r2, [pc, #428]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	637b      	str	r3, [r7, #52]	; 0x34
 800638a:	e010      	b.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800638c:	4b67      	ldr	r3, [pc, #412]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006398:	d105      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2b05      	cmp	r3, #5
 800639e:	d102      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80063a0:	4b64      	ldr	r3, [pc, #400]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
 80063a4:	e003      	b.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063aa:	f001 b96e 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063ae:	f001 b96c 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80063b2:	4b5e      	ldr	r3, [pc, #376]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80063be:	4b5b      	ldr	r3, [pc, #364]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d106      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d103      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d6:	637b      	str	r3, [r7, #52]	; 0x34
 80063d8:	e012      	b.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80063da:	4b54      	ldr	r3, [pc, #336]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80063dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063e8:	d106      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d103      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80063f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
 80063f6:	e003      	b.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80063fc:	f001 b945 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006400:	f001 b943 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006404:	4b49      	ldr	r3, [pc, #292]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006406:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800640a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800640e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006416:	f7fc f9b7 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 800641a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800641c:	f001 b935 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006426:	d108      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006428:	f107 0308 	add.w	r3, r7, #8
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe fc77 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006436:	f001 b928 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800643a:	4b3c      	ldr	r3, [pc, #240]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d10d      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800644c:	d109      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800644e:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	4a35      	ldr	r2, [pc, #212]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	637b      	str	r3, [r7, #52]	; 0x34
 8006460:	e011      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006462:	4b32      	ldr	r3, [pc, #200]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800646a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646e:	d106      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006476:	d102      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006478:	4b2e      	ldr	r3, [pc, #184]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800647a:	637b      	str	r3, [r7, #52]	; 0x34
 800647c:	e003      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006482:	f001 b902 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006486:	f001 b900 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800648a:	4b28      	ldr	r3, [pc, #160]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800648c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006490:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006494:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800649c:	f7fc f974 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80064a0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80064a2:	f001 b8f2 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ac:	d108      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ae:	f107 0308 	add.w	r3, r7, #8
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fc34 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064bc:	f001 b8e5 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80064c0:	4b1a      	ldr	r3, [pc, #104]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d10d      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064d2:	d109      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064d4:	4b15      	ldr	r3, [pc, #84]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	08db      	lsrs	r3, r3, #3
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	4a14      	ldr	r2, [pc, #80]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80064e0:	fa22 f303 	lsr.w	r3, r2, r3
 80064e4:	637b      	str	r3, [r7, #52]	; 0x34
 80064e6:	e011      	b.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80064e8:	4b10      	ldr	r3, [pc, #64]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f4:	d106      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064fc:	d102      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80064fe:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
 8006502:	e003      	b.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006508:	f001 b8bf 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800650c:	f001 b8bd 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006512:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006516:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800651a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10c      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006522:	f7fc f95d 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 8006526:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006528:	f001 b8af 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800652c:	44020c00 	.word	0x44020c00
 8006530:	03d09000 	.word	0x03d09000
 8006534:	003d0900 	.word	0x003d0900
 8006538:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006542:	d108      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006544:	f107 0308 	add.w	r3, r7, #8
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fbe9 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006552:	f001 b89a 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006556:	4b9f      	ldr	r3, [pc, #636]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d10d      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006568:	d109      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800656a:	4b9a      	ldr	r3, [pc, #616]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	08db      	lsrs	r3, r3, #3
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	4a98      	ldr	r2, [pc, #608]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006576:	fa22 f303 	lsr.w	r3, r2, r3
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
 800657c:	e011      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800657e:	4b95      	ldr	r3, [pc, #596]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658a:	d106      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006592:	d102      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006594:	4b91      	ldr	r3, [pc, #580]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006596:	637b      	str	r3, [r7, #52]	; 0x34
 8006598:	e003      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800659e:	f001 b874 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065a2:	f001 b872 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80065a6:	4b8b      	ldr	r3, [pc, #556]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80065a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80065b0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80065b8:	f7fc f912 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 80065bc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80065be:	f001 b864 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c8:	d108      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ca:	f107 0308 	add.w	r3, r7, #8
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fba6 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d8:	f001 b857 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80065dc:	4b7d      	ldr	r3, [pc, #500]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d10d      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065ee:	d109      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065f0:	4b78      	ldr	r3, [pc, #480]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	08db      	lsrs	r3, r3, #3
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	4a77      	ldr	r2, [pc, #476]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
 8006602:	e011      	b.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006604:	4b73      	ldr	r3, [pc, #460]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800660c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006610:	d106      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006618:	d102      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800661a:	4b70      	ldr	r3, [pc, #448]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
 800661e:	e003      	b.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006624:	f001 b831 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006628:	f001 b82f 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800662c:	4b69      	ldr	r3, [pc, #420]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800662e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006632:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006636:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800663e:	f7fc f8a3 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8006642:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006644:	f001 b821 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800664e:	d108      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006650:	f107 0308 	add.w	r3, r7, #8
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fb63 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800665e:	f001 b814 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006662:	4b5c      	ldr	r3, [pc, #368]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d10e      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006674:	d10a      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006676:	4b57      	ldr	r3, [pc, #348]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	08db      	lsrs	r3, r3, #3
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	4a55      	ldr	r2, [pc, #340]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006682:	fa22 f303 	lsr.w	r3, r2, r3
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006688:	f000 bfff 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006690:	f000 bffb 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006694:	4b4f      	ldr	r3, [pc, #316]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006696:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800669a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800669e:	633b      	str	r3, [r7, #48]	; 0x30
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80066a6:	d056      	beq.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80066ae:	f200 808b 	bhi.w	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b8:	d03e      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c0:	f200 8082 	bhi.w	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ca:	d027      	beq.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d2:	d879      	bhi.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066da:	d017      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e2:	d871      	bhi.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f0:	d004      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80066f2:	e069      	b.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80066f4:	f7fc f874 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 80066f8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80066fa:	e068      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066fc:	f107 0314 	add.w	r3, r7, #20
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe f9a3 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800670a:	e060      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800670c:	f107 0308 	add.w	r3, r7, #8
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe fb05 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800671a:	e058      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800671c:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800671e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	d103      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800672a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006730:	e04d      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006736:	e04a      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006738:	4b26      	ldr	r3, [pc, #152]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800673a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800673e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006746:	d103      	bne.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006748:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800674e:	e03e      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006754:	e03b      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006756:	4b1f      	ldr	r3, [pc, #124]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800675c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b02      	cmp	r3, #2
 800676c:	d10c      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d109      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006774:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	08db      	lsrs	r3, r3, #3
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	4a16      	ldr	r2, [pc, #88]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006780:	fa22 f303 	lsr.w	r3, r2, r3
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
 8006786:	e01e      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006788:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006794:	d106      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679c:	d102      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800679e:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
 80067a2:	e010      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b0:	d106      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b8:	d102      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34
 80067be:	e002      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80067c6:	e002      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80067cc:	bf00      	nop
          }
        }
        break;
 80067ce:	f000 bf5c 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067d2:	bf00      	nop
 80067d4:	44020c00 	.word	0x44020c00
 80067d8:	03d09000 	.word	0x03d09000
 80067dc:	003d0900 	.word	0x003d0900
 80067e0:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80067e4:	4b9e      	ldr	r3, [pc, #632]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80067e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80067ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80067f6:	d056      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80067fe:	f200 808b 	bhi.w	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006808:	d03e      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006810:	f200 8082 	bhi.w	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800681a:	d027      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006822:	d879      	bhi.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682a:	d017      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006832:	d871      	bhi.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006840:	d004      	beq.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006842:	e069      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006844:	f7fb ffa0 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8006848:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800684a:	e068      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800684c:	f107 0314 	add.w	r3, r7, #20
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f8fb 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800685a:	e060      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800685c:	f107 0308 	add.w	r3, r7, #8
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe fa5d 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800686a:	e058      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800686c:	4b7c      	ldr	r3, [pc, #496]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800686e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d103      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800687a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800687e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006880:	e04d      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006886:	e04a      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006888:	4b75      	ldr	r3, [pc, #468]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800688a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800688e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006896:	d103      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006898:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800689e:	e03e      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80068a4:	e03b      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068a6:	4b6e      	ldr	r3, [pc, #440]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068ac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068b2:	4b6b      	ldr	r3, [pc, #428]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068c4:	4b66      	ldr	r3, [pc, #408]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	08db      	lsrs	r3, r3, #3
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	4a65      	ldr	r2, [pc, #404]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
 80068d6:	e01e      	b.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068d8:	4b61      	ldr	r3, [pc, #388]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e4:	d106      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ec:	d102      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80068ee:	4b5e      	ldr	r3, [pc, #376]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
 80068f2:	e010      	b.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068f4:	4b5a      	ldr	r3, [pc, #360]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006900:	d106      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006908:	d102      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800690a:	4b58      	ldr	r3, [pc, #352]	; (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
 800690e:	e002      	b.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006914:	e003      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006916:	e002      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800691c:	bf00      	nop
          }
        }
        break;
 800691e:	f000 beb4 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006922:	4b4f      	ldr	r3, [pc, #316]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006924:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006928:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800692c:	633b      	str	r3, [r7, #48]	; 0x30
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006934:	d056      	beq.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800693c:	f200 808b 	bhi.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006946:	d03e      	beq.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800694e:	f200 8082 	bhi.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006958:	d027      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006960:	d879      	bhi.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006968:	d017      	beq.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006970:	d871      	bhi.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697e:	d004      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006980:	e069      	b.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006982:	f7fb ff2d 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 8006986:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006988:	e068      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800698a:	f107 0314 	add.w	r3, r7, #20
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe f85c 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006998:	e060      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800699a:	f107 0308 	add.w	r3, r7, #8
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe f9be 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80069a8:	e058      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069aa:	4b2d      	ldr	r3, [pc, #180]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80069ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d103      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80069b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80069be:	e04d      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80069c4:	e04a      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80069c6:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80069c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069d4:	d103      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80069d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80069dc:	e03e      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80069e2:	e03b      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069e4:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80069e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069ee:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069f0:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d10c      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a02:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	08db      	lsrs	r3, r3, #3
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
 8006a14:	e01e      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a16:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a22:	d106      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2a:	d102      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006a2c:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a30:	e010      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a46:	d102      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006a48:	4b08      	ldr	r3, [pc, #32]	; (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a4c:	e002      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8006a54:	e002      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a5a:	bf00      	nop
          }
        }
        break;
 8006a5c:	f000 be15 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a60:	44020c00 	.word	0x44020c00
 8006a64:	03d09000 	.word	0x03d09000
 8006a68:	003d0900 	.word	0x003d0900
 8006a6c:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006a70:	4b9e      	ldr	r3, [pc, #632]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006a72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a76:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8006a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006a82:	d056      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006a8a:	f200 808b 	bhi.w	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a94:	d03e      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9c:	f200 8082 	bhi.w	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aa6:	d027      	beq.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aae:	d879      	bhi.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab6:	d017      	beq.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006abe:	d871      	bhi.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006acc:	d004      	beq.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8006ace:	e069      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006ad0:	f7fb fe86 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 8006ad4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006ad6:	e068      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad8:	f107 0314 	add.w	r3, r7, #20
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fd ffb5 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ae6:	e060      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae8:	f107 0308 	add.w	r3, r7, #8
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe f917 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006af6:	e058      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006af8:	4b7c      	ldr	r3, [pc, #496]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d103      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b0c:	e04d      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b12:	e04a      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b14:	4b75      	ldr	r3, [pc, #468]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b22:	d103      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006b24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b2a:	e03e      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b30:	e03b      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b32:	4b6e      	ldr	r3, [pc, #440]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b3e:	4b6b      	ldr	r3, [pc, #428]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d10c      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b50:	4b66      	ldr	r3, [pc, #408]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	08db      	lsrs	r3, r3, #3
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	4a65      	ldr	r2, [pc, #404]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
 8006b62:	e01e      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b64:	4b61      	ldr	r3, [pc, #388]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b70:	d106      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b78:	d102      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b7a:	4b5e      	ldr	r3, [pc, #376]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7e:	e010      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b80:	4b5a      	ldr	r3, [pc, #360]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b94:	d102      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b96:	4b58      	ldr	r3, [pc, #352]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006ba0:	e003      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8006ba2:	e002      	b.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ba8:	bf00      	nop
          }
        }
        break;
 8006baa:	f000 bd6e 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006bae:	4b4f      	ldr	r3, [pc, #316]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006bb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006bb4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006bc0:	d056      	beq.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006bc8:	f200 808b 	bhi.w	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bd2:	d03e      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bda:	f200 8082 	bhi.w	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006be4:	d027      	beq.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bec:	d879      	bhi.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bf4:	d017      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bfc:	d871      	bhi.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c0a:	d004      	beq.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8006c0c:	e069      	b.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006c0e:	f7fb fde7 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 8006c12:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006c14:	e068      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c16:	f107 0314 	add.w	r3, r7, #20
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fd ff16 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c24:	e060      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c26:	f107 0308 	add.w	r3, r7, #8
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe f878 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c34:	e058      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c36:	4b2d      	ldr	r3, [pc, #180]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d103      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8006c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c4a:	e04d      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c50:	e04a      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006c52:	4b26      	ldr	r3, [pc, #152]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c60:	d103      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8006c62:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c68:	e03e      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c6e:	e03b      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c70:	4b1e      	ldr	r3, [pc, #120]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c76:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c7c:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d10c      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c8e:	4b17      	ldr	r3, [pc, #92]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	08db      	lsrs	r3, r3, #3
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca0:	e01e      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cae:	d106      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb6:	d102      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006cb8:	4b0e      	ldr	r3, [pc, #56]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbc:	e010      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cca:	d106      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd2:	d102      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006cd4:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd8:	e002      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006cde:	e003      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8006ce0:	e002      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ce6:	bf00      	nop
          }
        }
        break;
 8006ce8:	f000 bccf 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cec:	44020c00 	.word	0x44020c00
 8006cf0:	03d09000 	.word	0x03d09000
 8006cf4:	003d0900 	.word	0x003d0900
 8006cf8:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8006cfc:	4b9e      	ldr	r3, [pc, #632]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006cfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006d02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006d06:	633b      	str	r3, [r7, #48]	; 0x30
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d0e:	d056      	beq.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d16:	f200 808b 	bhi.w	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d20:	d03e      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d28:	f200 8082 	bhi.w	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d32:	d027      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d3a:	d879      	bhi.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d42:	d017      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d4a:	d871      	bhi.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d58:	d004      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8006d5a:	e069      	b.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006d5c:	f7fb fd40 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 8006d60:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006d62:	e068      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d64:	f107 0314 	add.w	r3, r7, #20
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fd fe6f 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d72:	e060      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d74:	f107 0308 	add.w	r3, r7, #8
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fd ffd1 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d82:	e058      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d84:	4b7c      	ldr	r3, [pc, #496]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d103      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d98:	e04d      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d9e:	e04a      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006da0:	4b75      	ldr	r3, [pc, #468]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dae:	d103      	bne.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8006db0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006db4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006db6:	e03e      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dbc:	e03b      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dbe:	4b6e      	ldr	r3, [pc, #440]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dc4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dca:	4b6b      	ldr	r3, [pc, #428]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d10c      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d109      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ddc:	4b66      	ldr	r3, [pc, #408]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	08db      	lsrs	r3, r3, #3
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	4a65      	ldr	r2, [pc, #404]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	637b      	str	r3, [r7, #52]	; 0x34
 8006dee:	e01e      	b.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006df0:	4b61      	ldr	r3, [pc, #388]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dfc:	d106      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e04:	d102      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e06:	4b5e      	ldr	r3, [pc, #376]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0a:	e010      	b.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e0c:	4b5a      	ldr	r3, [pc, #360]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e18:	d106      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e20:	d102      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e22:	4b58      	ldr	r3, [pc, #352]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
 8006e26:	e002      	b.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006e2c:	e003      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8006e2e:	e002      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e34:	bf00      	nop
          }
        }
        break;
 8006e36:	f000 bc28 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006e3a:	4b4f      	ldr	r3, [pc, #316]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e44:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006e46:	4b4c      	ldr	r3, [pc, #304]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e52:	d106      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8006e5a:	4b4a      	ldr	r3, [pc, #296]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006e5e:	f000 bc14 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e68:	d108      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e6a:	f107 0320 	add.w	r3, r7, #32
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fd fc82 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e78:	f000 bc07 	b.w	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e82:	d107      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e84:	f107 0314 	add.w	r3, r7, #20
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fd fddf 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e92:	e3fa      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e98:	e3f7      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006e9a:	4b37      	ldr	r3, [pc, #220]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d861      	bhi.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8006eac:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8006eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb2:	bf00      	nop
 8006eb4:	08006ec9 	.word	0x08006ec9
 8006eb8:	08006ed9 	.word	0x08006ed9
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	08006ef9 	.word	0x08006ef9
 8006ec4:	08006eff 	.word	0x08006eff
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ec8:	f107 0320 	add.w	r3, r7, #32
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fd fc53 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ed6:	e04e      	b.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ed8:	f107 0314 	add.w	r3, r7, #20
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fd fdb5 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ee6:	e046      	b.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ee8:	f107 0308 	add.w	r3, r7, #8
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fd ff17 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ef6:	e03e      	b.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006ef8:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8006efa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006efc:	e03b      	b.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006efe:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f04:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d10c      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f1c:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	08db      	lsrs	r3, r3, #3
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	4a15      	ldr	r2, [pc, #84]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2e:	e01e      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3c:	d106      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f44:	d102      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4a:	e010      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f58:	d106      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f60:	d102      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
 8006f66:	e002      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006f6c:	e003      	b.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8006f6e:	e002      	b.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f74:	bf00      	nop
          }
        }
        break;
 8006f76:	e388      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f78:	44020c00 	.word	0x44020c00
 8006f7c:	03d09000 	.word	0x03d09000
 8006f80:	003d0900 	.word	0x003d0900
 8006f84:	017d7840 	.word	0x017d7840
 8006f88:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006f8c:	4ba9      	ldr	r3, [pc, #676]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f96:	633b      	str	r3, [r7, #48]	; 0x30
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	f200 809a 	bhi.w	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8006fa0:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	0800702d 	.word	0x0800702d
 8006fac:	080070d5 	.word	0x080070d5
 8006fb0:	080070d5 	.word	0x080070d5
 8006fb4:	080070d5 	.word	0x080070d5
 8006fb8:	080070d5 	.word	0x080070d5
 8006fbc:	080070d5 	.word	0x080070d5
 8006fc0:	080070d5 	.word	0x080070d5
 8006fc4:	080070d5 	.word	0x080070d5
 8006fc8:	0800703d 	.word	0x0800703d
 8006fcc:	080070d5 	.word	0x080070d5
 8006fd0:	080070d5 	.word	0x080070d5
 8006fd4:	080070d5 	.word	0x080070d5
 8006fd8:	080070d5 	.word	0x080070d5
 8006fdc:	080070d5 	.word	0x080070d5
 8006fe0:	080070d5 	.word	0x080070d5
 8006fe4:	080070d5 	.word	0x080070d5
 8006fe8:	0800704d 	.word	0x0800704d
 8006fec:	080070d5 	.word	0x080070d5
 8006ff0:	080070d5 	.word	0x080070d5
 8006ff4:	080070d5 	.word	0x080070d5
 8006ff8:	080070d5 	.word	0x080070d5
 8006ffc:	080070d5 	.word	0x080070d5
 8007000:	080070d5 	.word	0x080070d5
 8007004:	080070d5 	.word	0x080070d5
 8007008:	0800705d 	.word	0x0800705d
 800700c:	080070d5 	.word	0x080070d5
 8007010:	080070d5 	.word	0x080070d5
 8007014:	080070d5 	.word	0x080070d5
 8007018:	080070d5 	.word	0x080070d5
 800701c:	080070d5 	.word	0x080070d5
 8007020:	080070d5 	.word	0x080070d5
 8007024:	080070d5 	.word	0x080070d5
 8007028:	08007063 	.word	0x08007063
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800702c:	f107 0320 	add.w	r3, r7, #32
 8007030:	4618      	mov	r0, r3
 8007032:	f7fd fba1 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800703a:	e04e      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800703c:	f107 0314 	add.w	r3, r7, #20
 8007040:	4618      	mov	r0, r3
 8007042:	f7fd fd03 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800704a:	e046      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800704c:	f107 0308 	add.w	r3, r7, #8
 8007050:	4618      	mov	r0, r3
 8007052:	f7fd fe65 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800705a:	e03e      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800705c:	4b76      	ldr	r3, [pc, #472]	; (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007060:	e03b      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007062:	4b74      	ldr	r3, [pc, #464]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007068:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800706c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800706e:	4b71      	ldr	r3, [pc, #452]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b02      	cmp	r3, #2
 8007078:	d10c      	bne.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007080:	4b6c      	ldr	r3, [pc, #432]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	08db      	lsrs	r3, r3, #3
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	4a6c      	ldr	r2, [pc, #432]	; (800723c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
 8007090:	637b      	str	r3, [r7, #52]	; 0x34
 8007092:	e01e      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007094:	4b67      	ldr	r3, [pc, #412]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800709c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a0:	d106      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a8:	d102      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80070aa:	4b65      	ldr	r3, [pc, #404]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
 80070ae:	e010      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070b0:	4b60      	ldr	r3, [pc, #384]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070bc:	d106      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c4:	d102      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070c6:	4b5f      	ldr	r3, [pc, #380]	; (8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ca:	e002      	b.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80070d0:	e003      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80070d2:	e002      	b.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070d8:	bf00      	nop
          }
        }
        break;
 80070da:	e2d6      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80070dc:	4b55      	ldr	r3, [pc, #340]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80070de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80070e6:	633b      	str	r3, [r7, #48]	; 0x30
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ee:	d031      	beq.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f6:	d866      	bhi.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	2bc0      	cmp	r3, #192	; 0xc0
 80070fc:	d027      	beq.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	2bc0      	cmp	r3, #192	; 0xc0
 8007102:	d860      	bhi.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	2b80      	cmp	r3, #128	; 0x80
 8007108:	d019      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	2b80      	cmp	r3, #128	; 0x80
 800710e:	d85a      	bhi.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d008      	beq.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800711c:	e053      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800711e:	f107 0320 	add.w	r3, r7, #32
 8007122:	4618      	mov	r0, r3
 8007124:	f7fd fb28 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800712c:	e04e      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800712e:	f107 0314 	add.w	r3, r7, #20
 8007132:	4618      	mov	r0, r3
 8007134:	f7fd fc8a 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800713c:	e046      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	4618      	mov	r0, r3
 8007144:	f7fd fdec 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800714c:	e03e      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800714e:	4b3a      	ldr	r3, [pc, #232]	; (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007152:	e03b      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007154:	4b37      	ldr	r3, [pc, #220]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800715a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007160:	4b34      	ldr	r3, [pc, #208]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b02      	cmp	r3, #2
 800716a:	d10c      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007172:	4b30      	ldr	r3, [pc, #192]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	08db      	lsrs	r3, r3, #3
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	4a2f      	ldr	r2, [pc, #188]	; (800723c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
 8007184:	e01e      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007186:	4b2b      	ldr	r3, [pc, #172]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800718e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007192:	d106      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719a:	d102      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800719c:	4b28      	ldr	r3, [pc, #160]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
 80071a0:	e010      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071a2:	4b24      	ldr	r3, [pc, #144]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ae:	d106      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071b6:	d102      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071b8:	4b22      	ldr	r3, [pc, #136]	; (8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
 80071bc:	e002      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80071c2:	e003      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071ca:	bf00      	nop
          }
        }
        break;
 80071cc:	e25d      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80071ce:	4b19      	ldr	r3, [pc, #100]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80071d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071d4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80071e0:	f7fb fae8 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 80071e4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80071e6:	e250      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80071e8:	4b12      	ldr	r3, [pc, #72]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f4:	d10b      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fc:	d107      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fe:	f107 0314 	add.w	r3, r7, #20
 8007202:	4618      	mov	r0, r3
 8007204:	f7fd fc22 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	637b      	str	r3, [r7, #52]	; 0x34
 800720c:	e04f      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800721a:	d115      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007222:	d111      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007224:	f107 0308 	add.w	r3, r7, #8
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd fd79 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
 8007232:	e03c      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007234:	44020c00 	.word	0x44020c00
 8007238:	00bb8000 	.word	0x00bb8000
 800723c:	03d09000 	.word	0x03d09000
 8007240:	003d0900 	.word	0x003d0900
 8007244:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007248:	4b94      	ldr	r3, [pc, #592]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b02      	cmp	r3, #2
 8007252:	d10d      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800725a:	d109      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800725c:	4b8f      	ldr	r3, [pc, #572]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	08db      	lsrs	r3, r3, #3
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	4a8e      	ldr	r2, [pc, #568]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
 800726e:	e01e      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007270:	4b8a      	ldr	r3, [pc, #552]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727c:	d106      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007284:	d102      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007286:	4b87      	ldr	r3, [pc, #540]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
 800728a:	e010      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800728c:	4b83      	ldr	r3, [pc, #524]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007298:	d106      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80072a0:	d102      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80072a2:	4b81      	ldr	r3, [pc, #516]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
 80072a6:	e002      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ac:	e1ed      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072ae:	e1ec      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80072b0:	4b7a      	ldr	r3, [pc, #488]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80072ba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80072c2:	f7fb fa8d 	bl	80027e0 <HAL_RCC_GetPCLK3Freq>
 80072c6:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80072c8:	e1df      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80072ca:	4b74      	ldr	r3, [pc, #464]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072d6:	d10b      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072de:	d107      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e0:	f107 0314 	add.w	r3, r7, #20
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd fbb1 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
 80072ee:	e045      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80072f0:	4b6a      	ldr	r3, [pc, #424]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072fc:	d10b      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007304:	d107      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007306:	f107 0308 	add.w	r3, r7, #8
 800730a:	4618      	mov	r0, r3
 800730c:	f7fd fd08 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
 8007314:	e032      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007316:	4b61      	ldr	r3, [pc, #388]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b02      	cmp	r3, #2
 8007320:	d10d      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007328:	d109      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800732a:	4b5c      	ldr	r3, [pc, #368]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	08db      	lsrs	r3, r3, #3
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	4a5a      	ldr	r2, [pc, #360]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007336:	fa22 f303 	lsr.w	r3, r2, r3
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
 800733c:	e01e      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800733e:	4b57      	ldr	r3, [pc, #348]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800734a:	d106      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007352:	d102      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007354:	4b53      	ldr	r3, [pc, #332]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007356:	637b      	str	r3, [r7, #52]	; 0x34
 8007358:	e010      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800735a:	4b50      	ldr	r3, [pc, #320]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007366:	d106      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800736e:	d102      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007370:	4b4d      	ldr	r3, [pc, #308]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007372:	637b      	str	r3, [r7, #52]	; 0x34
 8007374:	e002      	b.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800737a:	e186      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800737c:	e185      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800737e:	4b47      	ldr	r3, [pc, #284]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007384:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007388:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	2b00      	cmp	r3, #0
 800738e:	d103      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007390:	f7fb fa10 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8007394:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007396:	e178      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007398:	4b40      	ldr	r3, [pc, #256]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073a4:	d10b      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ac:	d107      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ae:	f107 0314 	add.w	r3, r7, #20
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fd fb4a 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	637b      	str	r3, [r7, #52]	; 0x34
 80073bc:	e045      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80073be:	4b37      	ldr	r3, [pc, #220]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ca:	d10b      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d2:	d107      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d4:	f107 0308 	add.w	r3, r7, #8
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fd fca1 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	e032      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80073e4:	4b2d      	ldr	r3, [pc, #180]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d10d      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80073f6:	d109      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073f8:	4b28      	ldr	r3, [pc, #160]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	08db      	lsrs	r3, r3, #3
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	4a27      	ldr	r2, [pc, #156]	; (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
 800740a:	e01e      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800740c:	4b23      	ldr	r3, [pc, #140]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007418:	d106      	bne.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007420:	d102      	bne.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007422:	4b20      	ldr	r3, [pc, #128]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007424:	637b      	str	r3, [r7, #52]	; 0x34
 8007426:	e010      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007434:	d106      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800743c:	d102      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800743e:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007440:	637b      	str	r3, [r7, #52]	; 0x34
 8007442:	e002      	b.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007448:	e11f      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800744a:	e11e      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800744c:	4b13      	ldr	r3, [pc, #76]	; (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800744e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	633b      	str	r3, [r7, #48]	; 0x30
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	2b03      	cmp	r3, #3
 800745c:	d85f      	bhi.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007475 	.word	0x08007475
 8007468:	0800747d 	.word	0x0800747d
 800746c:	0800748d 	.word	0x0800748d
 8007470:	080074ad 	.word	0x080074ad

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007474:	f7fb f96c 	bl	8002750 <HAL_RCC_GetHCLKFreq>
 8007478:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800747a:	e053      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800747c:	f107 0320 	add.w	r3, r7, #32
 8007480:	4618      	mov	r0, r3
 8007482:	f7fd f979 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800748a:	e04b      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800748c:	f107 0314 	add.w	r3, r7, #20
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd fadb 	bl	8004a4c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800749a:	e043      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800749c:	44020c00 	.word	0x44020c00
 80074a0:	03d09000 	.word	0x03d09000
 80074a4:	003d0900 	.word	0x003d0900
 80074a8:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074ac:	4b79      	ldr	r3, [pc, #484]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80074b6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074b8:	4b76      	ldr	r3, [pc, #472]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d10c      	bne.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d109      	bne.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074ca:	4b72      	ldr	r3, [pc, #456]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	08db      	lsrs	r3, r3, #3
 80074d0:	f003 0303 	and.w	r3, r3, #3
 80074d4:	4a70      	ldr	r2, [pc, #448]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80074d6:	fa22 f303 	lsr.w	r3, r2, r3
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
 80074dc:	e01e      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074de:	4b6d      	ldr	r3, [pc, #436]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ea:	d106      	bne.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f2:	d102      	bne.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80074f4:	4b69      	ldr	r3, [pc, #420]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
 80074f8:	e010      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074fa:	4b66      	ldr	r3, [pc, #408]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007506:	d106      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800750e:	d102      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007510:	4b63      	ldr	r3, [pc, #396]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
 8007514:	e002      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800751a:	e003      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800751c:	e002      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007522:	bf00      	nop
          }
        }
        break;
 8007524:	e0b1      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007526:	4b5b      	ldr	r3, [pc, #364]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800752c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007530:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007532:	4b58      	ldr	r3, [pc, #352]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b02      	cmp	r3, #2
 800753e:	d106      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
 800754c:	e01f      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800754e:	4b51      	ldr	r3, [pc, #324]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800755c:	d106      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	d103      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007564:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007568:	637b      	str	r3, [r7, #52]	; 0x34
 800756a:	e010      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800756c:	4b49      	ldr	r3, [pc, #292]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007578:	d106      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2b80      	cmp	r3, #128	; 0x80
 800757e:	d103      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007580:	f248 0312 	movw	r3, #32786	; 0x8012
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
 8007586:	e002      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800758c:	e07d      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800758e:	e07c      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007590:	4b40      	ldr	r3, [pc, #256]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007596:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800759a:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800759c:	4b3d      	ldr	r3, [pc, #244]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a8:	d105      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80075b0:	4b3c      	ldr	r3, [pc, #240]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
 80075b4:	e031      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80075b6:	4b37      	ldr	r3, [pc, #220]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075c2:	d10a      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	2b10      	cmp	r3, #16
 80075c8:	d107      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ca:	f107 0320 	add.w	r3, r7, #32
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fd f8d2 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
 80075d8:	e01f      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80075da:	4b2e      	ldr	r3, [pc, #184]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80075dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d106      	bne.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d103      	bne.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80075ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
 80075f4:	e011      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80075f6:	4b27      	ldr	r3, [pc, #156]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80075f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007604:	d106      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	2b30      	cmp	r3, #48	; 0x30
 800760a:	d103      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800760c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
 8007612:	e002      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007618:	e037      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800761a:	e036      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800761c:	4b1d      	ldr	r3, [pc, #116]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800761e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007622:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007626:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	2b10      	cmp	r3, #16
 800762c:	d107      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800762e:	f107 0320 	add.w	r3, r7, #32
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd f8a0 	bl	8004778 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800763c:	e025      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800763e:	4b15      	ldr	r3, [pc, #84]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764a:	d10a      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	2b20      	cmp	r3, #32
 8007650:	d107      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007652:	f107 0308 	add.w	r3, r7, #8
 8007656:	4618      	mov	r0, r3
 8007658:	f7fd fb62 	bl	8004d20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	637b      	str	r3, [r7, #52]	; 0x34
 8007660:	e00f      	b.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007662:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800766a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800766e:	d105      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	2b30      	cmp	r3, #48	; 0x30
 8007674:	d102      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
 800767a:	e002      	b.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007680:	e003      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007682:	e002      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007688:	bf00      	nop
    }
  }

  return (frequency);
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800768c:	4618      	mov	r0, r3
 800768e:	373c      	adds	r7, #60	; 0x3c
 8007690:	46bd      	mov	sp, r7
 8007692:	bd90      	pop	{r4, r7, pc}
 8007694:	44020c00 	.word	0x44020c00
 8007698:	03d09000 	.word	0x03d09000
 800769c:	003d0900 	.word	0x003d0900
 80076a0:	017d7840 	.word	0x017d7840
 80076a4:	02dc6c00 	.word	0x02dc6c00

080076a8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80076b0:	4b48      	ldr	r3, [pc, #288]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a47      	ldr	r2, [pc, #284]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 80076b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076bc:	f7f9 fed2 	bl	8001464 <HAL_GetTick>
 80076c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076c2:	e008      	b.n	80076d6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076c4:	f7f9 fece 	bl	8001464 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e07a      	b.n	80077cc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d6:	4b3f      	ldr	r3, [pc, #252]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1f0      	bne.n	80076c4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80076e2:	4b3c      	ldr	r3, [pc, #240]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076ea:	f023 0303 	bic.w	r3, r3, #3
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6811      	ldr	r1, [r2, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6852      	ldr	r2, [r2, #4]
 80076f6:	0212      	lsls	r2, r2, #8
 80076f8:	430a      	orrs	r2, r1
 80076fa:	4936      	ldr	r1, [pc, #216]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	3b01      	subs	r3, #1
 8007706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	3b01      	subs	r3, #1
 8007710:	025b      	lsls	r3, r3, #9
 8007712:	b29b      	uxth	r3, r3
 8007714:	431a      	orrs	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	3b01      	subs	r3, #1
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	3b01      	subs	r3, #1
 800772a:	061b      	lsls	r3, r3, #24
 800772c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007730:	4928      	ldr	r1, [pc, #160]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 8007732:	4313      	orrs	r3, r2
 8007734:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007736:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f023 020c 	bic.w	r2, r3, #12
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	4924      	ldr	r1, [pc, #144]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 8007744:	4313      	orrs	r3, r2
 8007746:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007748:	4b22      	ldr	r3, [pc, #136]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	f023 0220 	bic.w	r2, r3, #32
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	491f      	ldr	r1, [pc, #124]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 8007756:	4313      	orrs	r3, r2
 8007758:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800775a:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	491c      	ldr	r1, [pc, #112]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 8007764:	4313      	orrs	r3, r2
 8007766:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007768:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	4a19      	ldr	r2, [pc, #100]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 800776e:	f023 0310 	bic.w	r3, r3, #16
 8007772:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007774:	4b17      	ldr	r3, [pc, #92]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 8007776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007778:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800777c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6a12      	ldr	r2, [r2, #32]
 8007784:	00d2      	lsls	r2, r2, #3
 8007786:	4913      	ldr	r1, [pc, #76]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 8007788:	4313      	orrs	r3, r2
 800778a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800778c:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 8007792:	f043 0310 	orr.w	r3, r3, #16
 8007796:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007798:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a0d      	ldr	r2, [pc, #52]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 800779e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077a4:	f7f9 fe5e 	bl	8001464 <HAL_GetTick>
 80077a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077aa:	e008      	b.n	80077be <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077ac:	f7f9 fe5a 	bl	8001464 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d901      	bls.n	80077be <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e006      	b.n	80077cc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <RCCEx_PLL2_Config+0x12c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f0      	beq.n	80077ac <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80077ca:	2300      	movs	r3, #0

}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	44020c00 	.word	0x44020c00

080077d8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80077e0:	4b48      	ldr	r3, [pc, #288]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a47      	ldr	r2, [pc, #284]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80077e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077ec:	f7f9 fe3a 	bl	8001464 <HAL_GetTick>
 80077f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077f2:	e008      	b.n	8007806 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077f4:	f7f9 fe36 	bl	8001464 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d901      	bls.n	8007806 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e07a      	b.n	80078fc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007806:	4b3f      	ldr	r3, [pc, #252]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1f0      	bne.n	80077f4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007812:	4b3c      	ldr	r3, [pc, #240]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800781a:	f023 0303 	bic.w	r3, r3, #3
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6811      	ldr	r1, [r2, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6852      	ldr	r2, [r2, #4]
 8007826:	0212      	lsls	r2, r2, #8
 8007828:	430a      	orrs	r2, r1
 800782a:	4936      	ldr	r1, [pc, #216]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 800782c:	4313      	orrs	r3, r2
 800782e:	630b      	str	r3, [r1, #48]	; 0x30
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	3b01      	subs	r3, #1
 8007836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	3b01      	subs	r3, #1
 8007840:	025b      	lsls	r3, r3, #9
 8007842:	b29b      	uxth	r3, r3
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	3b01      	subs	r3, #1
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	3b01      	subs	r3, #1
 800785a:	061b      	lsls	r3, r3, #24
 800785c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007860:	4928      	ldr	r1, [pc, #160]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 8007862:	4313      	orrs	r3, r2
 8007864:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007866:	4b27      	ldr	r3, [pc, #156]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	f023 020c 	bic.w	r2, r3, #12
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	4924      	ldr	r1, [pc, #144]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 8007874:	4313      	orrs	r3, r2
 8007876:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007878:	4b22      	ldr	r3, [pc, #136]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	f023 0220 	bic.w	r2, r3, #32
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	491f      	ldr	r1, [pc, #124]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800788a:	4b1e      	ldr	r3, [pc, #120]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 800788c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	491c      	ldr	r1, [pc, #112]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 8007894:	4313      	orrs	r3, r2
 8007896:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007898:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	4a19      	ldr	r2, [pc, #100]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 800789e:	f023 0310 	bic.w	r3, r3, #16
 80078a2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80078a4:	4b17      	ldr	r3, [pc, #92]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80078a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6a12      	ldr	r2, [r2, #32]
 80078b4:	00d2      	lsls	r2, r2, #3
 80078b6:	4913      	ldr	r1, [pc, #76]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80078bc:	4b11      	ldr	r3, [pc, #68]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80078be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c0:	4a10      	ldr	r2, [pc, #64]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80078c2:	f043 0310 	orr.w	r3, r3, #16
 80078c6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80078c8:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a0d      	ldr	r2, [pc, #52]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80078ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078d4:	f7f9 fdc6 	bl	8001464 <HAL_GetTick>
 80078d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078da:	e008      	b.n	80078ee <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078dc:	f7f9 fdc2 	bl	8001464 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e006      	b.n	80078fc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <RCCEx_PLL3_Config+0x12c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	44020c00 	.word	0x44020c00

08007908 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e162      	b.n	8007be0 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a70      	ldr	r2, [pc, #448]	; (8007ae0 <HAL_SPI_Init+0x1d8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d018      	beq.n	8007956 <HAL_SPI_Init+0x4e>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a6e      	ldr	r2, [pc, #440]	; (8007ae4 <HAL_SPI_Init+0x1dc>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <HAL_SPI_Init+0x4e>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a6d      	ldr	r2, [pc, #436]	; (8007ae8 <HAL_SPI_Init+0x1e0>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00e      	beq.n	8007956 <HAL_SPI_Init+0x4e>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a6b      	ldr	r2, [pc, #428]	; (8007aec <HAL_SPI_Init+0x1e4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d009      	beq.n	8007956 <HAL_SPI_Init+0x4e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a6a      	ldr	r2, [pc, #424]	; (8007af0 <HAL_SPI_Init+0x1e8>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d004      	beq.n	8007956 <HAL_SPI_Init+0x4e>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a68      	ldr	r2, [pc, #416]	; (8007af4 <HAL_SPI_Init+0x1ec>)
 8007952:	4293      	cmp	r3, r2
 8007954:	e000      	b.n	8007958 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007956:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a5f      	ldr	r2, [pc, #380]	; (8007ae0 <HAL_SPI_Init+0x1d8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d018      	beq.n	800799a <HAL_SPI_Init+0x92>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a5d      	ldr	r2, [pc, #372]	; (8007ae4 <HAL_SPI_Init+0x1dc>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d013      	beq.n	800799a <HAL_SPI_Init+0x92>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a5c      	ldr	r2, [pc, #368]	; (8007ae8 <HAL_SPI_Init+0x1e0>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00e      	beq.n	800799a <HAL_SPI_Init+0x92>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a5a      	ldr	r2, [pc, #360]	; (8007aec <HAL_SPI_Init+0x1e4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d009      	beq.n	800799a <HAL_SPI_Init+0x92>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a59      	ldr	r2, [pc, #356]	; (8007af0 <HAL_SPI_Init+0x1e8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d004      	beq.n	800799a <HAL_SPI_Init+0x92>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a57      	ldr	r2, [pc, #348]	; (8007af4 <HAL_SPI_Init+0x1ec>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d105      	bne.n	80079a6 <HAL_SPI_Init+0x9e>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b0f      	cmp	r3, #15
 80079a0:	d901      	bls.n	80079a6 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e11c      	b.n	8007be0 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fc32 	bl	8008210 <SPI_GetPacketSize>
 80079ac:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a4b      	ldr	r2, [pc, #300]	; (8007ae0 <HAL_SPI_Init+0x1d8>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d018      	beq.n	80079ea <HAL_SPI_Init+0xe2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a49      	ldr	r2, [pc, #292]	; (8007ae4 <HAL_SPI_Init+0x1dc>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d013      	beq.n	80079ea <HAL_SPI_Init+0xe2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a48      	ldr	r2, [pc, #288]	; (8007ae8 <HAL_SPI_Init+0x1e0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00e      	beq.n	80079ea <HAL_SPI_Init+0xe2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a46      	ldr	r2, [pc, #280]	; (8007aec <HAL_SPI_Init+0x1e4>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d009      	beq.n	80079ea <HAL_SPI_Init+0xe2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a45      	ldr	r2, [pc, #276]	; (8007af0 <HAL_SPI_Init+0x1e8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d004      	beq.n	80079ea <HAL_SPI_Init+0xe2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a43      	ldr	r2, [pc, #268]	; (8007af4 <HAL_SPI_Init+0x1ec>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d102      	bne.n	80079f0 <HAL_SPI_Init+0xe8>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d820      	bhi.n	8007a32 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079f4:	4a40      	ldr	r2, [pc, #256]	; (8007af8 <HAL_SPI_Init+0x1f0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d018      	beq.n	8007a2c <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a3f      	ldr	r2, [pc, #252]	; (8007afc <HAL_SPI_Init+0x1f4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <HAL_SPI_Init+0x124>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a3d      	ldr	r2, [pc, #244]	; (8007b00 <HAL_SPI_Init+0x1f8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00e      	beq.n	8007a2c <HAL_SPI_Init+0x124>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a3c      	ldr	r2, [pc, #240]	; (8007b04 <HAL_SPI_Init+0x1fc>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_SPI_Init+0x124>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a3a      	ldr	r2, [pc, #232]	; (8007b08 <HAL_SPI_Init+0x200>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_SPI_Init+0x124>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a39      	ldr	r2, [pc, #228]	; (8007b0c <HAL_SPI_Init+0x204>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d104      	bne.n	8007a36 <HAL_SPI_Init+0x12e>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b10      	cmp	r3, #16
 8007a30:	d901      	bls.n	8007a36 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e0d4      	b.n	8007be0 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7f9 fa08 	bl	8000e60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007a72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a7c:	d119      	bne.n	8007ab2 <HAL_SPI_Init+0x1aa>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a86:	d103      	bne.n	8007a90 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10c      	bne.n	8007ab2 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aa0:	d107      	bne.n	8007ab2 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ab0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d028      	beq.n	8007b10 <HAL_SPI_Init+0x208>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	2b06      	cmp	r3, #6
 8007ac4:	d924      	bls.n	8007b10 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	430a      	orrs	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e020      	b.n	8007b20 <HAL_SPI_Init+0x218>
 8007ade:	bf00      	nop
 8007ae0:	40014c00 	.word	0x40014c00
 8007ae4:	50014c00 	.word	0x50014c00
 8007ae8:	44002000 	.word	0x44002000
 8007aec:	54002000 	.word	0x54002000
 8007af0:	40015000 	.word	0x40015000
 8007af4:	50015000 	.word	0x50015000
 8007af8:	40013000 	.word	0x40013000
 8007afc:	50013000 	.word	0x50013000
 8007b00:	40003800 	.word	0x40003800
 8007b04:	50003800 	.word	0x50003800
 8007b08:	40003c00 	.word	0x40003c00
 8007b0c:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b1e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	69da      	ldr	r2, [r3, #28]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b32:	ea42 0103 	orr.w	r1, r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	431a      	orrs	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b74:	431a      	orrs	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8c:	ea42 0103 	orr.w	r1, r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0201 	bic.w	r2, r2, #1
 8007baa:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08c      	sub	sp, #48	; 0x30
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3320      	adds	r3, #32
 8007c02:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3330      	adds	r3, #48	; 0x30
 8007c0a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x32>
 8007c16:	2302      	movs	r3, #2
 8007c18:	e227      	b.n	800806a <HAL_SPI_TransmitReceive+0x482>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c22:	f7f9 fc1f 	bl	8001464 <HAL_GetTick>
 8007c26:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8007c28:	887b      	ldrh	r3, [r7, #2]
 8007c2a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8007c2c:	887b      	ldrh	r3, [r7, #2]
 8007c2e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d009      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c4e:	e20c      	b.n	800806a <HAL_SPI_TransmitReceive+0x482>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_SPI_TransmitReceive+0x7a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_SPI_TransmitReceive+0x7a>
 8007c5c:	887b      	ldrh	r3, [r7, #2]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c74:	e1f9      	b.n	800806a <HAL_SPI_TransmitReceive+0x482>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2205      	movs	r2, #5
 8007c7a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	887a      	ldrh	r2, [r7, #2]
 8007c90:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	887a      	ldrh	r2, [r7, #2]
 8007c98:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	887a      	ldrh	r2, [r7, #2]
 8007ca6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	887a      	ldrh	r2, [r7, #2]
 8007cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007ccc:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	0c1b      	lsrs	r3, r3, #16
 8007cd6:	041b      	lsls	r3, r3, #16
 8007cd8:	8879      	ldrh	r1, [r7, #2]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0201 	orr.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cfa:	d107      	bne.n	8007d0c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	2b0f      	cmp	r3, #15
 8007d12:	f240 8090 	bls.w	8007e36 <HAL_SPI_TransmitReceive+0x24e>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a81      	ldr	r2, [pc, #516]	; (8007f20 <HAL_SPI_TransmitReceive+0x338>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	f000 8083 	beq.w	8007e28 <HAL_SPI_TransmitReceive+0x240>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a7f      	ldr	r2, [pc, #508]	; (8007f24 <HAL_SPI_TransmitReceive+0x33c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d07d      	beq.n	8007e28 <HAL_SPI_TransmitReceive+0x240>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a7d      	ldr	r2, [pc, #500]	; (8007f28 <HAL_SPI_TransmitReceive+0x340>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d078      	beq.n	8007e28 <HAL_SPI_TransmitReceive+0x240>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a7c      	ldr	r2, [pc, #496]	; (8007f2c <HAL_SPI_TransmitReceive+0x344>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d073      	beq.n	8007e28 <HAL_SPI_TransmitReceive+0x240>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a7a      	ldr	r2, [pc, #488]	; (8007f30 <HAL_SPI_TransmitReceive+0x348>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d06e      	beq.n	8007e28 <HAL_SPI_TransmitReceive+0x240>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a79      	ldr	r2, [pc, #484]	; (8007f34 <HAL_SPI_TransmitReceive+0x34c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d170      	bne.n	8007e36 <HAL_SPI_TransmitReceive+0x24e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d54:	e068      	b.n	8007e28 <HAL_SPI_TransmitReceive+0x240>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d11a      	bne.n	8007d9a <HAL_SPI_TransmitReceive+0x1b2>
 8007d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d017      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x1b2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d7a:	1d1a      	adds	r2, r3, #4
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d98:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695a      	ldr	r2, [r3, #20]
 8007da0:	f248 0308 	movw	r3, #32776	; 0x8008
 8007da4:	4013      	ands	r3, r2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01a      	beq.n	8007de0 <HAL_SPI_TransmitReceive+0x1f8>
 8007daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d017      	beq.n	8007de0 <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007dba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc0:	1d1a      	adds	r2, r3, #4
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007dde:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007de0:	f7f9 fb40 	bl	8001464 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d803      	bhi.n	8007df8 <HAL_SPI_TransmitReceive+0x210>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d102      	bne.n	8007dfe <HAL_SPI_TransmitReceive+0x216>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d114      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x240>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 f938 	bl	8008074 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e120      	b.n	800806a <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d193      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x16e>
 8007e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d190      	bne.n	8007d56 <HAL_SPI_TransmitReceive+0x16e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007e34:	e0f2      	b.n	800801c <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b07      	cmp	r3, #7
 8007e3c:	f240 80e8 	bls.w	8008010 <HAL_SPI_TransmitReceive+0x428>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e40:	e066      	b.n	8007f10 <HAL_SPI_TransmitReceive+0x328>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d119      	bne.n	8007e84 <HAL_SPI_TransmitReceive+0x29c>
 8007e50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d016      	beq.n	8007e84 <HAL_SPI_TransmitReceive+0x29c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5a:	881a      	ldrh	r2, [r3, #0]
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e64:	1c9a      	adds	r2, r3, #2
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	3b01      	subs	r3, #1
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e82:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d11a      	bne.n	8007ec8 <HAL_SPI_TransmitReceive+0x2e0>
 8007e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d017      	beq.n	8007ec8 <HAL_SPI_TransmitReceive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	8812      	ldrh	r2, [r2, #0]
 8007ea0:	b292      	uxth	r2, r2
 8007ea2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea8:	1c9a      	adds	r2, r3, #2
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec8:	f7f9 facc 	bl	8001464 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d803      	bhi.n	8007ee0 <HAL_SPI_TransmitReceive+0x2f8>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d102      	bne.n	8007ee6 <HAL_SPI_TransmitReceive+0x2fe>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d114      	bne.n	8007f10 <HAL_SPI_TransmitReceive+0x328>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 f8c4 	bl	8008074 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007efa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e0ac      	b.n	800806a <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d195      	bne.n	8007e42 <HAL_SPI_TransmitReceive+0x25a>
 8007f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d192      	bne.n	8007e42 <HAL_SPI_TransmitReceive+0x25a>
 8007f1c:	e07e      	b.n	800801c <HAL_SPI_TransmitReceive+0x434>
 8007f1e:	bf00      	nop
 8007f20:	40013000 	.word	0x40013000
 8007f24:	50013000 	.word	0x50013000
 8007f28:	40003800 	.word	0x40003800
 8007f2c:	50003800 	.word	0x50003800
 8007f30:	40003c00 	.word	0x40003c00
 8007f34:	50003c00 	.word	0x50003c00
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d11b      	bne.n	8007f7e <HAL_SPI_TransmitReceive+0x396>
 8007f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d018      	beq.n	8007f7e <HAL_SPI_TransmitReceive+0x396>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3320      	adds	r3, #32
 8007f56:	7812      	ldrb	r2, [r2, #0]
 8007f58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d11d      	bne.n	8007fc8 <HAL_SPI_TransmitReceive+0x3e0>
 8007f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d01a      	beq.n	8007fc8 <HAL_SPI_TransmitReceive+0x3e0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9e:	7812      	ldrb	r2, [r2, #0]
 8007fa0:	b2d2      	uxtb	r2, r2
 8007fa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007fc6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fc8:	f7f9 fa4c 	bl	8001464 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d803      	bhi.n	8007fe0 <HAL_SPI_TransmitReceive+0x3f8>
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fde:	d102      	bne.n	8007fe6 <HAL_SPI_TransmitReceive+0x3fe>
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d114      	bne.n	8008010 <HAL_SPI_TransmitReceive+0x428>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f844 	bl	8008074 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ffa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e02c      	b.n	800806a <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008012:	2b00      	cmp	r3, #0
 8008014:	d190      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x350>
 8008016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008018:	2b00      	cmp	r3, #0
 800801a:	d18d      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x350>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	2200      	movs	r2, #0
 8008024:	2108      	movs	r1, #8
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f8c4 	bl	80081b4 <SPI_WaitOnFlagUntilTimeout>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <HAL_SPI_TransmitReceive+0x45a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f816 	bl	8008074 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <HAL_SPI_TransmitReceive+0x47e>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e001      	b.n	800806a <HAL_SPI_TransmitReceive+0x482>
  }
  return errorcode;
 8008066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800806a:	4618      	mov	r0, r3
 800806c:	3728      	adds	r7, #40	; 0x28
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop

08008074 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699a      	ldr	r2, [r3, #24]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0208 	orr.w	r2, r2, #8
 8008092:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0210 	orr.w	r2, r2, #16
 80080a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80080d6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d014      	beq.n	800810e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00f      	beq.n	800810e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	699a      	ldr	r2, [r3, #24]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f042 0220 	orr.w	r2, r2, #32
 800810c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d014      	beq.n	8008144 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00f      	beq.n	8008144 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812a:	f043 0204 	orr.w	r2, r3, #4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699a      	ldr	r2, [r3, #24]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008142:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00f      	beq.n	800816e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008154:	f043 0201 	orr.w	r2, r3, #1
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	699a      	ldr	r2, [r3, #24]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800816c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00f      	beq.n	8008198 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800817e:	f043 0208 	orr.w	r2, r3, #8
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008196:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 80081a8:	bf00      	nop
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	4613      	mov	r3, r2
 80081c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80081c4:	e010      	b.n	80081e8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c6:	f7f9 f94d 	bl	8001464 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d803      	bhi.n	80081de <SPI_WaitOnFlagUntilTimeout+0x2a>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081dc:	d102      	bne.n	80081e4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e00f      	b.n	8008208 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	4013      	ands	r3, r2
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	bf0c      	ite	eq
 80081f8:	2301      	moveq	r3, #1
 80081fa:	2300      	movne	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	461a      	mov	r2, r3
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	429a      	cmp	r2, r3
 8008204:	d0df      	beq.n	80081c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821c:	095b      	lsrs	r3, r3, #5
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	3307      	adds	r3, #7
 800822e:	08db      	lsrs	r3, r3, #3
 8008230:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	fb02 f303 	mul.w	r3, r2, r3
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e042      	b.n	80082de <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7f8 fe86 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2224      	movs	r2, #36	; 0x24
 8008274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0201 	bic.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f8cb 	bl	8008424 <UART_SetConfig>
 800828e:	4603      	mov	r3, r0
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e022      	b.n	80082de <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 faad 	bl	8008800 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f042 0201 	orr.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fb34 	bl	8008944 <UART_CheckIdleState>
 80082dc:	4603      	mov	r3, r0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b08a      	sub	sp, #40	; 0x28
 80082ea:	af02      	add	r7, sp, #8
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	f040 808b 	bne.w	8008418 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <HAL_UART_Transmit+0x28>
 8008308:	88fb      	ldrh	r3, [r7, #6]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e083      	b.n	800841a <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d107      	bne.n	8008330 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800832e:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2221      	movs	r2, #33	; 0x21
 800833c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008340:	f7f9 f890 	bl	8001464 <HAL_GetTick>
 8008344:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	88fa      	ldrh	r2, [r7, #6]
 800834a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	88fa      	ldrh	r2, [r7, #6]
 8008352:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835e:	d108      	bne.n	8008372 <HAL_UART_Transmit+0x8c>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d104      	bne.n	8008372 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008368:	2300      	movs	r3, #0
 800836a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61bb      	str	r3, [r7, #24]
 8008370:	e003      	b.n	800837a <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800837a:	e030      	b.n	80083de <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2200      	movs	r2, #0
 8008384:	2180      	movs	r1, #128	; 0x80
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fb86 	bl	8008a98 <UART_WaitOnFlagUntilTimeout>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e03d      	b.n	800841a <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	461a      	mov	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	3302      	adds	r3, #2
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	e007      	b.n	80083cc <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	3301      	adds	r3, #1
 80083ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1c8      	bne.n	800837c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2200      	movs	r2, #0
 80083f2:	2140      	movs	r1, #64	; 0x40
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fb4f 	bl	8008a98 <UART_WaitOnFlagUntilTimeout>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2220      	movs	r2, #32
 8008404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e006      	b.n	800841a <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2220      	movs	r2, #32
 8008410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	e000      	b.n	800841a <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008418:	2302      	movs	r3, #2
  }
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008428:	b094      	sub	sp, #80	; 0x50
 800842a:	af00      	add	r7, sp, #0
 800842c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	4b78      	ldr	r3, [pc, #480]	; (800861c <UART_SetConfig+0x1f8>)
 800843a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	431a      	orrs	r2, r3
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	431a      	orrs	r2, r3
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	4313      	orrs	r3, r2
 8008452:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4971      	ldr	r1, [pc, #452]	; (8008620 <UART_SetConfig+0x1fc>)
 800845c:	4019      	ands	r1, r3
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008464:	430b      	orrs	r3, r1
 8008466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	68d9      	ldr	r1, [r3, #12]
 8008476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	ea40 0301 	orr.w	r3, r0, r1
 800847e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	4b64      	ldr	r3, [pc, #400]	; (800861c <UART_SetConfig+0x1f8>)
 800848c:	429a      	cmp	r2, r3
 800848e:	d009      	beq.n	80084a4 <UART_SetConfig+0x80>
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	4b63      	ldr	r3, [pc, #396]	; (8008624 <UART_SetConfig+0x200>)
 8008496:	429a      	cmp	r2, r3
 8008498:	d004      	beq.n	80084a4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849c:	6a1a      	ldr	r2, [r3, #32]
 800849e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a0:	4313      	orrs	r3, r2
 80084a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80084ae:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b8:	430b      	orrs	r3, r1
 80084ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c2:	f023 000f 	bic.w	r0, r3, #15
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	ea40 0301 	orr.w	r3, r0, r1
 80084d2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	4b53      	ldr	r3, [pc, #332]	; (8008628 <UART_SetConfig+0x204>)
 80084da:	429a      	cmp	r2, r3
 80084dc:	d102      	bne.n	80084e4 <UART_SetConfig+0xc0>
 80084de:	2301      	movs	r3, #1
 80084e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084e2:	e066      	b.n	80085b2 <UART_SetConfig+0x18e>
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	4b50      	ldr	r3, [pc, #320]	; (800862c <UART_SetConfig+0x208>)
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d102      	bne.n	80084f4 <UART_SetConfig+0xd0>
 80084ee:	2302      	movs	r3, #2
 80084f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084f2:	e05e      	b.n	80085b2 <UART_SetConfig+0x18e>
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	4b4d      	ldr	r3, [pc, #308]	; (8008630 <UART_SetConfig+0x20c>)
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d102      	bne.n	8008504 <UART_SetConfig+0xe0>
 80084fe:	2304      	movs	r3, #4
 8008500:	64bb      	str	r3, [r7, #72]	; 0x48
 8008502:	e056      	b.n	80085b2 <UART_SetConfig+0x18e>
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	4b4a      	ldr	r3, [pc, #296]	; (8008634 <UART_SetConfig+0x210>)
 800850a:	429a      	cmp	r2, r3
 800850c:	d102      	bne.n	8008514 <UART_SetConfig+0xf0>
 800850e:	2308      	movs	r3, #8
 8008510:	64bb      	str	r3, [r7, #72]	; 0x48
 8008512:	e04e      	b.n	80085b2 <UART_SetConfig+0x18e>
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	4b47      	ldr	r3, [pc, #284]	; (8008638 <UART_SetConfig+0x214>)
 800851a:	429a      	cmp	r2, r3
 800851c:	d102      	bne.n	8008524 <UART_SetConfig+0x100>
 800851e:	2310      	movs	r3, #16
 8008520:	64bb      	str	r3, [r7, #72]	; 0x48
 8008522:	e046      	b.n	80085b2 <UART_SetConfig+0x18e>
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	4b44      	ldr	r3, [pc, #272]	; (800863c <UART_SetConfig+0x218>)
 800852a:	429a      	cmp	r2, r3
 800852c:	d102      	bne.n	8008534 <UART_SetConfig+0x110>
 800852e:	2320      	movs	r3, #32
 8008530:	64bb      	str	r3, [r7, #72]	; 0x48
 8008532:	e03e      	b.n	80085b2 <UART_SetConfig+0x18e>
 8008534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4b41      	ldr	r3, [pc, #260]	; (8008640 <UART_SetConfig+0x21c>)
 800853a:	429a      	cmp	r2, r3
 800853c:	d102      	bne.n	8008544 <UART_SetConfig+0x120>
 800853e:	2340      	movs	r3, #64	; 0x40
 8008540:	64bb      	str	r3, [r7, #72]	; 0x48
 8008542:	e036      	b.n	80085b2 <UART_SetConfig+0x18e>
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	4b3e      	ldr	r3, [pc, #248]	; (8008644 <UART_SetConfig+0x220>)
 800854a:	429a      	cmp	r2, r3
 800854c:	d102      	bne.n	8008554 <UART_SetConfig+0x130>
 800854e:	2380      	movs	r3, #128	; 0x80
 8008550:	64bb      	str	r3, [r7, #72]	; 0x48
 8008552:	e02e      	b.n	80085b2 <UART_SetConfig+0x18e>
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	4b3b      	ldr	r3, [pc, #236]	; (8008648 <UART_SetConfig+0x224>)
 800855a:	429a      	cmp	r2, r3
 800855c:	d103      	bne.n	8008566 <UART_SetConfig+0x142>
 800855e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008562:	64bb      	str	r3, [r7, #72]	; 0x48
 8008564:	e025      	b.n	80085b2 <UART_SetConfig+0x18e>
 8008566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	4b38      	ldr	r3, [pc, #224]	; (800864c <UART_SetConfig+0x228>)
 800856c:	429a      	cmp	r2, r3
 800856e:	d103      	bne.n	8008578 <UART_SetConfig+0x154>
 8008570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008574:	64bb      	str	r3, [r7, #72]	; 0x48
 8008576:	e01c      	b.n	80085b2 <UART_SetConfig+0x18e>
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	4b34      	ldr	r3, [pc, #208]	; (8008650 <UART_SetConfig+0x22c>)
 800857e:	429a      	cmp	r2, r3
 8008580:	d103      	bne.n	800858a <UART_SetConfig+0x166>
 8008582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008586:	64bb      	str	r3, [r7, #72]	; 0x48
 8008588:	e013      	b.n	80085b2 <UART_SetConfig+0x18e>
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4b31      	ldr	r3, [pc, #196]	; (8008654 <UART_SetConfig+0x230>)
 8008590:	429a      	cmp	r2, r3
 8008592:	d103      	bne.n	800859c <UART_SetConfig+0x178>
 8008594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008598:	64bb      	str	r3, [r7, #72]	; 0x48
 800859a:	e00a      	b.n	80085b2 <UART_SetConfig+0x18e>
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b1e      	ldr	r3, [pc, #120]	; (800861c <UART_SetConfig+0x1f8>)
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d103      	bne.n	80085ae <UART_SetConfig+0x18a>
 80085a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ac:	e001      	b.n	80085b2 <UART_SetConfig+0x18e>
 80085ae:	2300      	movs	r3, #0
 80085b0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b19      	ldr	r3, [pc, #100]	; (800861c <UART_SetConfig+0x1f8>)
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d005      	beq.n	80085c8 <UART_SetConfig+0x1a4>
 80085bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	4b18      	ldr	r3, [pc, #96]	; (8008624 <UART_SetConfig+0x200>)
 80085c2:	429a      	cmp	r2, r3
 80085c4:	f040 8094 	bne.w	80086f0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80085c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ca:	2200      	movs	r2, #0
 80085cc:	623b      	str	r3, [r7, #32]
 80085ce:	627a      	str	r2, [r7, #36]	; 0x24
 80085d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80085d4:	f7fc fd0e 	bl	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 80085d8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80085da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80f7 	beq.w	80087d0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	4a1c      	ldr	r2, [pc, #112]	; (8008658 <UART_SetConfig+0x234>)
 80085e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ec:	461a      	mov	r2, r3
 80085ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	4413      	add	r3, r2
 8008600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008602:	429a      	cmp	r2, r3
 8008604:	d305      	bcc.n	8008612 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800860c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800860e:	429a      	cmp	r2, r3
 8008610:	d924      	bls.n	800865c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008618:	e069      	b.n	80086ee <UART_SetConfig+0x2ca>
 800861a:	bf00      	nop
 800861c:	44002400 	.word	0x44002400
 8008620:	cfff69f3 	.word	0xcfff69f3
 8008624:	54002400 	.word	0x54002400
 8008628:	40013800 	.word	0x40013800
 800862c:	40004400 	.word	0x40004400
 8008630:	40004800 	.word	0x40004800
 8008634:	40004c00 	.word	0x40004c00
 8008638:	40005000 	.word	0x40005000
 800863c:	40006400 	.word	0x40006400
 8008640:	40007800 	.word	0x40007800
 8008644:	40007c00 	.word	0x40007c00
 8008648:	40008000 	.word	0x40008000
 800864c:	40006800 	.word	0x40006800
 8008650:	40006c00 	.word	0x40006c00
 8008654:	40008400 	.word	0x40008400
 8008658:	08009f38 	.word	0x08009f38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800865c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865e:	2200      	movs	r2, #0
 8008660:	61bb      	str	r3, [r7, #24]
 8008662:	61fa      	str	r2, [r7, #28]
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	4a64      	ldr	r2, [pc, #400]	; (80087fc <UART_SetConfig+0x3d8>)
 800866a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800866e:	b29b      	uxth	r3, r3
 8008670:	2200      	movs	r2, #0
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	617a      	str	r2, [r7, #20]
 8008676:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800867a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800867e:	f7f7 fe05 	bl	800028c <__aeabi_uldivmod>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4610      	mov	r0, r2
 8008688:	4619      	mov	r1, r3
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	020b      	lsls	r3, r1, #8
 8008694:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008698:	0202      	lsls	r2, r0, #8
 800869a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800869c:	6849      	ldr	r1, [r1, #4]
 800869e:	0849      	lsrs	r1, r1, #1
 80086a0:	2000      	movs	r0, #0
 80086a2:	460c      	mov	r4, r1
 80086a4:	4605      	mov	r5, r0
 80086a6:	eb12 0804 	adds.w	r8, r2, r4
 80086aa:	eb43 0905 	adc.w	r9, r3, r5
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	60bb      	str	r3, [r7, #8]
 80086b6:	60fa      	str	r2, [r7, #12]
 80086b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086bc:	4640      	mov	r0, r8
 80086be:	4649      	mov	r1, r9
 80086c0:	f7f7 fde4 	bl	800028c <__aeabi_uldivmod>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4613      	mov	r3, r2
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086d2:	d308      	bcc.n	80086e6 <UART_SetConfig+0x2c2>
 80086d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086da:	d204      	bcs.n	80086e6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80086dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086e2:	60da      	str	r2, [r3, #12]
 80086e4:	e003      	b.n	80086ee <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80086ec:	e070      	b.n	80087d0 <UART_SetConfig+0x3ac>
 80086ee:	e06f      	b.n	80087d0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086f8:	d13c      	bne.n	8008774 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80086fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fc:	2200      	movs	r2, #0
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	607a      	str	r2, [r7, #4]
 8008702:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008706:	f7fc fc75 	bl	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 800870a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800870c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d05e      	beq.n	80087d0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	4a39      	ldr	r2, [pc, #228]	; (80087fc <UART_SetConfig+0x3d8>)
 8008718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800871c:	461a      	mov	r2, r3
 800871e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008720:	fbb3 f3f2 	udiv	r3, r3, r2
 8008724:	005a      	lsls	r2, r3, #1
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	085b      	lsrs	r3, r3, #1
 800872c:	441a      	add	r2, r3
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	fbb2 f3f3 	udiv	r3, r2, r3
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873a:	2b0f      	cmp	r3, #15
 800873c:	d916      	bls.n	800876c <UART_SetConfig+0x348>
 800873e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008744:	d212      	bcs.n	800876c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008748:	b29b      	uxth	r3, r3
 800874a:	f023 030f 	bic.w	r3, r3, #15
 800874e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008752:	085b      	lsrs	r3, r3, #1
 8008754:	b29b      	uxth	r3, r3
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	b29a      	uxth	r2, r3
 800875c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800875e:	4313      	orrs	r3, r2
 8008760:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008768:	60da      	str	r2, [r3, #12]
 800876a:	e031      	b.n	80087d0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008772:	e02d      	b.n	80087d0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008776:	2200      	movs	r2, #0
 8008778:	469a      	mov	sl, r3
 800877a:	4693      	mov	fp, r2
 800877c:	4650      	mov	r0, sl
 800877e:	4659      	mov	r1, fp
 8008780:	f7fc fc38 	bl	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008784:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d021      	beq.n	80087d0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	4a1a      	ldr	r2, [pc, #104]	; (80087fc <UART_SetConfig+0x3d8>)
 8008792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008796:	461a      	mov	r2, r3
 8008798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879a:	fbb3 f2f2 	udiv	r2, r3, r2
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	441a      	add	r2, r3
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b2:	2b0f      	cmp	r3, #15
 80087b4:	d909      	bls.n	80087ca <UART_SetConfig+0x3a6>
 80087b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087bc:	d205      	bcs.n	80087ca <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60da      	str	r2, [r3, #12]
 80087c8:	e002      	b.n	80087d0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d2:	2201      	movs	r2, #1
 80087d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	2201      	movs	r2, #1
 80087dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	2200      	movs	r2, #0
 80087e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	2200      	movs	r2, #0
 80087ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80087ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3750      	adds	r7, #80	; 0x50
 80087f4:	46bd      	mov	sp, r7
 80087f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087fa:	bf00      	nop
 80087fc:	08009f38 	.word	0x08009f38

08008800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00a      	beq.n	800882a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00a      	beq.n	800884c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00a      	beq.n	800886e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008894:	f003 0310 	and.w	r3, r3, #16
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01a      	beq.n	8008916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088fe:	d10a      	bne.n	8008916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	605a      	str	r2, [r3, #4]
  }
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b098      	sub	sp, #96	; 0x60
 8008948:	af02      	add	r7, sp, #8
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008954:	f7f8 fd86 	bl	8001464 <HAL_GetTick>
 8008958:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0308 	and.w	r3, r3, #8
 8008964:	2b08      	cmp	r3, #8
 8008966:	d12f      	bne.n	80089c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008970:	2200      	movs	r2, #0
 8008972:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f88e 	bl	8008a98 <UART_WaitOnFlagUntilTimeout>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d022      	beq.n	80089c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008996:	653b      	str	r3, [r7, #80]	; 0x50
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	461a      	mov	r2, r3
 800899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a0:	647b      	str	r3, [r7, #68]	; 0x44
 80089a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e6      	bne.n	8008982 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e063      	b.n	8008a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d149      	bne.n	8008a6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089de:	2200      	movs	r2, #0
 80089e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f857 	bl	8008a98 <UART_WaitOnFlagUntilTimeout>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d03c      	beq.n	8008a6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	623b      	str	r3, [r7, #32]
   return(result);
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e6      	bne.n	80089f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3308      	adds	r3, #8
 8008a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a42:	61fa      	str	r2, [r7, #28]
 8008a44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	69b9      	ldr	r1, [r7, #24]
 8008a48:	69fa      	ldr	r2, [r7, #28]
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e012      	b.n	8008a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3758      	adds	r7, #88	; 0x58
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa8:	e049      	b.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d045      	beq.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab2:	f7f8 fcd7 	bl	8001464 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d302      	bcc.n	8008ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e048      	b.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d031      	beq.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d110      	bne.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2208      	movs	r2, #8
 8008aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 f838 	bl	8008b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2208      	movs	r2, #8
 8008afa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e029      	b.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b18:	d111      	bne.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f81e 	bl	8008b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e00f      	b.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69da      	ldr	r2, [r3, #28]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4013      	ands	r3, r2
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	bf0c      	ite	eq
 8008b4e:	2301      	moveq	r3, #1
 8008b50:	2300      	movne	r3, #0
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d0a6      	beq.n	8008aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b095      	sub	sp, #84	; 0x54
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b76:	e853 3f00 	ldrex	r3, [r3]
 8008b7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b94:	e841 2300 	strex	r3, r2, [r1]
 8008b98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e6      	bne.n	8008b6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bb6:	f023 0301 	bic.w	r3, r3, #1
 8008bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3308      	adds	r3, #8
 8008bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e3      	bne.n	8008ba0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d118      	bne.n	8008c12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	e853 3f00 	ldrex	r3, [r3]
 8008bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f023 0310 	bic.w	r3, r3, #16
 8008bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bfe:	61bb      	str	r3, [r7, #24]
 8008c00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c02:	6979      	ldr	r1, [r7, #20]
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e6      	bne.n	8008be0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c26:	bf00      	nop
 8008c28:	3754      	adds	r7, #84	; 0x54
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c44:	2302      	movs	r3, #2
 8008c46:	e027      	b.n	8008c98 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2224      	movs	r2, #36	; 0x24
 8008c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0201 	bic.w	r2, r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e02d      	b.n	8008d18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2224      	movs	r2, #36	; 0x24
 8008cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f84f 	bl	8008d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d101      	bne.n	8008d38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d34:	2302      	movs	r3, #2
 8008d36:	e02d      	b.n	8008d94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2224      	movs	r2, #36	; 0x24
 8008d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0201 	bic.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f811 	bl	8008d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d108      	bne.n	8008dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dbc:	e031      	b.n	8008e22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dc2:	2308      	movs	r3, #8
 8008dc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	0e5b      	lsrs	r3, r3, #25
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0307 	and.w	r3, r3, #7
 8008dd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	0f5b      	lsrs	r3, r3, #29
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	7b3a      	ldrb	r2, [r7, #12]
 8008dea:	4911      	ldr	r1, [pc, #68]	; (8008e30 <UARTEx_SetNbDataToProcess+0x94>)
 8008dec:	5c8a      	ldrb	r2, [r1, r2]
 8008dee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008df2:	7b3a      	ldrb	r2, [r7, #12]
 8008df4:	490f      	ldr	r1, [pc, #60]	; (8008e34 <UARTEx_SetNbDataToProcess+0x98>)
 8008df6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	7b7a      	ldrb	r2, [r7, #13]
 8008e08:	4909      	ldr	r1, [pc, #36]	; (8008e30 <UARTEx_SetNbDataToProcess+0x94>)
 8008e0a:	5c8a      	ldrb	r2, [r1, r2]
 8008e0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e10:	7b7a      	ldrb	r2, [r7, #13]
 8008e12:	4908      	ldr	r1, [pc, #32]	; (8008e34 <UARTEx_SetNbDataToProcess+0x98>)
 8008e14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	08009f50 	.word	0x08009f50
 8008e34:	08009f58 	.word	0x08009f58

08008e38 <__errno>:
 8008e38:	4b01      	ldr	r3, [pc, #4]	; (8008e40 <__errno+0x8>)
 8008e3a:	6818      	ldr	r0, [r3, #0]
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	2000000c 	.word	0x2000000c

08008e44 <__libc_init_array>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	4d0d      	ldr	r5, [pc, #52]	; (8008e7c <__libc_init_array+0x38>)
 8008e48:	2600      	movs	r6, #0
 8008e4a:	4c0d      	ldr	r4, [pc, #52]	; (8008e80 <__libc_init_array+0x3c>)
 8008e4c:	1b64      	subs	r4, r4, r5
 8008e4e:	10a4      	asrs	r4, r4, #2
 8008e50:	42a6      	cmp	r6, r4
 8008e52:	d109      	bne.n	8008e68 <__libc_init_array+0x24>
 8008e54:	4d0b      	ldr	r5, [pc, #44]	; (8008e84 <__libc_init_array+0x40>)
 8008e56:	2600      	movs	r6, #0
 8008e58:	4c0b      	ldr	r4, [pc, #44]	; (8008e88 <__libc_init_array+0x44>)
 8008e5a:	f001 f831 	bl	8009ec0 <_init>
 8008e5e:	1b64      	subs	r4, r4, r5
 8008e60:	10a4      	asrs	r4, r4, #2
 8008e62:	42a6      	cmp	r6, r4
 8008e64:	d105      	bne.n	8008e72 <__libc_init_array+0x2e>
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6c:	3601      	adds	r6, #1
 8008e6e:	4798      	blx	r3
 8008e70:	e7ee      	b.n	8008e50 <__libc_init_array+0xc>
 8008e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e76:	3601      	adds	r6, #1
 8008e78:	4798      	blx	r3
 8008e7a:	e7f2      	b.n	8008e62 <__libc_init_array+0x1e>
 8008e7c:	0800a000 	.word	0x0800a000
 8008e80:	0800a000 	.word	0x0800a000
 8008e84:	0800a000 	.word	0x0800a000
 8008e88:	0800a004 	.word	0x0800a004

08008e8c <memset>:
 8008e8c:	4402      	add	r2, r0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d100      	bne.n	8008e96 <memset+0xa>
 8008e94:	4770      	bx	lr
 8008e96:	f803 1b01 	strb.w	r1, [r3], #1
 8008e9a:	e7f9      	b.n	8008e90 <memset+0x4>

08008e9c <iprintf>:
 8008e9c:	b40f      	push	{r0, r1, r2, r3}
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <iprintf+0x2c>)
 8008ea0:	b513      	push	{r0, r1, r4, lr}
 8008ea2:	681c      	ldr	r4, [r3, #0]
 8008ea4:	b124      	cbz	r4, 8008eb0 <iprintf+0x14>
 8008ea6:	69a3      	ldr	r3, [r4, #24]
 8008ea8:	b913      	cbnz	r3, 8008eb0 <iprintf+0x14>
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 fa5c 	bl	8009368 <__sinit>
 8008eb0:	ab05      	add	r3, sp, #20
 8008eb2:	9a04      	ldr	r2, [sp, #16]
 8008eb4:	68a1      	ldr	r1, [r4, #8]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	f000 fc65 	bl	8009788 <_vfiprintf_r>
 8008ebe:	b002      	add	sp, #8
 8008ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec4:	b004      	add	sp, #16
 8008ec6:	4770      	bx	lr
 8008ec8:	2000000c 	.word	0x2000000c

08008ecc <_puts_r>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	460e      	mov	r6, r1
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	b118      	cbz	r0, 8008edc <_puts_r+0x10>
 8008ed4:	6983      	ldr	r3, [r0, #24]
 8008ed6:	b90b      	cbnz	r3, 8008edc <_puts_r+0x10>
 8008ed8:	f000 fa46 	bl	8009368 <__sinit>
 8008edc:	69ab      	ldr	r3, [r5, #24]
 8008ede:	68ac      	ldr	r4, [r5, #8]
 8008ee0:	b913      	cbnz	r3, 8008ee8 <_puts_r+0x1c>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 fa40 	bl	8009368 <__sinit>
 8008ee8:	4b2c      	ldr	r3, [pc, #176]	; (8008f9c <_puts_r+0xd0>)
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d120      	bne.n	8008f30 <_puts_r+0x64>
 8008eee:	686c      	ldr	r4, [r5, #4]
 8008ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ef2:	07db      	lsls	r3, r3, #31
 8008ef4:	d405      	bmi.n	8008f02 <_puts_r+0x36>
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	0598      	lsls	r0, r3, #22
 8008efa:	d402      	bmi.n	8008f02 <_puts_r+0x36>
 8008efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efe:	f000 fad1 	bl	80094a4 <__retarget_lock_acquire_recursive>
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	0719      	lsls	r1, r3, #28
 8008f06:	d51d      	bpl.n	8008f44 <_puts_r+0x78>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	b1db      	cbz	r3, 8008f44 <_puts_r+0x78>
 8008f0c:	3e01      	subs	r6, #1
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f14:	3b01      	subs	r3, #1
 8008f16:	60a3      	str	r3, [r4, #8]
 8008f18:	bb39      	cbnz	r1, 8008f6a <_puts_r+0x9e>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	da38      	bge.n	8008f90 <_puts_r+0xc4>
 8008f1e:	4622      	mov	r2, r4
 8008f20:	210a      	movs	r1, #10
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 f848 	bl	8008fb8 <__swbuf_r>
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d011      	beq.n	8008f50 <_puts_r+0x84>
 8008f2c:	250a      	movs	r5, #10
 8008f2e:	e011      	b.n	8008f54 <_puts_r+0x88>
 8008f30:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <_puts_r+0xd4>)
 8008f32:	429c      	cmp	r4, r3
 8008f34:	d101      	bne.n	8008f3a <_puts_r+0x6e>
 8008f36:	68ac      	ldr	r4, [r5, #8]
 8008f38:	e7da      	b.n	8008ef0 <_puts_r+0x24>
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <_puts_r+0xd8>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	bf08      	it	eq
 8008f40:	68ec      	ldreq	r4, [r5, #12]
 8008f42:	e7d5      	b.n	8008ef0 <_puts_r+0x24>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4628      	mov	r0, r5
 8008f48:	f000 f888 	bl	800905c <__swsetup_r>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d0dd      	beq.n	8008f0c <_puts_r+0x40>
 8008f50:	f04f 35ff 	mov.w	r5, #4294967295
 8008f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f56:	07da      	lsls	r2, r3, #31
 8008f58:	d405      	bmi.n	8008f66 <_puts_r+0x9a>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	059b      	lsls	r3, r3, #22
 8008f5e:	d402      	bmi.n	8008f66 <_puts_r+0x9a>
 8008f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f62:	f000 faa0 	bl	80094a6 <__retarget_lock_release_recursive>
 8008f66:	4628      	mov	r0, r5
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da04      	bge.n	8008f78 <_puts_r+0xac>
 8008f6e:	69a2      	ldr	r2, [r4, #24]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	dc06      	bgt.n	8008f82 <_puts_r+0xb6>
 8008f74:	290a      	cmp	r1, #10
 8008f76:	d004      	beq.n	8008f82 <_puts_r+0xb6>
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	1c5a      	adds	r2, r3, #1
 8008f7c:	6022      	str	r2, [r4, #0]
 8008f7e:	7019      	strb	r1, [r3, #0]
 8008f80:	e7c5      	b.n	8008f0e <_puts_r+0x42>
 8008f82:	4622      	mov	r2, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 f817 	bl	8008fb8 <__swbuf_r>
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d1bf      	bne.n	8008f0e <_puts_r+0x42>
 8008f8e:	e7df      	b.n	8008f50 <_puts_r+0x84>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	250a      	movs	r5, #10
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	6022      	str	r2, [r4, #0]
 8008f98:	701d      	strb	r5, [r3, #0]
 8008f9a:	e7db      	b.n	8008f54 <_puts_r+0x88>
 8008f9c:	08009f84 	.word	0x08009f84
 8008fa0:	08009fa4 	.word	0x08009fa4
 8008fa4:	08009f64 	.word	0x08009f64

08008fa8 <puts>:
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <puts+0xc>)
 8008faa:	4601      	mov	r1, r0
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	f7ff bf8d 	b.w	8008ecc <_puts_r>
 8008fb2:	bf00      	nop
 8008fb4:	2000000c 	.word	0x2000000c

08008fb8 <__swbuf_r>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	460e      	mov	r6, r1
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	b118      	cbz	r0, 8008fca <__swbuf_r+0x12>
 8008fc2:	6983      	ldr	r3, [r0, #24]
 8008fc4:	b90b      	cbnz	r3, 8008fca <__swbuf_r+0x12>
 8008fc6:	f000 f9cf 	bl	8009368 <__sinit>
 8008fca:	4b21      	ldr	r3, [pc, #132]	; (8009050 <__swbuf_r+0x98>)
 8008fcc:	429c      	cmp	r4, r3
 8008fce:	d12b      	bne.n	8009028 <__swbuf_r+0x70>
 8008fd0:	686c      	ldr	r4, [r5, #4]
 8008fd2:	69a3      	ldr	r3, [r4, #24]
 8008fd4:	60a3      	str	r3, [r4, #8]
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	071a      	lsls	r2, r3, #28
 8008fda:	d52f      	bpl.n	800903c <__swbuf_r+0x84>
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	b36b      	cbz	r3, 800903c <__swbuf_r+0x84>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	b2f6      	uxtb	r6, r6
 8008fe4:	6820      	ldr	r0, [r4, #0]
 8008fe6:	4637      	mov	r7, r6
 8008fe8:	1ac0      	subs	r0, r0, r3
 8008fea:	6963      	ldr	r3, [r4, #20]
 8008fec:	4283      	cmp	r3, r0
 8008fee:	dc04      	bgt.n	8008ffa <__swbuf_r+0x42>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f000 f924 	bl	8009240 <_fflush_r>
 8008ff8:	bb30      	cbnz	r0, 8009048 <__swbuf_r+0x90>
 8008ffa:	68a3      	ldr	r3, [r4, #8]
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	3b01      	subs	r3, #1
 8009000:	60a3      	str	r3, [r4, #8]
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	6022      	str	r2, [r4, #0]
 8009008:	701e      	strb	r6, [r3, #0]
 800900a:	6963      	ldr	r3, [r4, #20]
 800900c:	4283      	cmp	r3, r0
 800900e:	d004      	beq.n	800901a <__swbuf_r+0x62>
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	07db      	lsls	r3, r3, #31
 8009014:	d506      	bpl.n	8009024 <__swbuf_r+0x6c>
 8009016:	2e0a      	cmp	r6, #10
 8009018:	d104      	bne.n	8009024 <__swbuf_r+0x6c>
 800901a:	4621      	mov	r1, r4
 800901c:	4628      	mov	r0, r5
 800901e:	f000 f90f 	bl	8009240 <_fflush_r>
 8009022:	b988      	cbnz	r0, 8009048 <__swbuf_r+0x90>
 8009024:	4638      	mov	r0, r7
 8009026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009028:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <__swbuf_r+0x9c>)
 800902a:	429c      	cmp	r4, r3
 800902c:	d101      	bne.n	8009032 <__swbuf_r+0x7a>
 800902e:	68ac      	ldr	r4, [r5, #8]
 8009030:	e7cf      	b.n	8008fd2 <__swbuf_r+0x1a>
 8009032:	4b09      	ldr	r3, [pc, #36]	; (8009058 <__swbuf_r+0xa0>)
 8009034:	429c      	cmp	r4, r3
 8009036:	bf08      	it	eq
 8009038:	68ec      	ldreq	r4, [r5, #12]
 800903a:	e7ca      	b.n	8008fd2 <__swbuf_r+0x1a>
 800903c:	4621      	mov	r1, r4
 800903e:	4628      	mov	r0, r5
 8009040:	f000 f80c 	bl	800905c <__swsetup_r>
 8009044:	2800      	cmp	r0, #0
 8009046:	d0cb      	beq.n	8008fe0 <__swbuf_r+0x28>
 8009048:	f04f 37ff 	mov.w	r7, #4294967295
 800904c:	e7ea      	b.n	8009024 <__swbuf_r+0x6c>
 800904e:	bf00      	nop
 8009050:	08009f84 	.word	0x08009f84
 8009054:	08009fa4 	.word	0x08009fa4
 8009058:	08009f64 	.word	0x08009f64

0800905c <__swsetup_r>:
 800905c:	4b32      	ldr	r3, [pc, #200]	; (8009128 <__swsetup_r+0xcc>)
 800905e:	b570      	push	{r4, r5, r6, lr}
 8009060:	681d      	ldr	r5, [r3, #0]
 8009062:	4606      	mov	r6, r0
 8009064:	460c      	mov	r4, r1
 8009066:	b125      	cbz	r5, 8009072 <__swsetup_r+0x16>
 8009068:	69ab      	ldr	r3, [r5, #24]
 800906a:	b913      	cbnz	r3, 8009072 <__swsetup_r+0x16>
 800906c:	4628      	mov	r0, r5
 800906e:	f000 f97b 	bl	8009368 <__sinit>
 8009072:	4b2e      	ldr	r3, [pc, #184]	; (800912c <__swsetup_r+0xd0>)
 8009074:	429c      	cmp	r4, r3
 8009076:	d10f      	bne.n	8009098 <__swsetup_r+0x3c>
 8009078:	686c      	ldr	r4, [r5, #4]
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009080:	0719      	lsls	r1, r3, #28
 8009082:	d42c      	bmi.n	80090de <__swsetup_r+0x82>
 8009084:	06dd      	lsls	r5, r3, #27
 8009086:	d411      	bmi.n	80090ac <__swsetup_r+0x50>
 8009088:	2309      	movs	r3, #9
 800908a:	6033      	str	r3, [r6, #0]
 800908c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009090:	f04f 30ff 	mov.w	r0, #4294967295
 8009094:	81a3      	strh	r3, [r4, #12]
 8009096:	e03e      	b.n	8009116 <__swsetup_r+0xba>
 8009098:	4b25      	ldr	r3, [pc, #148]	; (8009130 <__swsetup_r+0xd4>)
 800909a:	429c      	cmp	r4, r3
 800909c:	d101      	bne.n	80090a2 <__swsetup_r+0x46>
 800909e:	68ac      	ldr	r4, [r5, #8]
 80090a0:	e7eb      	b.n	800907a <__swsetup_r+0x1e>
 80090a2:	4b24      	ldr	r3, [pc, #144]	; (8009134 <__swsetup_r+0xd8>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	bf08      	it	eq
 80090a8:	68ec      	ldreq	r4, [r5, #12]
 80090aa:	e7e6      	b.n	800907a <__swsetup_r+0x1e>
 80090ac:	0758      	lsls	r0, r3, #29
 80090ae:	d512      	bpl.n	80090d6 <__swsetup_r+0x7a>
 80090b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090b2:	b141      	cbz	r1, 80090c6 <__swsetup_r+0x6a>
 80090b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090b8:	4299      	cmp	r1, r3
 80090ba:	d002      	beq.n	80090c2 <__swsetup_r+0x66>
 80090bc:	4630      	mov	r0, r6
 80090be:	f000 fa59 	bl	8009574 <_free_r>
 80090c2:	2300      	movs	r3, #0
 80090c4:	6363      	str	r3, [r4, #52]	; 0x34
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090cc:	81a3      	strh	r3, [r4, #12]
 80090ce:	2300      	movs	r3, #0
 80090d0:	6063      	str	r3, [r4, #4]
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f043 0308 	orr.w	r3, r3, #8
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	6923      	ldr	r3, [r4, #16]
 80090e0:	b94b      	cbnz	r3, 80090f6 <__swsetup_r+0x9a>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ec:	d003      	beq.n	80090f6 <__swsetup_r+0x9a>
 80090ee:	4621      	mov	r1, r4
 80090f0:	4630      	mov	r0, r6
 80090f2:	f000 f9ff 	bl	80094f4 <__smakebuf_r>
 80090f6:	89a0      	ldrh	r0, [r4, #12]
 80090f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090fc:	f010 0301 	ands.w	r3, r0, #1
 8009100:	d00a      	beq.n	8009118 <__swsetup_r+0xbc>
 8009102:	2300      	movs	r3, #0
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	6963      	ldr	r3, [r4, #20]
 8009108:	425b      	negs	r3, r3
 800910a:	61a3      	str	r3, [r4, #24]
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	b943      	cbnz	r3, 8009122 <__swsetup_r+0xc6>
 8009110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009114:	d1ba      	bne.n	800908c <__swsetup_r+0x30>
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	0781      	lsls	r1, r0, #30
 800911a:	bf58      	it	pl
 800911c:	6963      	ldrpl	r3, [r4, #20]
 800911e:	60a3      	str	r3, [r4, #8]
 8009120:	e7f4      	b.n	800910c <__swsetup_r+0xb0>
 8009122:	2000      	movs	r0, #0
 8009124:	e7f7      	b.n	8009116 <__swsetup_r+0xba>
 8009126:	bf00      	nop
 8009128:	2000000c 	.word	0x2000000c
 800912c:	08009f84 	.word	0x08009f84
 8009130:	08009fa4 	.word	0x08009fa4
 8009134:	08009f64 	.word	0x08009f64

08009138 <__sflush_r>:
 8009138:	898a      	ldrh	r2, [r1, #12]
 800913a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913e:	4605      	mov	r5, r0
 8009140:	0710      	lsls	r0, r2, #28
 8009142:	460c      	mov	r4, r1
 8009144:	d458      	bmi.n	80091f8 <__sflush_r+0xc0>
 8009146:	684b      	ldr	r3, [r1, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	dc05      	bgt.n	8009158 <__sflush_r+0x20>
 800914c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	dc02      	bgt.n	8009158 <__sflush_r+0x20>
 8009152:	2000      	movs	r0, #0
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800915a:	2e00      	cmp	r6, #0
 800915c:	d0f9      	beq.n	8009152 <__sflush_r+0x1a>
 800915e:	2300      	movs	r3, #0
 8009160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009164:	682f      	ldr	r7, [r5, #0]
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	d032      	beq.n	80091d0 <__sflush_r+0x98>
 800916a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	075a      	lsls	r2, r3, #29
 8009170:	d505      	bpl.n	800917e <__sflush_r+0x46>
 8009172:	6863      	ldr	r3, [r4, #4]
 8009174:	1ac0      	subs	r0, r0, r3
 8009176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009178:	b10b      	cbz	r3, 800917e <__sflush_r+0x46>
 800917a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800917c:	1ac0      	subs	r0, r0, r3
 800917e:	2300      	movs	r3, #0
 8009180:	4602      	mov	r2, r0
 8009182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009184:	4628      	mov	r0, r5
 8009186:	6a21      	ldr	r1, [r4, #32]
 8009188:	47b0      	blx	r6
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	d106      	bne.n	800919e <__sflush_r+0x66>
 8009190:	6829      	ldr	r1, [r5, #0]
 8009192:	291d      	cmp	r1, #29
 8009194:	d82c      	bhi.n	80091f0 <__sflush_r+0xb8>
 8009196:	4a29      	ldr	r2, [pc, #164]	; (800923c <__sflush_r+0x104>)
 8009198:	40ca      	lsrs	r2, r1
 800919a:	07d6      	lsls	r6, r2, #31
 800919c:	d528      	bpl.n	80091f0 <__sflush_r+0xb8>
 800919e:	2200      	movs	r2, #0
 80091a0:	04d9      	lsls	r1, r3, #19
 80091a2:	6062      	str	r2, [r4, #4]
 80091a4:	6922      	ldr	r2, [r4, #16]
 80091a6:	6022      	str	r2, [r4, #0]
 80091a8:	d504      	bpl.n	80091b4 <__sflush_r+0x7c>
 80091aa:	1c42      	adds	r2, r0, #1
 80091ac:	d101      	bne.n	80091b2 <__sflush_r+0x7a>
 80091ae:	682b      	ldr	r3, [r5, #0]
 80091b0:	b903      	cbnz	r3, 80091b4 <__sflush_r+0x7c>
 80091b2:	6560      	str	r0, [r4, #84]	; 0x54
 80091b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091b6:	602f      	str	r7, [r5, #0]
 80091b8:	2900      	cmp	r1, #0
 80091ba:	d0ca      	beq.n	8009152 <__sflush_r+0x1a>
 80091bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c0:	4299      	cmp	r1, r3
 80091c2:	d002      	beq.n	80091ca <__sflush_r+0x92>
 80091c4:	4628      	mov	r0, r5
 80091c6:	f000 f9d5 	bl	8009574 <_free_r>
 80091ca:	2000      	movs	r0, #0
 80091cc:	6360      	str	r0, [r4, #52]	; 0x34
 80091ce:	e7c1      	b.n	8009154 <__sflush_r+0x1c>
 80091d0:	6a21      	ldr	r1, [r4, #32]
 80091d2:	2301      	movs	r3, #1
 80091d4:	4628      	mov	r0, r5
 80091d6:	47b0      	blx	r6
 80091d8:	1c41      	adds	r1, r0, #1
 80091da:	d1c7      	bne.n	800916c <__sflush_r+0x34>
 80091dc:	682b      	ldr	r3, [r5, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0c4      	beq.n	800916c <__sflush_r+0x34>
 80091e2:	2b1d      	cmp	r3, #29
 80091e4:	d001      	beq.n	80091ea <__sflush_r+0xb2>
 80091e6:	2b16      	cmp	r3, #22
 80091e8:	d101      	bne.n	80091ee <__sflush_r+0xb6>
 80091ea:	602f      	str	r7, [r5, #0]
 80091ec:	e7b1      	b.n	8009152 <__sflush_r+0x1a>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	e7ad      	b.n	8009154 <__sflush_r+0x1c>
 80091f8:	690f      	ldr	r7, [r1, #16]
 80091fa:	2f00      	cmp	r7, #0
 80091fc:	d0a9      	beq.n	8009152 <__sflush_r+0x1a>
 80091fe:	0793      	lsls	r3, r2, #30
 8009200:	680e      	ldr	r6, [r1, #0]
 8009202:	600f      	str	r7, [r1, #0]
 8009204:	bf0c      	ite	eq
 8009206:	694b      	ldreq	r3, [r1, #20]
 8009208:	2300      	movne	r3, #0
 800920a:	eba6 0807 	sub.w	r8, r6, r7
 800920e:	608b      	str	r3, [r1, #8]
 8009210:	f1b8 0f00 	cmp.w	r8, #0
 8009214:	dd9d      	ble.n	8009152 <__sflush_r+0x1a>
 8009216:	4643      	mov	r3, r8
 8009218:	463a      	mov	r2, r7
 800921a:	6a21      	ldr	r1, [r4, #32]
 800921c:	4628      	mov	r0, r5
 800921e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009220:	47b0      	blx	r6
 8009222:	2800      	cmp	r0, #0
 8009224:	dc06      	bgt.n	8009234 <__sflush_r+0xfc>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	f04f 30ff 	mov.w	r0, #4294967295
 800922c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	e78f      	b.n	8009154 <__sflush_r+0x1c>
 8009234:	4407      	add	r7, r0
 8009236:	eba8 0800 	sub.w	r8, r8, r0
 800923a:	e7e9      	b.n	8009210 <__sflush_r+0xd8>
 800923c:	20400001 	.word	0x20400001

08009240 <_fflush_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	690b      	ldr	r3, [r1, #16]
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b913      	cbnz	r3, 8009250 <_fflush_r+0x10>
 800924a:	2500      	movs	r5, #0
 800924c:	4628      	mov	r0, r5
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	b118      	cbz	r0, 800925a <_fflush_r+0x1a>
 8009252:	6983      	ldr	r3, [r0, #24]
 8009254:	b90b      	cbnz	r3, 800925a <_fflush_r+0x1a>
 8009256:	f000 f887 	bl	8009368 <__sinit>
 800925a:	4b14      	ldr	r3, [pc, #80]	; (80092ac <_fflush_r+0x6c>)
 800925c:	429c      	cmp	r4, r3
 800925e:	d11b      	bne.n	8009298 <_fflush_r+0x58>
 8009260:	686c      	ldr	r4, [r5, #4]
 8009262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0ef      	beq.n	800924a <_fflush_r+0xa>
 800926a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800926c:	07d0      	lsls	r0, r2, #31
 800926e:	d404      	bmi.n	800927a <_fflush_r+0x3a>
 8009270:	0599      	lsls	r1, r3, #22
 8009272:	d402      	bmi.n	800927a <_fflush_r+0x3a>
 8009274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009276:	f000 f915 	bl	80094a4 <__retarget_lock_acquire_recursive>
 800927a:	4628      	mov	r0, r5
 800927c:	4621      	mov	r1, r4
 800927e:	f7ff ff5b 	bl	8009138 <__sflush_r>
 8009282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009284:	4605      	mov	r5, r0
 8009286:	07da      	lsls	r2, r3, #31
 8009288:	d4e0      	bmi.n	800924c <_fflush_r+0xc>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	059b      	lsls	r3, r3, #22
 800928e:	d4dd      	bmi.n	800924c <_fflush_r+0xc>
 8009290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009292:	f000 f908 	bl	80094a6 <__retarget_lock_release_recursive>
 8009296:	e7d9      	b.n	800924c <_fflush_r+0xc>
 8009298:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <_fflush_r+0x70>)
 800929a:	429c      	cmp	r4, r3
 800929c:	d101      	bne.n	80092a2 <_fflush_r+0x62>
 800929e:	68ac      	ldr	r4, [r5, #8]
 80092a0:	e7df      	b.n	8009262 <_fflush_r+0x22>
 80092a2:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <_fflush_r+0x74>)
 80092a4:	429c      	cmp	r4, r3
 80092a6:	bf08      	it	eq
 80092a8:	68ec      	ldreq	r4, [r5, #12]
 80092aa:	e7da      	b.n	8009262 <_fflush_r+0x22>
 80092ac:	08009f84 	.word	0x08009f84
 80092b0:	08009fa4 	.word	0x08009fa4
 80092b4:	08009f64 	.word	0x08009f64

080092b8 <std>:
 80092b8:	2300      	movs	r3, #0
 80092ba:	b510      	push	{r4, lr}
 80092bc:	4604      	mov	r4, r0
 80092be:	6083      	str	r3, [r0, #8]
 80092c0:	8181      	strh	r1, [r0, #12]
 80092c2:	4619      	mov	r1, r3
 80092c4:	6643      	str	r3, [r0, #100]	; 0x64
 80092c6:	81c2      	strh	r2, [r0, #14]
 80092c8:	2208      	movs	r2, #8
 80092ca:	6183      	str	r3, [r0, #24]
 80092cc:	e9c0 3300 	strd	r3, r3, [r0]
 80092d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d4:	305c      	adds	r0, #92	; 0x5c
 80092d6:	f7ff fdd9 	bl	8008e8c <memset>
 80092da:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <std+0x38>)
 80092dc:	6224      	str	r4, [r4, #32]
 80092de:	6263      	str	r3, [r4, #36]	; 0x24
 80092e0:	4b04      	ldr	r3, [pc, #16]	; (80092f4 <std+0x3c>)
 80092e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80092e4:	4b04      	ldr	r3, [pc, #16]	; (80092f8 <std+0x40>)
 80092e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092e8:	4b04      	ldr	r3, [pc, #16]	; (80092fc <std+0x44>)
 80092ea:	6323      	str	r3, [r4, #48]	; 0x30
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	bf00      	nop
 80092f0:	08009d35 	.word	0x08009d35
 80092f4:	08009d57 	.word	0x08009d57
 80092f8:	08009d8f 	.word	0x08009d8f
 80092fc:	08009db3 	.word	0x08009db3

08009300 <_cleanup_r>:
 8009300:	4901      	ldr	r1, [pc, #4]	; (8009308 <_cleanup_r+0x8>)
 8009302:	f000 b8af 	b.w	8009464 <_fwalk_reent>
 8009306:	bf00      	nop
 8009308:	08009241 	.word	0x08009241

0800930c <__sfmoreglue>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	2268      	movs	r2, #104	; 0x68
 8009310:	1e4d      	subs	r5, r1, #1
 8009312:	460e      	mov	r6, r1
 8009314:	4355      	muls	r5, r2
 8009316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800931a:	f000 f997 	bl	800964c <_malloc_r>
 800931e:	4604      	mov	r4, r0
 8009320:	b140      	cbz	r0, 8009334 <__sfmoreglue+0x28>
 8009322:	2100      	movs	r1, #0
 8009324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009328:	e9c0 1600 	strd	r1, r6, [r0]
 800932c:	300c      	adds	r0, #12
 800932e:	60a0      	str	r0, [r4, #8]
 8009330:	f7ff fdac 	bl	8008e8c <memset>
 8009334:	4620      	mov	r0, r4
 8009336:	bd70      	pop	{r4, r5, r6, pc}

08009338 <__sfp_lock_acquire>:
 8009338:	4801      	ldr	r0, [pc, #4]	; (8009340 <__sfp_lock_acquire+0x8>)
 800933a:	f000 b8b3 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 800933e:	bf00      	nop
 8009340:	200001cd 	.word	0x200001cd

08009344 <__sfp_lock_release>:
 8009344:	4801      	ldr	r0, [pc, #4]	; (800934c <__sfp_lock_release+0x8>)
 8009346:	f000 b8ae 	b.w	80094a6 <__retarget_lock_release_recursive>
 800934a:	bf00      	nop
 800934c:	200001cd 	.word	0x200001cd

08009350 <__sinit_lock_acquire>:
 8009350:	4801      	ldr	r0, [pc, #4]	; (8009358 <__sinit_lock_acquire+0x8>)
 8009352:	f000 b8a7 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 8009356:	bf00      	nop
 8009358:	200001ce 	.word	0x200001ce

0800935c <__sinit_lock_release>:
 800935c:	4801      	ldr	r0, [pc, #4]	; (8009364 <__sinit_lock_release+0x8>)
 800935e:	f000 b8a2 	b.w	80094a6 <__retarget_lock_release_recursive>
 8009362:	bf00      	nop
 8009364:	200001ce 	.word	0x200001ce

08009368 <__sinit>:
 8009368:	b510      	push	{r4, lr}
 800936a:	4604      	mov	r4, r0
 800936c:	f7ff fff0 	bl	8009350 <__sinit_lock_acquire>
 8009370:	69a3      	ldr	r3, [r4, #24]
 8009372:	b11b      	cbz	r3, 800937c <__sinit+0x14>
 8009374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009378:	f7ff bff0 	b.w	800935c <__sinit_lock_release>
 800937c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009380:	6523      	str	r3, [r4, #80]	; 0x50
 8009382:	4620      	mov	r0, r4
 8009384:	4b12      	ldr	r3, [pc, #72]	; (80093d0 <__sinit+0x68>)
 8009386:	4a13      	ldr	r2, [pc, #76]	; (80093d4 <__sinit+0x6c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	62a2      	str	r2, [r4, #40]	; 0x28
 800938c:	42a3      	cmp	r3, r4
 800938e:	bf04      	itt	eq
 8009390:	2301      	moveq	r3, #1
 8009392:	61a3      	streq	r3, [r4, #24]
 8009394:	f000 f820 	bl	80093d8 <__sfp>
 8009398:	6060      	str	r0, [r4, #4]
 800939a:	4620      	mov	r0, r4
 800939c:	f000 f81c 	bl	80093d8 <__sfp>
 80093a0:	60a0      	str	r0, [r4, #8]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f818 	bl	80093d8 <__sfp>
 80093a8:	2200      	movs	r2, #0
 80093aa:	2104      	movs	r1, #4
 80093ac:	60e0      	str	r0, [r4, #12]
 80093ae:	6860      	ldr	r0, [r4, #4]
 80093b0:	f7ff ff82 	bl	80092b8 <std>
 80093b4:	2201      	movs	r2, #1
 80093b6:	2109      	movs	r1, #9
 80093b8:	68a0      	ldr	r0, [r4, #8]
 80093ba:	f7ff ff7d 	bl	80092b8 <std>
 80093be:	2202      	movs	r2, #2
 80093c0:	2112      	movs	r1, #18
 80093c2:	68e0      	ldr	r0, [r4, #12]
 80093c4:	f7ff ff78 	bl	80092b8 <std>
 80093c8:	2301      	movs	r3, #1
 80093ca:	61a3      	str	r3, [r4, #24]
 80093cc:	e7d2      	b.n	8009374 <__sinit+0xc>
 80093ce:	bf00      	nop
 80093d0:	08009f60 	.word	0x08009f60
 80093d4:	08009301 	.word	0x08009301

080093d8 <__sfp>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	4607      	mov	r7, r0
 80093dc:	f7ff ffac 	bl	8009338 <__sfp_lock_acquire>
 80093e0:	4b1e      	ldr	r3, [pc, #120]	; (800945c <__sfp+0x84>)
 80093e2:	681e      	ldr	r6, [r3, #0]
 80093e4:	69b3      	ldr	r3, [r6, #24]
 80093e6:	b913      	cbnz	r3, 80093ee <__sfp+0x16>
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff ffbd 	bl	8009368 <__sinit>
 80093ee:	3648      	adds	r6, #72	; 0x48
 80093f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	d503      	bpl.n	8009400 <__sfp+0x28>
 80093f8:	6833      	ldr	r3, [r6, #0]
 80093fa:	b30b      	cbz	r3, 8009440 <__sfp+0x68>
 80093fc:	6836      	ldr	r6, [r6, #0]
 80093fe:	e7f7      	b.n	80093f0 <__sfp+0x18>
 8009400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009404:	b9d5      	cbnz	r5, 800943c <__sfp+0x64>
 8009406:	4b16      	ldr	r3, [pc, #88]	; (8009460 <__sfp+0x88>)
 8009408:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800940c:	6665      	str	r5, [r4, #100]	; 0x64
 800940e:	60e3      	str	r3, [r4, #12]
 8009410:	f000 f847 	bl	80094a2 <__retarget_lock_init_recursive>
 8009414:	f7ff ff96 	bl	8009344 <__sfp_lock_release>
 8009418:	2208      	movs	r2, #8
 800941a:	4629      	mov	r1, r5
 800941c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009420:	6025      	str	r5, [r4, #0]
 8009422:	61a5      	str	r5, [r4, #24]
 8009424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800942c:	f7ff fd2e 	bl	8008e8c <memset>
 8009430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009438:	4620      	mov	r0, r4
 800943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943c:	3468      	adds	r4, #104	; 0x68
 800943e:	e7d9      	b.n	80093f4 <__sfp+0x1c>
 8009440:	2104      	movs	r1, #4
 8009442:	4638      	mov	r0, r7
 8009444:	f7ff ff62 	bl	800930c <__sfmoreglue>
 8009448:	4604      	mov	r4, r0
 800944a:	6030      	str	r0, [r6, #0]
 800944c:	2800      	cmp	r0, #0
 800944e:	d1d5      	bne.n	80093fc <__sfp+0x24>
 8009450:	f7ff ff78 	bl	8009344 <__sfp_lock_release>
 8009454:	230c      	movs	r3, #12
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	e7ee      	b.n	8009438 <__sfp+0x60>
 800945a:	bf00      	nop
 800945c:	08009f60 	.word	0x08009f60
 8009460:	ffff0001 	.word	0xffff0001

08009464 <_fwalk_reent>:
 8009464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009468:	4606      	mov	r6, r0
 800946a:	4688      	mov	r8, r1
 800946c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009470:	2700      	movs	r7, #0
 8009472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009476:	f1b9 0901 	subs.w	r9, r9, #1
 800947a:	d505      	bpl.n	8009488 <_fwalk_reent+0x24>
 800947c:	6824      	ldr	r4, [r4, #0]
 800947e:	2c00      	cmp	r4, #0
 8009480:	d1f7      	bne.n	8009472 <_fwalk_reent+0xe>
 8009482:	4638      	mov	r0, r7
 8009484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009488:	89ab      	ldrh	r3, [r5, #12]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d907      	bls.n	800949e <_fwalk_reent+0x3a>
 800948e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009492:	3301      	adds	r3, #1
 8009494:	d003      	beq.n	800949e <_fwalk_reent+0x3a>
 8009496:	4629      	mov	r1, r5
 8009498:	4630      	mov	r0, r6
 800949a:	47c0      	blx	r8
 800949c:	4307      	orrs	r7, r0
 800949e:	3568      	adds	r5, #104	; 0x68
 80094a0:	e7e9      	b.n	8009476 <_fwalk_reent+0x12>

080094a2 <__retarget_lock_init_recursive>:
 80094a2:	4770      	bx	lr

080094a4 <__retarget_lock_acquire_recursive>:
 80094a4:	4770      	bx	lr

080094a6 <__retarget_lock_release_recursive>:
 80094a6:	4770      	bx	lr

080094a8 <__swhatbuf_r>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	460e      	mov	r6, r1
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	b096      	sub	sp, #88	; 0x58
 80094b2:	4614      	mov	r4, r2
 80094b4:	2900      	cmp	r1, #0
 80094b6:	461d      	mov	r5, r3
 80094b8:	da08      	bge.n	80094cc <__swhatbuf_r+0x24>
 80094ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	602a      	str	r2, [r5, #0]
 80094c2:	061a      	lsls	r2, r3, #24
 80094c4:	d410      	bmi.n	80094e8 <__swhatbuf_r+0x40>
 80094c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ca:	e00e      	b.n	80094ea <__swhatbuf_r+0x42>
 80094cc:	466a      	mov	r2, sp
 80094ce:	f000 fc97 	bl	8009e00 <_fstat_r>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	dbf1      	blt.n	80094ba <__swhatbuf_r+0x12>
 80094d6:	9a01      	ldr	r2, [sp, #4]
 80094d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094e0:	425a      	negs	r2, r3
 80094e2:	415a      	adcs	r2, r3
 80094e4:	602a      	str	r2, [r5, #0]
 80094e6:	e7ee      	b.n	80094c6 <__swhatbuf_r+0x1e>
 80094e8:	2340      	movs	r3, #64	; 0x40
 80094ea:	2000      	movs	r0, #0
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	b016      	add	sp, #88	; 0x58
 80094f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080094f4 <__smakebuf_r>:
 80094f4:	898b      	ldrh	r3, [r1, #12]
 80094f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094f8:	079d      	lsls	r5, r3, #30
 80094fa:	4606      	mov	r6, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	d507      	bpl.n	8009510 <__smakebuf_r+0x1c>
 8009500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	6123      	str	r3, [r4, #16]
 8009508:	2301      	movs	r3, #1
 800950a:	6163      	str	r3, [r4, #20]
 800950c:	b002      	add	sp, #8
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	ab01      	add	r3, sp, #4
 8009512:	466a      	mov	r2, sp
 8009514:	f7ff ffc8 	bl	80094a8 <__swhatbuf_r>
 8009518:	9900      	ldr	r1, [sp, #0]
 800951a:	4605      	mov	r5, r0
 800951c:	4630      	mov	r0, r6
 800951e:	f000 f895 	bl	800964c <_malloc_r>
 8009522:	b948      	cbnz	r0, 8009538 <__smakebuf_r+0x44>
 8009524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009528:	059a      	lsls	r2, r3, #22
 800952a:	d4ef      	bmi.n	800950c <__smakebuf_r+0x18>
 800952c:	f023 0303 	bic.w	r3, r3, #3
 8009530:	f043 0302 	orr.w	r3, r3, #2
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	e7e3      	b.n	8009500 <__smakebuf_r+0xc>
 8009538:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <__smakebuf_r+0x7c>)
 800953a:	62b3      	str	r3, [r6, #40]	; 0x28
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	6020      	str	r0, [r4, #0]
 8009540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009544:	6120      	str	r0, [r4, #16]
 8009546:	81a3      	strh	r3, [r4, #12]
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	6163      	str	r3, [r4, #20]
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	b15b      	cbz	r3, 8009568 <__smakebuf_r+0x74>
 8009550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009554:	4630      	mov	r0, r6
 8009556:	f000 fc65 	bl	8009e24 <_isatty_r>
 800955a:	b128      	cbz	r0, 8009568 <__smakebuf_r+0x74>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	f043 0301 	orr.w	r3, r3, #1
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	89a0      	ldrh	r0, [r4, #12]
 800956a:	4305      	orrs	r5, r0
 800956c:	81a5      	strh	r5, [r4, #12]
 800956e:	e7cd      	b.n	800950c <__smakebuf_r+0x18>
 8009570:	08009301 	.word	0x08009301

08009574 <_free_r>:
 8009574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009576:	2900      	cmp	r1, #0
 8009578:	d043      	beq.n	8009602 <_free_r+0x8e>
 800957a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957e:	1f0c      	subs	r4, r1, #4
 8009580:	9001      	str	r0, [sp, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	bfb8      	it	lt
 8009586:	18e4      	addlt	r4, r4, r3
 8009588:	f000 fc7c 	bl	8009e84 <__malloc_lock>
 800958c:	4a1e      	ldr	r2, [pc, #120]	; (8009608 <_free_r+0x94>)
 800958e:	9801      	ldr	r0, [sp, #4]
 8009590:	6813      	ldr	r3, [r2, #0]
 8009592:	b933      	cbnz	r3, 80095a2 <_free_r+0x2e>
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	6014      	str	r4, [r2, #0]
 8009598:	b003      	add	sp, #12
 800959a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800959e:	f000 bc77 	b.w	8009e90 <__malloc_unlock>
 80095a2:	42a3      	cmp	r3, r4
 80095a4:	d908      	bls.n	80095b8 <_free_r+0x44>
 80095a6:	6825      	ldr	r5, [r4, #0]
 80095a8:	1961      	adds	r1, r4, r5
 80095aa:	428b      	cmp	r3, r1
 80095ac:	bf01      	itttt	eq
 80095ae:	6819      	ldreq	r1, [r3, #0]
 80095b0:	685b      	ldreq	r3, [r3, #4]
 80095b2:	1949      	addeq	r1, r1, r5
 80095b4:	6021      	streq	r1, [r4, #0]
 80095b6:	e7ed      	b.n	8009594 <_free_r+0x20>
 80095b8:	461a      	mov	r2, r3
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	b10b      	cbz	r3, 80095c2 <_free_r+0x4e>
 80095be:	42a3      	cmp	r3, r4
 80095c0:	d9fa      	bls.n	80095b8 <_free_r+0x44>
 80095c2:	6811      	ldr	r1, [r2, #0]
 80095c4:	1855      	adds	r5, r2, r1
 80095c6:	42a5      	cmp	r5, r4
 80095c8:	d10b      	bne.n	80095e2 <_free_r+0x6e>
 80095ca:	6824      	ldr	r4, [r4, #0]
 80095cc:	4421      	add	r1, r4
 80095ce:	1854      	adds	r4, r2, r1
 80095d0:	6011      	str	r1, [r2, #0]
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	d1e0      	bne.n	8009598 <_free_r+0x24>
 80095d6:	681c      	ldr	r4, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	4421      	add	r1, r4
 80095dc:	6053      	str	r3, [r2, #4]
 80095de:	6011      	str	r1, [r2, #0]
 80095e0:	e7da      	b.n	8009598 <_free_r+0x24>
 80095e2:	d902      	bls.n	80095ea <_free_r+0x76>
 80095e4:	230c      	movs	r3, #12
 80095e6:	6003      	str	r3, [r0, #0]
 80095e8:	e7d6      	b.n	8009598 <_free_r+0x24>
 80095ea:	6825      	ldr	r5, [r4, #0]
 80095ec:	1961      	adds	r1, r4, r5
 80095ee:	428b      	cmp	r3, r1
 80095f0:	bf02      	ittt	eq
 80095f2:	6819      	ldreq	r1, [r3, #0]
 80095f4:	685b      	ldreq	r3, [r3, #4]
 80095f6:	1949      	addeq	r1, r1, r5
 80095f8:	6063      	str	r3, [r4, #4]
 80095fa:	bf08      	it	eq
 80095fc:	6021      	streq	r1, [r4, #0]
 80095fe:	6054      	str	r4, [r2, #4]
 8009600:	e7ca      	b.n	8009598 <_free_r+0x24>
 8009602:	b003      	add	sp, #12
 8009604:	bd30      	pop	{r4, r5, pc}
 8009606:	bf00      	nop
 8009608:	200001d0 	.word	0x200001d0

0800960c <sbrk_aligned>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	4e0e      	ldr	r6, [pc, #56]	; (8009648 <sbrk_aligned+0x3c>)
 8009610:	460c      	mov	r4, r1
 8009612:	4605      	mov	r5, r0
 8009614:	6831      	ldr	r1, [r6, #0]
 8009616:	b911      	cbnz	r1, 800961e <sbrk_aligned+0x12>
 8009618:	f000 fb7c 	bl	8009d14 <_sbrk_r>
 800961c:	6030      	str	r0, [r6, #0]
 800961e:	4621      	mov	r1, r4
 8009620:	4628      	mov	r0, r5
 8009622:	f000 fb77 	bl	8009d14 <_sbrk_r>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	d00a      	beq.n	8009640 <sbrk_aligned+0x34>
 800962a:	1cc4      	adds	r4, r0, #3
 800962c:	f024 0403 	bic.w	r4, r4, #3
 8009630:	42a0      	cmp	r0, r4
 8009632:	d007      	beq.n	8009644 <sbrk_aligned+0x38>
 8009634:	1a21      	subs	r1, r4, r0
 8009636:	4628      	mov	r0, r5
 8009638:	f000 fb6c 	bl	8009d14 <_sbrk_r>
 800963c:	3001      	adds	r0, #1
 800963e:	d101      	bne.n	8009644 <sbrk_aligned+0x38>
 8009640:	f04f 34ff 	mov.w	r4, #4294967295
 8009644:	4620      	mov	r0, r4
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	200001d4 	.word	0x200001d4

0800964c <_malloc_r>:
 800964c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009650:	1ccd      	adds	r5, r1, #3
 8009652:	4607      	mov	r7, r0
 8009654:	f025 0503 	bic.w	r5, r5, #3
 8009658:	3508      	adds	r5, #8
 800965a:	2d0c      	cmp	r5, #12
 800965c:	bf38      	it	cc
 800965e:	250c      	movcc	r5, #12
 8009660:	2d00      	cmp	r5, #0
 8009662:	db01      	blt.n	8009668 <_malloc_r+0x1c>
 8009664:	42a9      	cmp	r1, r5
 8009666:	d905      	bls.n	8009674 <_malloc_r+0x28>
 8009668:	230c      	movs	r3, #12
 800966a:	2600      	movs	r6, #0
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	4630      	mov	r0, r6
 8009670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009674:	4e2e      	ldr	r6, [pc, #184]	; (8009730 <_malloc_r+0xe4>)
 8009676:	f000 fc05 	bl	8009e84 <__malloc_lock>
 800967a:	6833      	ldr	r3, [r6, #0]
 800967c:	461c      	mov	r4, r3
 800967e:	bb34      	cbnz	r4, 80096ce <_malloc_r+0x82>
 8009680:	4629      	mov	r1, r5
 8009682:	4638      	mov	r0, r7
 8009684:	f7ff ffc2 	bl	800960c <sbrk_aligned>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	4604      	mov	r4, r0
 800968c:	d14d      	bne.n	800972a <_malloc_r+0xde>
 800968e:	6834      	ldr	r4, [r6, #0]
 8009690:	4626      	mov	r6, r4
 8009692:	2e00      	cmp	r6, #0
 8009694:	d140      	bne.n	8009718 <_malloc_r+0xcc>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	4631      	mov	r1, r6
 800969a:	4638      	mov	r0, r7
 800969c:	eb04 0803 	add.w	r8, r4, r3
 80096a0:	f000 fb38 	bl	8009d14 <_sbrk_r>
 80096a4:	4580      	cmp	r8, r0
 80096a6:	d13a      	bne.n	800971e <_malloc_r+0xd2>
 80096a8:	6821      	ldr	r1, [r4, #0]
 80096aa:	3503      	adds	r5, #3
 80096ac:	4638      	mov	r0, r7
 80096ae:	1a6d      	subs	r5, r5, r1
 80096b0:	f025 0503 	bic.w	r5, r5, #3
 80096b4:	3508      	adds	r5, #8
 80096b6:	2d0c      	cmp	r5, #12
 80096b8:	bf38      	it	cc
 80096ba:	250c      	movcc	r5, #12
 80096bc:	4629      	mov	r1, r5
 80096be:	f7ff ffa5 	bl	800960c <sbrk_aligned>
 80096c2:	3001      	adds	r0, #1
 80096c4:	d02b      	beq.n	800971e <_malloc_r+0xd2>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	442b      	add	r3, r5
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	e00e      	b.n	80096ec <_malloc_r+0xa0>
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	1b52      	subs	r2, r2, r5
 80096d2:	d41e      	bmi.n	8009712 <_malloc_r+0xc6>
 80096d4:	2a0b      	cmp	r2, #11
 80096d6:	d916      	bls.n	8009706 <_malloc_r+0xba>
 80096d8:	1961      	adds	r1, r4, r5
 80096da:	42a3      	cmp	r3, r4
 80096dc:	6025      	str	r5, [r4, #0]
 80096de:	bf18      	it	ne
 80096e0:	6059      	strne	r1, [r3, #4]
 80096e2:	6863      	ldr	r3, [r4, #4]
 80096e4:	bf08      	it	eq
 80096e6:	6031      	streq	r1, [r6, #0]
 80096e8:	5162      	str	r2, [r4, r5]
 80096ea:	604b      	str	r3, [r1, #4]
 80096ec:	f104 060b 	add.w	r6, r4, #11
 80096f0:	4638      	mov	r0, r7
 80096f2:	f000 fbcd 	bl	8009e90 <__malloc_unlock>
 80096f6:	1d23      	adds	r3, r4, #4
 80096f8:	f026 0607 	bic.w	r6, r6, #7
 80096fc:	1af2      	subs	r2, r6, r3
 80096fe:	d0b6      	beq.n	800966e <_malloc_r+0x22>
 8009700:	1b9b      	subs	r3, r3, r6
 8009702:	50a3      	str	r3, [r4, r2]
 8009704:	e7b3      	b.n	800966e <_malloc_r+0x22>
 8009706:	6862      	ldr	r2, [r4, #4]
 8009708:	42a3      	cmp	r3, r4
 800970a:	bf0c      	ite	eq
 800970c:	6032      	streq	r2, [r6, #0]
 800970e:	605a      	strne	r2, [r3, #4]
 8009710:	e7ec      	b.n	80096ec <_malloc_r+0xa0>
 8009712:	4623      	mov	r3, r4
 8009714:	6864      	ldr	r4, [r4, #4]
 8009716:	e7b2      	b.n	800967e <_malloc_r+0x32>
 8009718:	4634      	mov	r4, r6
 800971a:	6876      	ldr	r6, [r6, #4]
 800971c:	e7b9      	b.n	8009692 <_malloc_r+0x46>
 800971e:	230c      	movs	r3, #12
 8009720:	4638      	mov	r0, r7
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	f000 fbb4 	bl	8009e90 <__malloc_unlock>
 8009728:	e7a1      	b.n	800966e <_malloc_r+0x22>
 800972a:	6025      	str	r5, [r4, #0]
 800972c:	e7de      	b.n	80096ec <_malloc_r+0xa0>
 800972e:	bf00      	nop
 8009730:	200001d0 	.word	0x200001d0

08009734 <__sfputc_r>:
 8009734:	6893      	ldr	r3, [r2, #8]
 8009736:	3b01      	subs	r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	6093      	str	r3, [r2, #8]
 800973c:	b410      	push	{r4}
 800973e:	da08      	bge.n	8009752 <__sfputc_r+0x1e>
 8009740:	6994      	ldr	r4, [r2, #24]
 8009742:	42a3      	cmp	r3, r4
 8009744:	db01      	blt.n	800974a <__sfputc_r+0x16>
 8009746:	290a      	cmp	r1, #10
 8009748:	d103      	bne.n	8009752 <__sfputc_r+0x1e>
 800974a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800974e:	f7ff bc33 	b.w	8008fb8 <__swbuf_r>
 8009752:	6813      	ldr	r3, [r2, #0]
 8009754:	1c58      	adds	r0, r3, #1
 8009756:	6010      	str	r0, [r2, #0]
 8009758:	4608      	mov	r0, r1
 800975a:	7019      	strb	r1, [r3, #0]
 800975c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009760:	4770      	bx	lr

08009762 <__sfputs_r>:
 8009762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	4614      	mov	r4, r2
 800976a:	18d5      	adds	r5, r2, r3
 800976c:	42ac      	cmp	r4, r5
 800976e:	d101      	bne.n	8009774 <__sfputs_r+0x12>
 8009770:	2000      	movs	r0, #0
 8009772:	e007      	b.n	8009784 <__sfputs_r+0x22>
 8009774:	463a      	mov	r2, r7
 8009776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977a:	4630      	mov	r0, r6
 800977c:	f7ff ffda 	bl	8009734 <__sfputc_r>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d1f3      	bne.n	800976c <__sfputs_r+0xa>
 8009784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009788 <_vfiprintf_r>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	460d      	mov	r5, r1
 800978e:	b09d      	sub	sp, #116	; 0x74
 8009790:	4614      	mov	r4, r2
 8009792:	4698      	mov	r8, r3
 8009794:	4606      	mov	r6, r0
 8009796:	b118      	cbz	r0, 80097a0 <_vfiprintf_r+0x18>
 8009798:	6983      	ldr	r3, [r0, #24]
 800979a:	b90b      	cbnz	r3, 80097a0 <_vfiprintf_r+0x18>
 800979c:	f7ff fde4 	bl	8009368 <__sinit>
 80097a0:	4b89      	ldr	r3, [pc, #548]	; (80099c8 <_vfiprintf_r+0x240>)
 80097a2:	429d      	cmp	r5, r3
 80097a4:	d11b      	bne.n	80097de <_vfiprintf_r+0x56>
 80097a6:	6875      	ldr	r5, [r6, #4]
 80097a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097aa:	07d9      	lsls	r1, r3, #31
 80097ac:	d405      	bmi.n	80097ba <_vfiprintf_r+0x32>
 80097ae:	89ab      	ldrh	r3, [r5, #12]
 80097b0:	059a      	lsls	r2, r3, #22
 80097b2:	d402      	bmi.n	80097ba <_vfiprintf_r+0x32>
 80097b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097b6:	f7ff fe75 	bl	80094a4 <__retarget_lock_acquire_recursive>
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	071b      	lsls	r3, r3, #28
 80097be:	d501      	bpl.n	80097c4 <_vfiprintf_r+0x3c>
 80097c0:	692b      	ldr	r3, [r5, #16]
 80097c2:	b9eb      	cbnz	r3, 8009800 <_vfiprintf_r+0x78>
 80097c4:	4629      	mov	r1, r5
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff fc48 	bl	800905c <__swsetup_r>
 80097cc:	b1c0      	cbz	r0, 8009800 <_vfiprintf_r+0x78>
 80097ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d0:	07dc      	lsls	r4, r3, #31
 80097d2:	d50e      	bpl.n	80097f2 <_vfiprintf_r+0x6a>
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	b01d      	add	sp, #116	; 0x74
 80097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	4b7b      	ldr	r3, [pc, #492]	; (80099cc <_vfiprintf_r+0x244>)
 80097e0:	429d      	cmp	r5, r3
 80097e2:	d101      	bne.n	80097e8 <_vfiprintf_r+0x60>
 80097e4:	68b5      	ldr	r5, [r6, #8]
 80097e6:	e7df      	b.n	80097a8 <_vfiprintf_r+0x20>
 80097e8:	4b79      	ldr	r3, [pc, #484]	; (80099d0 <_vfiprintf_r+0x248>)
 80097ea:	429d      	cmp	r5, r3
 80097ec:	bf08      	it	eq
 80097ee:	68f5      	ldreq	r5, [r6, #12]
 80097f0:	e7da      	b.n	80097a8 <_vfiprintf_r+0x20>
 80097f2:	89ab      	ldrh	r3, [r5, #12]
 80097f4:	0598      	lsls	r0, r3, #22
 80097f6:	d4ed      	bmi.n	80097d4 <_vfiprintf_r+0x4c>
 80097f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097fa:	f7ff fe54 	bl	80094a6 <__retarget_lock_release_recursive>
 80097fe:	e7e9      	b.n	80097d4 <_vfiprintf_r+0x4c>
 8009800:	2300      	movs	r3, #0
 8009802:	f8cd 800c 	str.w	r8, [sp, #12]
 8009806:	f04f 0901 	mov.w	r9, #1
 800980a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80099d4 <_vfiprintf_r+0x24c>
 800980e:	9309      	str	r3, [sp, #36]	; 0x24
 8009810:	2320      	movs	r3, #32
 8009812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009816:	2330      	movs	r3, #48	; 0x30
 8009818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800981c:	4623      	mov	r3, r4
 800981e:	469a      	mov	sl, r3
 8009820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009824:	b10a      	cbz	r2, 800982a <_vfiprintf_r+0xa2>
 8009826:	2a25      	cmp	r2, #37	; 0x25
 8009828:	d1f9      	bne.n	800981e <_vfiprintf_r+0x96>
 800982a:	ebba 0b04 	subs.w	fp, sl, r4
 800982e:	d00b      	beq.n	8009848 <_vfiprintf_r+0xc0>
 8009830:	465b      	mov	r3, fp
 8009832:	4622      	mov	r2, r4
 8009834:	4629      	mov	r1, r5
 8009836:	4630      	mov	r0, r6
 8009838:	f7ff ff93 	bl	8009762 <__sfputs_r>
 800983c:	3001      	adds	r0, #1
 800983e:	f000 80aa 	beq.w	8009996 <_vfiprintf_r+0x20e>
 8009842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009844:	445a      	add	r2, fp
 8009846:	9209      	str	r2, [sp, #36]	; 0x24
 8009848:	f89a 3000 	ldrb.w	r3, [sl]
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 80a2 	beq.w	8009996 <_vfiprintf_r+0x20e>
 8009852:	2300      	movs	r3, #0
 8009854:	f04f 32ff 	mov.w	r2, #4294967295
 8009858:	f10a 0a01 	add.w	sl, sl, #1
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	9307      	str	r3, [sp, #28]
 8009860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009864:	931a      	str	r3, [sp, #104]	; 0x68
 8009866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800986a:	4654      	mov	r4, sl
 800986c:	2205      	movs	r2, #5
 800986e:	4859      	ldr	r0, [pc, #356]	; (80099d4 <_vfiprintf_r+0x24c>)
 8009870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009874:	f000 faf8 	bl	8009e68 <memchr>
 8009878:	9a04      	ldr	r2, [sp, #16]
 800987a:	b9d8      	cbnz	r0, 80098b4 <_vfiprintf_r+0x12c>
 800987c:	06d1      	lsls	r1, r2, #27
 800987e:	bf44      	itt	mi
 8009880:	2320      	movmi	r3, #32
 8009882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009886:	0713      	lsls	r3, r2, #28
 8009888:	bf44      	itt	mi
 800988a:	232b      	movmi	r3, #43	; 0x2b
 800988c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009890:	f89a 3000 	ldrb.w	r3, [sl]
 8009894:	2b2a      	cmp	r3, #42	; 0x2a
 8009896:	d015      	beq.n	80098c4 <_vfiprintf_r+0x13c>
 8009898:	9a07      	ldr	r2, [sp, #28]
 800989a:	4654      	mov	r4, sl
 800989c:	2000      	movs	r0, #0
 800989e:	f04f 0c0a 	mov.w	ip, #10
 80098a2:	4621      	mov	r1, r4
 80098a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098a8:	3b30      	subs	r3, #48	; 0x30
 80098aa:	2b09      	cmp	r3, #9
 80098ac:	d94e      	bls.n	800994c <_vfiprintf_r+0x1c4>
 80098ae:	b1b0      	cbz	r0, 80098de <_vfiprintf_r+0x156>
 80098b0:	9207      	str	r2, [sp, #28]
 80098b2:	e014      	b.n	80098de <_vfiprintf_r+0x156>
 80098b4:	eba0 0308 	sub.w	r3, r0, r8
 80098b8:	46a2      	mov	sl, r4
 80098ba:	fa09 f303 	lsl.w	r3, r9, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	e7d2      	b.n	800986a <_vfiprintf_r+0xe2>
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	1d19      	adds	r1, r3, #4
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	9103      	str	r1, [sp, #12]
 80098ce:	bfbb      	ittet	lt
 80098d0:	425b      	neglt	r3, r3
 80098d2:	f042 0202 	orrlt.w	r2, r2, #2
 80098d6:	9307      	strge	r3, [sp, #28]
 80098d8:	9307      	strlt	r3, [sp, #28]
 80098da:	bfb8      	it	lt
 80098dc:	9204      	strlt	r2, [sp, #16]
 80098de:	7823      	ldrb	r3, [r4, #0]
 80098e0:	2b2e      	cmp	r3, #46	; 0x2e
 80098e2:	d10c      	bne.n	80098fe <_vfiprintf_r+0x176>
 80098e4:	7863      	ldrb	r3, [r4, #1]
 80098e6:	2b2a      	cmp	r3, #42	; 0x2a
 80098e8:	d135      	bne.n	8009956 <_vfiprintf_r+0x1ce>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	3402      	adds	r4, #2
 80098ee:	1d1a      	adds	r2, r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	9203      	str	r2, [sp, #12]
 80098f6:	bfb8      	it	lt
 80098f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80098fc:	9305      	str	r3, [sp, #20]
 80098fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099e4 <_vfiprintf_r+0x25c>
 8009902:	2203      	movs	r2, #3
 8009904:	7821      	ldrb	r1, [r4, #0]
 8009906:	4650      	mov	r0, sl
 8009908:	f000 faae 	bl	8009e68 <memchr>
 800990c:	b140      	cbz	r0, 8009920 <_vfiprintf_r+0x198>
 800990e:	2340      	movs	r3, #64	; 0x40
 8009910:	eba0 000a 	sub.w	r0, r0, sl
 8009914:	3401      	adds	r4, #1
 8009916:	fa03 f000 	lsl.w	r0, r3, r0
 800991a:	9b04      	ldr	r3, [sp, #16]
 800991c:	4303      	orrs	r3, r0
 800991e:	9304      	str	r3, [sp, #16]
 8009920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009924:	2206      	movs	r2, #6
 8009926:	482c      	ldr	r0, [pc, #176]	; (80099d8 <_vfiprintf_r+0x250>)
 8009928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800992c:	f000 fa9c 	bl	8009e68 <memchr>
 8009930:	2800      	cmp	r0, #0
 8009932:	d03f      	beq.n	80099b4 <_vfiprintf_r+0x22c>
 8009934:	4b29      	ldr	r3, [pc, #164]	; (80099dc <_vfiprintf_r+0x254>)
 8009936:	bb1b      	cbnz	r3, 8009980 <_vfiprintf_r+0x1f8>
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	3307      	adds	r3, #7
 800993c:	f023 0307 	bic.w	r3, r3, #7
 8009940:	3308      	adds	r3, #8
 8009942:	9303      	str	r3, [sp, #12]
 8009944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009946:	443b      	add	r3, r7
 8009948:	9309      	str	r3, [sp, #36]	; 0x24
 800994a:	e767      	b.n	800981c <_vfiprintf_r+0x94>
 800994c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009950:	460c      	mov	r4, r1
 8009952:	2001      	movs	r0, #1
 8009954:	e7a5      	b.n	80098a2 <_vfiprintf_r+0x11a>
 8009956:	2300      	movs	r3, #0
 8009958:	3401      	adds	r4, #1
 800995a:	f04f 0c0a 	mov.w	ip, #10
 800995e:	4619      	mov	r1, r3
 8009960:	9305      	str	r3, [sp, #20]
 8009962:	4620      	mov	r0, r4
 8009964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009968:	3a30      	subs	r2, #48	; 0x30
 800996a:	2a09      	cmp	r2, #9
 800996c:	d903      	bls.n	8009976 <_vfiprintf_r+0x1ee>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0c5      	beq.n	80098fe <_vfiprintf_r+0x176>
 8009972:	9105      	str	r1, [sp, #20]
 8009974:	e7c3      	b.n	80098fe <_vfiprintf_r+0x176>
 8009976:	fb0c 2101 	mla	r1, ip, r1, r2
 800997a:	4604      	mov	r4, r0
 800997c:	2301      	movs	r3, #1
 800997e:	e7f0      	b.n	8009962 <_vfiprintf_r+0x1da>
 8009980:	ab03      	add	r3, sp, #12
 8009982:	462a      	mov	r2, r5
 8009984:	a904      	add	r1, sp, #16
 8009986:	4630      	mov	r0, r6
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <_vfiprintf_r+0x258>)
 800998c:	e000      	b.n	8009990 <_vfiprintf_r+0x208>
 800998e:	bf00      	nop
 8009990:	4607      	mov	r7, r0
 8009992:	1c78      	adds	r0, r7, #1
 8009994:	d1d6      	bne.n	8009944 <_vfiprintf_r+0x1bc>
 8009996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009998:	07d9      	lsls	r1, r3, #31
 800999a:	d405      	bmi.n	80099a8 <_vfiprintf_r+0x220>
 800999c:	89ab      	ldrh	r3, [r5, #12]
 800999e:	059a      	lsls	r2, r3, #22
 80099a0:	d402      	bmi.n	80099a8 <_vfiprintf_r+0x220>
 80099a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099a4:	f7ff fd7f 	bl	80094a6 <__retarget_lock_release_recursive>
 80099a8:	89ab      	ldrh	r3, [r5, #12]
 80099aa:	065b      	lsls	r3, r3, #25
 80099ac:	f53f af12 	bmi.w	80097d4 <_vfiprintf_r+0x4c>
 80099b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099b2:	e711      	b.n	80097d8 <_vfiprintf_r+0x50>
 80099b4:	ab03      	add	r3, sp, #12
 80099b6:	462a      	mov	r2, r5
 80099b8:	a904      	add	r1, sp, #16
 80099ba:	4630      	mov	r0, r6
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	4b08      	ldr	r3, [pc, #32]	; (80099e0 <_vfiprintf_r+0x258>)
 80099c0:	f000 f882 	bl	8009ac8 <_printf_i>
 80099c4:	e7e4      	b.n	8009990 <_vfiprintf_r+0x208>
 80099c6:	bf00      	nop
 80099c8:	08009f84 	.word	0x08009f84
 80099cc:	08009fa4 	.word	0x08009fa4
 80099d0:	08009f64 	.word	0x08009f64
 80099d4:	08009fc4 	.word	0x08009fc4
 80099d8:	08009fce 	.word	0x08009fce
 80099dc:	00000000 	.word	0x00000000
 80099e0:	08009763 	.word	0x08009763
 80099e4:	08009fca 	.word	0x08009fca

080099e8 <_printf_common>:
 80099e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	4616      	mov	r6, r2
 80099ee:	4699      	mov	r9, r3
 80099f0:	688a      	ldr	r2, [r1, #8]
 80099f2:	4607      	mov	r7, r0
 80099f4:	690b      	ldr	r3, [r1, #16]
 80099f6:	460c      	mov	r4, r1
 80099f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	bfb8      	it	lt
 8009a00:	4613      	movlt	r3, r2
 8009a02:	6033      	str	r3, [r6, #0]
 8009a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a08:	b10a      	cbz	r2, 8009a0e <_printf_common+0x26>
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	6033      	str	r3, [r6, #0]
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	0699      	lsls	r1, r3, #26
 8009a12:	bf42      	ittt	mi
 8009a14:	6833      	ldrmi	r3, [r6, #0]
 8009a16:	3302      	addmi	r3, #2
 8009a18:	6033      	strmi	r3, [r6, #0]
 8009a1a:	6825      	ldr	r5, [r4, #0]
 8009a1c:	f015 0506 	ands.w	r5, r5, #6
 8009a20:	d106      	bne.n	8009a30 <_printf_common+0x48>
 8009a22:	f104 0a19 	add.w	sl, r4, #25
 8009a26:	68e3      	ldr	r3, [r4, #12]
 8009a28:	6832      	ldr	r2, [r6, #0]
 8009a2a:	1a9b      	subs	r3, r3, r2
 8009a2c:	42ab      	cmp	r3, r5
 8009a2e:	dc29      	bgt.n	8009a84 <_printf_common+0x9c>
 8009a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a34:	1e13      	subs	r3, r2, #0
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	bf18      	it	ne
 8009a3a:	2301      	movne	r3, #1
 8009a3c:	0692      	lsls	r2, r2, #26
 8009a3e:	d42e      	bmi.n	8009a9e <_printf_common+0xb6>
 8009a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a44:	4649      	mov	r1, r9
 8009a46:	4638      	mov	r0, r7
 8009a48:	47c0      	blx	r8
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	d021      	beq.n	8009a92 <_printf_common+0xaa>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	341a      	adds	r4, #26
 8009a52:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8009a56:	f003 0306 	and.w	r3, r3, #6
 8009a5a:	6832      	ldr	r2, [r6, #0]
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009a64:	bf08      	it	eq
 8009a66:	1aad      	subeq	r5, r5, r2
 8009a68:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009a6c:	bf14      	ite	ne
 8009a6e:	2500      	movne	r5, #0
 8009a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a74:	4293      	cmp	r3, r2
 8009a76:	bfc4      	itt	gt
 8009a78:	1a9b      	subgt	r3, r3, r2
 8009a7a:	18ed      	addgt	r5, r5, r3
 8009a7c:	42b5      	cmp	r5, r6
 8009a7e:	d11a      	bne.n	8009ab6 <_printf_common+0xce>
 8009a80:	2000      	movs	r0, #0
 8009a82:	e008      	b.n	8009a96 <_printf_common+0xae>
 8009a84:	2301      	movs	r3, #1
 8009a86:	4652      	mov	r2, sl
 8009a88:	4649      	mov	r1, r9
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	47c0      	blx	r8
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d103      	bne.n	8009a9a <_printf_common+0xb2>
 8009a92:	f04f 30ff 	mov.w	r0, #4294967295
 8009a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a9a:	3501      	adds	r5, #1
 8009a9c:	e7c3      	b.n	8009a26 <_printf_common+0x3e>
 8009a9e:	18e1      	adds	r1, r4, r3
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	2030      	movs	r0, #48	; 0x30
 8009aa4:	3302      	adds	r3, #2
 8009aa6:	4422      	add	r2, r4
 8009aa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ab4:	e7c4      	b.n	8009a40 <_printf_common+0x58>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4622      	mov	r2, r4
 8009aba:	4649      	mov	r1, r9
 8009abc:	4638      	mov	r0, r7
 8009abe:	47c0      	blx	r8
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d0e6      	beq.n	8009a92 <_printf_common+0xaa>
 8009ac4:	3601      	adds	r6, #1
 8009ac6:	e7d9      	b.n	8009a7c <_printf_common+0x94>

08009ac8 <_printf_i>:
 8009ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	7e0f      	ldrb	r7, [r1, #24]
 8009ace:	4691      	mov	r9, r2
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	2f78      	cmp	r7, #120	; 0x78
 8009ad6:	469a      	mov	sl, r3
 8009ad8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ade:	d807      	bhi.n	8009af0 <_printf_i+0x28>
 8009ae0:	2f62      	cmp	r7, #98	; 0x62
 8009ae2:	d80a      	bhi.n	8009afa <_printf_i+0x32>
 8009ae4:	2f00      	cmp	r7, #0
 8009ae6:	f000 80d8 	beq.w	8009c9a <_printf_i+0x1d2>
 8009aea:	2f58      	cmp	r7, #88	; 0x58
 8009aec:	f000 80a3 	beq.w	8009c36 <_printf_i+0x16e>
 8009af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009af8:	e03a      	b.n	8009b70 <_printf_i+0xa8>
 8009afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009afe:	2b15      	cmp	r3, #21
 8009b00:	d8f6      	bhi.n	8009af0 <_printf_i+0x28>
 8009b02:	a101      	add	r1, pc, #4	; (adr r1, 8009b08 <_printf_i+0x40>)
 8009b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b08:	08009b61 	.word	0x08009b61
 8009b0c:	08009b75 	.word	0x08009b75
 8009b10:	08009af1 	.word	0x08009af1
 8009b14:	08009af1 	.word	0x08009af1
 8009b18:	08009af1 	.word	0x08009af1
 8009b1c:	08009af1 	.word	0x08009af1
 8009b20:	08009b75 	.word	0x08009b75
 8009b24:	08009af1 	.word	0x08009af1
 8009b28:	08009af1 	.word	0x08009af1
 8009b2c:	08009af1 	.word	0x08009af1
 8009b30:	08009af1 	.word	0x08009af1
 8009b34:	08009c81 	.word	0x08009c81
 8009b38:	08009ba5 	.word	0x08009ba5
 8009b3c:	08009c63 	.word	0x08009c63
 8009b40:	08009af1 	.word	0x08009af1
 8009b44:	08009af1 	.word	0x08009af1
 8009b48:	08009ca3 	.word	0x08009ca3
 8009b4c:	08009af1 	.word	0x08009af1
 8009b50:	08009ba5 	.word	0x08009ba5
 8009b54:	08009af1 	.word	0x08009af1
 8009b58:	08009af1 	.word	0x08009af1
 8009b5c:	08009c6b 	.word	0x08009c6b
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	602a      	str	r2, [r5, #0]
 8009b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b70:	2301      	movs	r3, #1
 8009b72:	e0a3      	b.n	8009cbc <_printf_i+0x1f4>
 8009b74:	6820      	ldr	r0, [r4, #0]
 8009b76:	6829      	ldr	r1, [r5, #0]
 8009b78:	0606      	lsls	r6, r0, #24
 8009b7a:	f101 0304 	add.w	r3, r1, #4
 8009b7e:	d50a      	bpl.n	8009b96 <_printf_i+0xce>
 8009b80:	680e      	ldr	r6, [r1, #0]
 8009b82:	602b      	str	r3, [r5, #0]
 8009b84:	2e00      	cmp	r6, #0
 8009b86:	da03      	bge.n	8009b90 <_printf_i+0xc8>
 8009b88:	232d      	movs	r3, #45	; 0x2d
 8009b8a:	4276      	negs	r6, r6
 8009b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b90:	485e      	ldr	r0, [pc, #376]	; (8009d0c <_printf_i+0x244>)
 8009b92:	230a      	movs	r3, #10
 8009b94:	e019      	b.n	8009bca <_printf_i+0x102>
 8009b96:	680e      	ldr	r6, [r1, #0]
 8009b98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b9c:	602b      	str	r3, [r5, #0]
 8009b9e:	bf18      	it	ne
 8009ba0:	b236      	sxthne	r6, r6
 8009ba2:	e7ef      	b.n	8009b84 <_printf_i+0xbc>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	6820      	ldr	r0, [r4, #0]
 8009ba8:	1d19      	adds	r1, r3, #4
 8009baa:	6029      	str	r1, [r5, #0]
 8009bac:	0601      	lsls	r1, r0, #24
 8009bae:	d501      	bpl.n	8009bb4 <_printf_i+0xec>
 8009bb0:	681e      	ldr	r6, [r3, #0]
 8009bb2:	e002      	b.n	8009bba <_printf_i+0xf2>
 8009bb4:	0646      	lsls	r6, r0, #25
 8009bb6:	d5fb      	bpl.n	8009bb0 <_printf_i+0xe8>
 8009bb8:	881e      	ldrh	r6, [r3, #0]
 8009bba:	2f6f      	cmp	r7, #111	; 0x6f
 8009bbc:	4853      	ldr	r0, [pc, #332]	; (8009d0c <_printf_i+0x244>)
 8009bbe:	bf0c      	ite	eq
 8009bc0:	2308      	moveq	r3, #8
 8009bc2:	230a      	movne	r3, #10
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bca:	6865      	ldr	r5, [r4, #4]
 8009bcc:	2d00      	cmp	r5, #0
 8009bce:	60a5      	str	r5, [r4, #8]
 8009bd0:	bfa2      	ittt	ge
 8009bd2:	6821      	ldrge	r1, [r4, #0]
 8009bd4:	f021 0104 	bicge.w	r1, r1, #4
 8009bd8:	6021      	strge	r1, [r4, #0]
 8009bda:	b90e      	cbnz	r6, 8009be0 <_printf_i+0x118>
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	d04d      	beq.n	8009c7c <_printf_i+0x1b4>
 8009be0:	4615      	mov	r5, r2
 8009be2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009be6:	fb03 6711 	mls	r7, r3, r1, r6
 8009bea:	5dc7      	ldrb	r7, [r0, r7]
 8009bec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bf0:	4637      	mov	r7, r6
 8009bf2:	460e      	mov	r6, r1
 8009bf4:	42bb      	cmp	r3, r7
 8009bf6:	d9f4      	bls.n	8009be2 <_printf_i+0x11a>
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d10b      	bne.n	8009c14 <_printf_i+0x14c>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07de      	lsls	r6, r3, #31
 8009c00:	d508      	bpl.n	8009c14 <_printf_i+0x14c>
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	6861      	ldr	r1, [r4, #4]
 8009c06:	4299      	cmp	r1, r3
 8009c08:	bfde      	ittt	le
 8009c0a:	2330      	movle	r3, #48	; 0x30
 8009c0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c14:	1b52      	subs	r2, r2, r5
 8009c16:	6122      	str	r2, [r4, #16]
 8009c18:	464b      	mov	r3, r9
 8009c1a:	aa03      	add	r2, sp, #12
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4640      	mov	r0, r8
 8009c20:	f8cd a000 	str.w	sl, [sp]
 8009c24:	f7ff fee0 	bl	80099e8 <_printf_common>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d14c      	bne.n	8009cc6 <_printf_i+0x1fe>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	b004      	add	sp, #16
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c36:	4835      	ldr	r0, [pc, #212]	; (8009d0c <_printf_i+0x244>)
 8009c38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c3c:	6829      	ldr	r1, [r5, #0]
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c44:	6029      	str	r1, [r5, #0]
 8009c46:	061d      	lsls	r5, r3, #24
 8009c48:	d514      	bpl.n	8009c74 <_printf_i+0x1ac>
 8009c4a:	07df      	lsls	r7, r3, #31
 8009c4c:	bf44      	itt	mi
 8009c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c52:	6023      	strmi	r3, [r4, #0]
 8009c54:	b91e      	cbnz	r6, 8009c5e <_printf_i+0x196>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	f023 0320 	bic.w	r3, r3, #32
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	2310      	movs	r3, #16
 8009c60:	e7b0      	b.n	8009bc4 <_printf_i+0xfc>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	f043 0320 	orr.w	r3, r3, #32
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	2378      	movs	r3, #120	; 0x78
 8009c6c:	4828      	ldr	r0, [pc, #160]	; (8009d10 <_printf_i+0x248>)
 8009c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c72:	e7e3      	b.n	8009c3c <_printf_i+0x174>
 8009c74:	0659      	lsls	r1, r3, #25
 8009c76:	bf48      	it	mi
 8009c78:	b2b6      	uxthmi	r6, r6
 8009c7a:	e7e6      	b.n	8009c4a <_printf_i+0x182>
 8009c7c:	4615      	mov	r5, r2
 8009c7e:	e7bb      	b.n	8009bf8 <_printf_i+0x130>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	6826      	ldr	r6, [r4, #0]
 8009c84:	1d18      	adds	r0, r3, #4
 8009c86:	6961      	ldr	r1, [r4, #20]
 8009c88:	6028      	str	r0, [r5, #0]
 8009c8a:	0635      	lsls	r5, r6, #24
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0x1cc>
 8009c90:	6019      	str	r1, [r3, #0]
 8009c92:	e002      	b.n	8009c9a <_printf_i+0x1d2>
 8009c94:	0670      	lsls	r0, r6, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0x1c8>
 8009c98:	8019      	strh	r1, [r3, #0]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	4615      	mov	r5, r2
 8009c9e:	6123      	str	r3, [r4, #16]
 8009ca0:	e7ba      	b.n	8009c18 <_printf_i+0x150>
 8009ca2:	682b      	ldr	r3, [r5, #0]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	1d1a      	adds	r2, r3, #4
 8009ca8:	602a      	str	r2, [r5, #0]
 8009caa:	681d      	ldr	r5, [r3, #0]
 8009cac:	6862      	ldr	r2, [r4, #4]
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 f8da 	bl	8009e68 <memchr>
 8009cb4:	b108      	cbz	r0, 8009cba <_printf_i+0x1f2>
 8009cb6:	1b40      	subs	r0, r0, r5
 8009cb8:	6060      	str	r0, [r4, #4]
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	6123      	str	r3, [r4, #16]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc4:	e7a8      	b.n	8009c18 <_printf_i+0x150>
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	462a      	mov	r2, r5
 8009cca:	4649      	mov	r1, r9
 8009ccc:	4640      	mov	r0, r8
 8009cce:	47d0      	blx	sl
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d0ab      	beq.n	8009c2c <_printf_i+0x164>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	079b      	lsls	r3, r3, #30
 8009cd8:	d413      	bmi.n	8009d02 <_printf_i+0x23a>
 8009cda:	68e0      	ldr	r0, [r4, #12]
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	4298      	cmp	r0, r3
 8009ce0:	bfb8      	it	lt
 8009ce2:	4618      	movlt	r0, r3
 8009ce4:	e7a4      	b.n	8009c30 <_printf_i+0x168>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	4632      	mov	r2, r6
 8009cea:	4649      	mov	r1, r9
 8009cec:	4640      	mov	r0, r8
 8009cee:	47d0      	blx	sl
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d09b      	beq.n	8009c2c <_printf_i+0x164>
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	68e3      	ldr	r3, [r4, #12]
 8009cf8:	9903      	ldr	r1, [sp, #12]
 8009cfa:	1a5b      	subs	r3, r3, r1
 8009cfc:	42ab      	cmp	r3, r5
 8009cfe:	dcf2      	bgt.n	8009ce6 <_printf_i+0x21e>
 8009d00:	e7eb      	b.n	8009cda <_printf_i+0x212>
 8009d02:	2500      	movs	r5, #0
 8009d04:	f104 0619 	add.w	r6, r4, #25
 8009d08:	e7f5      	b.n	8009cf6 <_printf_i+0x22e>
 8009d0a:	bf00      	nop
 8009d0c:	08009fd5 	.word	0x08009fd5
 8009d10:	08009fe6 	.word	0x08009fe6

08009d14 <_sbrk_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	2300      	movs	r3, #0
 8009d18:	4d05      	ldr	r5, [pc, #20]	; (8009d30 <_sbrk_r+0x1c>)
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	f7f7 fa54 	bl	80011cc <_sbrk>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_sbrk_r+0x1a>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_sbrk_r+0x1a>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	200001d8 	.word	0x200001d8

08009d34 <__sread>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	460c      	mov	r4, r1
 8009d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d3c:	f000 f8ae 	bl	8009e9c <_read_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	bfab      	itete	ge
 8009d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d46:	89a3      	ldrhlt	r3, [r4, #12]
 8009d48:	181b      	addge	r3, r3, r0
 8009d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d4e:	bfac      	ite	ge
 8009d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d52:	81a3      	strhlt	r3, [r4, #12]
 8009d54:	bd10      	pop	{r4, pc}

08009d56 <__swrite>:
 8009d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5a:	461f      	mov	r7, r3
 8009d5c:	898b      	ldrh	r3, [r1, #12]
 8009d5e:	4605      	mov	r5, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	05db      	lsls	r3, r3, #23
 8009d64:	4616      	mov	r6, r2
 8009d66:	d505      	bpl.n	8009d74 <__swrite+0x1e>
 8009d68:	2302      	movs	r3, #2
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d70:	f000 f868 	bl	8009e44 <_lseek_r>
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	4632      	mov	r2, r6
 8009d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d82:	81a3      	strh	r3, [r4, #12]
 8009d84:	463b      	mov	r3, r7
 8009d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8a:	f000 b817 	b.w	8009dbc <_write_r>

08009d8e <__sseek>:
 8009d8e:	b510      	push	{r4, lr}
 8009d90:	460c      	mov	r4, r1
 8009d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d96:	f000 f855 	bl	8009e44 <_lseek_r>
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	bf15      	itete	ne
 8009da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009daa:	81a3      	strheq	r3, [r4, #12]
 8009dac:	bf18      	it	ne
 8009dae:	81a3      	strhne	r3, [r4, #12]
 8009db0:	bd10      	pop	{r4, pc}

08009db2 <__sclose>:
 8009db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db6:	f000 b813 	b.w	8009de0 <_close_r>
	...

08009dbc <_write_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4d06      	ldr	r5, [pc, #24]	; (8009ddc <_write_r+0x20>)
 8009dc2:	4608      	mov	r0, r1
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	602a      	str	r2, [r5, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f7f7 f9ad 	bl	800112a <_write>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_write_r+0x1e>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_write_r+0x1e>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	200001d8 	.word	0x200001d8

08009de0 <_close_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	2300      	movs	r3, #0
 8009de4:	4d05      	ldr	r5, [pc, #20]	; (8009dfc <_close_r+0x1c>)
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	f7f7 f9b9 	bl	8001162 <_close>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_close_r+0x1a>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_close_r+0x1a>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	200001d8 	.word	0x200001d8

08009e00 <_fstat_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	2300      	movs	r3, #0
 8009e04:	4d06      	ldr	r5, [pc, #24]	; (8009e20 <_fstat_r+0x20>)
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	f7f7 f9b4 	bl	800117a <_fstat>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	d102      	bne.n	8009e1c <_fstat_r+0x1c>
 8009e16:	682b      	ldr	r3, [r5, #0]
 8009e18:	b103      	cbz	r3, 8009e1c <_fstat_r+0x1c>
 8009e1a:	6023      	str	r3, [r4, #0]
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}
 8009e1e:	bf00      	nop
 8009e20:	200001d8 	.word	0x200001d8

08009e24 <_isatty_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	2300      	movs	r3, #0
 8009e28:	4d05      	ldr	r5, [pc, #20]	; (8009e40 <_isatty_r+0x1c>)
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	602b      	str	r3, [r5, #0]
 8009e30:	f7f7 f9b3 	bl	800119a <_isatty>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d102      	bne.n	8009e3e <_isatty_r+0x1a>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	b103      	cbz	r3, 8009e3e <_isatty_r+0x1a>
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	200001d8 	.word	0x200001d8

08009e44 <_lseek_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4604      	mov	r4, r0
 8009e48:	4d06      	ldr	r5, [pc, #24]	; (8009e64 <_lseek_r+0x20>)
 8009e4a:	4608      	mov	r0, r1
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	602a      	str	r2, [r5, #0]
 8009e52:	461a      	mov	r2, r3
 8009e54:	f7f7 f9ac 	bl	80011b0 <_lseek>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_lseek_r+0x1e>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_lseek_r+0x1e>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	200001d8 	.word	0x200001d8

08009e68 <memchr>:
 8009e68:	b2c9      	uxtb	r1, r1
 8009e6a:	4402      	add	r2, r0
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	4290      	cmp	r0, r2
 8009e70:	4603      	mov	r3, r0
 8009e72:	d101      	bne.n	8009e78 <memchr+0x10>
 8009e74:	2300      	movs	r3, #0
 8009e76:	e003      	b.n	8009e80 <memchr+0x18>
 8009e78:	781c      	ldrb	r4, [r3, #0]
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	428c      	cmp	r4, r1
 8009e7e:	d1f6      	bne.n	8009e6e <memchr+0x6>
 8009e80:	4618      	mov	r0, r3
 8009e82:	bd10      	pop	{r4, pc}

08009e84 <__malloc_lock>:
 8009e84:	4801      	ldr	r0, [pc, #4]	; (8009e8c <__malloc_lock+0x8>)
 8009e86:	f7ff bb0d 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	200001cc 	.word	0x200001cc

08009e90 <__malloc_unlock>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__malloc_unlock+0x8>)
 8009e92:	f7ff bb08 	b.w	80094a6 <__retarget_lock_release_recursive>
 8009e96:	bf00      	nop
 8009e98:	200001cc 	.word	0x200001cc

08009e9c <_read_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4d06      	ldr	r5, [pc, #24]	; (8009ebc <_read_r+0x20>)
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f7f7 f920 	bl	80010f0 <_read>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_read_r+0x1e>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_read_r+0x1e>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	200001d8 	.word	0x200001d8

08009ec0 <_init>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	bf00      	nop
 8009ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec6:	bc08      	pop	{r3}
 8009ec8:	469e      	mov	lr, r3
 8009eca:	4770      	bx	lr

08009ecc <_fini>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr
